{"version":3,"sources":["index.tsx"],"names":["WalletManager","NativeModules","canAddPasses","Platform","OS","Error","addPassFromUrl","url","Linking","openURL","hasPass","cardIdentifier","serialNumber","removePass","viewInWallet"],"mappings":";;;;;;;AAAA;;AAUA,MAAM;AAAEA,EAAAA;AAAF,IAAoBC,0BAA1B;eAEe;AACbC,EAAAA,YAAY,EAAE,YAAY;AACxB,QAAIC,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,WAAO,MAAML,aAAa,CAACE,YAAd,EAAb;AACD,GANY;AAObI,EAAAA,cAAc,EACZH,sBAASC,EAAT,KAAgB,KAAhB,GACIJ,aAAa,CAACM,cADlB,GAEKC,GAAD,IAASC,qBAAQC,OAAR,CAAgBF,GAAhB,CAVF;AAWbG,EAAAA,OAAO,EAAE,OAAOC,cAAP,EAA+BC,YAA/B,KAAyD;AAChE,QAAIT,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,WAAO,MAAML,aAAa,CAACU,OAAd,CACXC,cADW,EAEXC,YAAY,IAAI,IAAhB,GAAuBA,YAAvB,GAAsC,IAF3B,CAAb;AAID,GAnBY;AAoBbC,EAAAA,UAAU,EAAE,OAAOF,cAAP,EAA+BC,YAA/B,KAAyD;AACnE,QAAIT,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,4CAAV,CAAN;AACD;;AACD,WAAO,MAAML,aAAa,CAACa,UAAd,CACXF,cADW,EAEXC,YAAY,IAAI,IAAhB,GAAuBA,YAAvB,GAAsC,IAF3B,CAAb;AAID,GA5BY;AA6BbE,EAAAA,YAAY,EAAE,OAAOH,cAAP,EAA+BC,YAA/B,KAAyD;AACrE,QAAIT,sBAASC,EAAT,KAAgB,SAApB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD;;AACD,WAAO,MAAML,aAAa,CAACc,YAAd,CACXH,cADW,EAEXC,YAAY,IAAI,IAAhB,GAAuBA,YAAvB,GAAsC,IAF3B,CAAb;AAID;AArCY,C,EAwCf;AACA;AACA;AACA;AACA","sourcesContent":["import { NativeModules, Platform, Linking } from 'react-native';\n\ntype WalletManagerType = {\n  canAddPasses(): Promise<boolean>;\n  addPassFromUrl(url: string): Promise<boolean>;\n  hasPass(cardIdentifier: string, serialNumber?: string): Promise<boolean>;\n  removePass(cardIdentifier: string, serialNumber?: string): Promise<boolean>;\n  viewInWallet(cardIdentifier: string, serialNumber?: string): Promise<boolean>;\n};\n\nconst { WalletManager } = NativeModules;\n\nexport default {\n  canAddPasses: async () => {\n    if (Platform.OS === 'android') {\n      throw new Error('canAddPasses method not available on Android');\n    }\n    return await WalletManager.canAddPasses();\n  },\n  addPassFromUrl:\n    Platform.OS === 'ios'\n      ? WalletManager.addPassFromUrl\n      : (url) => Linking.openURL(url),\n  hasPass: async (cardIdentifier: string, serialNumber?: string) => {\n    if (Platform.OS === 'android') {\n      throw new Error('hasPass method not available on Android');\n    }\n    return await WalletManager.hasPass(\n      cardIdentifier,\n      serialNumber != null ? serialNumber : null\n    );\n  },\n  removePass: async (cardIdentifier: string, serialNumber?: string) => {\n    if (Platform.OS === 'android') {\n      throw new Error('removePass method not available on Android');\n    }\n    return await WalletManager.removePass(\n      cardIdentifier,\n      serialNumber != null ? serialNumber : null\n    );\n  },\n  viewInWallet: async (cardIdentifier: string, serialNumber?: string) => {\n    if (Platform.OS === 'android') {\n      throw new Error('viewInWallet method not available on Android');\n    }\n    return await WalletManager.viewInWallet(\n      cardIdentifier,\n      serialNumber != null ? serialNumber : null\n    );\n  },\n} as WalletManagerType;\n\n// Platform.OS === 'ios'\n// ? WalletManager.removePass\n// : new Promise((_, reject) => {\n//     return reject('removePass method not available on Android');\n//   }),\n"]}