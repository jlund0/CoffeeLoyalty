"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _jsbn = require("jsbn");
var _sha = _interopRequireDefault(require("crypto-js/sha256"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/*
Based on the work of Tom Wu
http://www-cs-students.stanford.edu/~tjw/jsbn/
http://www-cs-students.stanford.edu/~tjw/jsbn/LICENSE
*/

const digestInfoHead = {
  sha256: '3031300d060960864801650304020105000420'
};
const digestAlgs = {
  sha256: _sha.default
};
class RSAVerifier {
  e = 0;
  constructor(modulus, exp) {
    if (modulus && modulus.length > 0 && exp && exp.length > 0) {
      this.n = new _jsbn.BigInteger(modulus, 16);
      this.e = parseInt(exp, 16);
    } else {
      throw new Error('Invalid key data');
    }
  }
  verify(msg, encodedSignature) {
    const decodedSignature = encodedSignature.replace(/[^0-9a-f]|[\s\n]]/gi, '');
    const signature = new _jsbn.BigInteger(decodedSignature, 16);
    if (signature.bitLength() > this.n.bitLength()) {
      //Signature does not match with the key modulus.
      return false;
    }
    const decryptedSignature = signature.modPowInt(this.e, this.n);
    const digest = decryptedSignature.toString(16).replace(/^1f+00/, '');
    const digestInfo = getAlgorithmFromDigest(digest);
    if (digestInfo === null) {
      //Hashing algorithm is not found
      return false;
    }
    if (!digestAlgs.hasOwnProperty(digestInfo.alg)) {
      //Hashing algorithm is not supported
      return false;
    }
    const msgHash = digestAlgs[digestInfo.alg](msg).toString();
    return digestInfo.hash === msgHash;
  }
}
function getAlgorithmFromDigest(hDigestInfo) {
  for (let algName in digestInfoHead) {
    const head = digestInfoHead[algName];
    const len = head.length;
    if (hDigestInfo.substring(0, len) === head) {
      return {
        alg: algName,
        hash: hDigestInfo.substring(len)
      };
    }
  }
  return null;
}
var _default = RSAVerifier;
exports.default = _default;
//# sourceMappingURL=rsa-verifier.js.map