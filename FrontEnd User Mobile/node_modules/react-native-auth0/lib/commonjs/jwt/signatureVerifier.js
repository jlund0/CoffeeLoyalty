"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.verifySignature = void 0;
var _authError = _interopRequireDefault(require("../auth/authError"));
var _rsaVerifier = _interopRequireDefault(require("./rsa-verifier"));
var base64 = _interopRequireWildcard(require("./base64"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
const jwtDecoder = require('jwt-decode');
const ALLOWED_ALGORITHMS = ['RS256', 'HS256'];

/**
 * Verifies that an ID token is signed with a supported algorithm (HS256 or RS256), and verifies the signature
 * if signed with RS256. Note that this function is specific to the internals of this SDK, and not supported for general use.
 * @param {String} idToken the ID token
 * @param {Object} options required to verify an ID token's signature
 * @param {String} [options.domain] the Auth0 domain of the token's issuer
 * @returns {Promise} A promise that resolves to the decoded payload of the ID token, or rejects if the verification fails.
 */
const verifySignature = (idToken, options) => {
  let header;
  let payload;
  try {
    header = jwtDecoder(idToken, {
      header: true
    });
    payload = jwtDecoder(idToken);
  } catch (err) {
    return Promise.reject(idTokenError({
      error: 'token_decoding_error',
      desc: 'ID token could not be decoded'
    }));
  }
  const alg = header.alg;
  if (!alg || !ALLOWED_ALGORITHMS.includes(alg)) {
    return Promise.reject(idTokenError({
      error: 'invalid_algorithm',
      desc: `Signature algorithm of "${alg}" is not supported. Expected "RS256" or "HS256".`
    }));
  }

  // HS256 tokens require private key, which cannot be stored securely in public clients.
  // Since the ID token exchange is done via CODE with PKCE flow, we can skip signature verification in this case.
  if (alg === 'HS256') {
    return Promise.resolve(payload);
  }
  return getJwk(options.domain, header.kid).then(jwk => {
    const rsaVerifier = rsaVerifierForKey(jwk);
    const encodedParts = idToken.split('.');
    const headerAndPayload = encodedParts[0] + '.' + encodedParts[1];
    const signature = base64.decodeToHEX(encodedParts[2]);
    if (rsaVerifier.verify(headerAndPayload, signature)) {
      return Promise.resolve(payload);
    }
    return Promise.reject(idTokenError({
      error: 'invalid_signature',
      desc: 'Invalid ID token signature'
    }));
  });
};
exports.verifySignature = verifySignature;
const rsaVerifierForKey = jwk => {
  const modulus = base64.decodeToHEX(jwk.n);
  const exponent = base64.decodeToHEX(jwk.e);
  return new _rsaVerifier.default(modulus, exponent);
};
const getJwk = (domain, kid) => {
  return getJwksUri(domain).then(uri => fetchJson(uri)).then(jwk => {
    const keys = jwk.keys;
    const key = keys.filter(k => k.use === 'sig' && k.kty === 'RSA' && k.kid && k.n && k.e).find(k => k.kid === kid);
    if (!key) {
      throw new Error('Key not present');
    }
    return Promise.resolve(key);
  }).catch(err => {
    return Promise.reject(idTokenError({
      error: 'key_retrieval_error',
      desc: `Could not find a public key for Key ID (kid) "${kid}"`
    }));
  });
};
const getJwksUri = domain => {
  return fetch(`https://${domain}/.well-known/openid-configuration`).then(resp => resp.json()).then(openIdConfig => openIdConfig.jwks_uri);
};
const fetchJson = uri => {
  return fetch(uri).then(resp => resp.json());
};
const idTokenError = err => {
  return new _authError.default({
    json: {
      error: `a0.idtoken.${err.error}`,
      error_description: err.desc
    },
    status: 0
  });
};
//# sourceMappingURL=signatureVerifier.js.map