"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _networking = _interopRequireDefault(require("../networking"));
var _camel = require("../utils/camel");
var _error = _interopRequireDefault(require("./error"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function responseHandler(response) {
  let exceptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  if (response.ok && response.json) {
    return (0, _camel.toCamelCase)(response.json, exceptions);
  }
  throw new _error.default(response);
}
const attributes = ['name', 'nickname', 'picture', 'user_id', 'user_metadata', 'app_metadata', 'email', 'email_verified', 'given_name', 'family_name'];

/**
 * Auth0 Management API User endpoints
 *
 * @export
 * @see https://auth0.com/docs/api/management/v2#!/Users/
 * @class Users
 */
class Users {
  /**
   * @ignore
   */
  constructor(options) {
    this.client = new _networking.default(options);
    if (!options.token) {
      throw new Error('Missing token in parameters');
    }
  }

  /**
   * Returns the user by identifier
   *
   * @param {Object} parameters get user by identifier parameters
   * @param {String} parameters.id identifier of the user to obtain
   * @returns {Promise}
   * @see https://auth0.com/docs/api/management/v2#!/Users/get_users_by_id
   *
   * @memberof Users
   */
  getUser(parameters) {
    return this.client.get(`/api/v2/users/${encodeURIComponent(parameters.id)}`).then(response => responseHandler(response, {
      attributes,
      whitelist: true,
      rootOnly: true
    }));
  }

  /**
   * Patch a user's `user_metadata`
   *
   * @param {Object} parameters patch user metadata parameters
   * @param {String} parameters.id identifier of the user to patch
   * @param {Object} parameters.metadata object with attributes to store in user_metadata.
   * @returns {Promise}
   * @see https://auth0.com/docs/api/management/v2#!/Users/patch_users_by_id
   *
   * @memberof Users
   */
  patchUser(parameters) {
    return this.client.patch(`/api/v2/users/${encodeURIComponent(parameters.id)}`, {
      user_metadata: parameters.metadata
    }).then(response => responseHandler(response, {
      attributes,
      whitelist: true,
      rootOnly: true
    }));
  }
}
var _default = Users;
exports.default = _default;
//# sourceMappingURL=users.js.map