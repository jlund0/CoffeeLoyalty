"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.addIOSAuth0ConfigInInfoPList = exports.addAuth0GradleValues = exports.addAuth0AppDelegateCode = exports.addAndroidAuth0Gradle = void 0;
var _configPlugins = require("expo/config-plugins");
var _generateCode = require("./generateCode");
let APPLICATION_ID_SUFFIX = '.auth0';
let pkg = {
  name: 'react-native-auth0'
};
try {
  pkg = require('react-native-auth0/package.json');
} catch {
  // empty catch block
}
const addAuth0GradleValues = function (src, auth0Domain) {
  let auth0Scheme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'applicationId';
  return (0, _generateCode.mergeContents)({
    tag: 'react-native-auth0-manifest-placeholder',
    src,
    newSrc: `manifestPlaceholders = [auth0Domain: "${auth0Domain}", auth0Scheme: "${auth0Scheme}"]`,
    anchor: /defaultConfig {/,
    offset: 1,
    comment: '//'
  }).contents;
};
exports.addAuth0GradleValues = addAuth0GradleValues;
const withAndroidAuth0Gradle = (config, props) => {
  return (0, _configPlugins.withAppBuildGradle)(config, config => {
    return addAndroidAuth0Gradle(props, config);
  });
};
const addAndroidAuth0Gradle = (props, config) => {
  if (config.modResults.language === 'groovy') {
    if (!props?.domain) {
      throw Error('No auth0 domain specified in expo config');
    }
    const auth0Domain = props.domain;
    let applicationId;
    if (config.android?.package) {
      applicationId = config.android?.package + APPLICATION_ID_SUFFIX;
    }
    let auth0Scheme = props.customScheme ?? applicationId ?? (() => {
      throw new Error('No auth0 scheme specified or package found in expo config');
    })();
    config.modResults.contents = addAuth0GradleValues(config.modResults.contents, auth0Domain, auth0Scheme);
    return config;
  } else {
    throw new Error('Cannot add auth0 build.gradle modifications because the build.gradle is not groovy');
  }
};
exports.addAndroidAuth0Gradle = addAndroidAuth0Gradle;
const addAuth0AppDelegateCode = src => {
  let tempSrc = src;
  // Tests to see if the RCTLinkingManager has already been added
  if (!/\[RCTLinkingManager.*application:.*openURL:.*options:.*\]/.test(tempSrc)) {
    tempSrc = (0, _generateCode.mergeContents)({
      src: tempSrc,
      newSrc: ['- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url', '            options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options', '{', '  return [RCTLinkingManager application:app openURL:url options:options];', '}'].join('\n'),
      tag: 'react-native-auth0-linking',
      anchor: /@end/,
      comment: '//',
      offset: 0
    }).contents;
  }
  // Checks to see if RCTLinkingManager hasn't been imported
  if (!/RCTLinkingManager\.h/.test(tempSrc)) {
    tempSrc = (0, _generateCode.mergeContents)({
      src: tempSrc,
      newSrc: `#import <React/RCTLinkingManager.h>`,
      anchor: /#import <React\/RCTBridge\.h>/,
      offset: 1,
      tag: 'react-native-auth0-import',
      comment: '//'
    }).contents;
  }
  return tempSrc;
};
exports.addAuth0AppDelegateCode = addAuth0AppDelegateCode;
const withIOSAuth0AppDelegate = config => {
  return (0, _configPlugins.withAppDelegate)(config, config => {
    const src = config.modResults.contents;
    config.modResults.contents = addAuth0AppDelegateCode(src);
    return config;
  });
};
const withIOSAuth0InfoPList = (config, props) => {
  return (0, _configPlugins.withInfoPlist)(config, config => {
    return addIOSAuth0ConfigInInfoPList(props, config);
  });
};
const addIOSAuth0ConfigInInfoPList = (props, config) => {
  if (!config.modResults.CFBundleURLTypes) {
    config.modResults.CFBundleURLTypes = [];
  }
  let bundleIdentifier;
  if (config.ios?.bundleIdentifier) {
    bundleIdentifier = config.ios?.bundleIdentifier + APPLICATION_ID_SUFFIX;
  }
  let auth0Scheme = props.customScheme ?? bundleIdentifier ?? (() => {
    throw new Error('No auth0 scheme specified or bundle identifier found in expo config');
  })();
  if (auth0Scheme) {
    if (config.modResults.CFBundleURLTypes.some(_ref => {
      let {
        CFBundleURLSchemes
      } = _ref;
      return CFBundleURLSchemes.includes(auth0Scheme);
    })) {
      return config;
    }
    config.modResults.CFBundleURLTypes.push({
      CFBundleURLName: 'auth0',
      CFBundleURLSchemes: [auth0Scheme]
    });
  }
  return config;
};
exports.addIOSAuth0ConfigInInfoPList = addIOSAuth0ConfigInInfoPList;
const withAuth0 = (config, props) => {
  if (!props?.domain) {
    throw Error('No auth0 domain specified in expo config');
  }
  config = withAndroidAuth0Gradle(config, props);
  config = withIOSAuth0AppDelegate(config, props);
  config = withIOSAuth0InfoPList(config, props);
  return config;
};
var _default = (0, _configPlugins.createRunOncePlugin)(withAuth0, pkg.name, pkg.version);
exports.default = _default;
//# sourceMappingURL=withAuth0.js.map