"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _telemetry = require("./telemetry");
var _url = _interopRequireDefault(require("url"));
var _base = _interopRequireDefault(require("base-64"));
var _fetchWithTimeout = require("../utils/fetchWithTimeout");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/**
 * @ignore
 */
class Client {
  constructor(options) {
    const {
      baseUrl,
      telemetry = {},
      token,
      timeout = 10000
    } = options;
    if (!baseUrl) {
      throw new Error('Missing Auth0 domain');
    }
    const {
      name = _telemetry.defaults.name,
      version = _telemetry.defaults.version
    } = telemetry;
    this.telemetry = {
      name,
      version
    };
    if (name !== _telemetry.defaults.name) {
      this.telemetry.env = {};
      this.telemetry.env[_telemetry.defaults.name] = _telemetry.defaults.version;
    }
    const parsed = _url.default.parse(baseUrl);
    this.baseUrl = parsed.protocol === 'https:' || parsed.protocol === 'http:' ? baseUrl : `https://${baseUrl}`;
    this.domain = parsed.hostname || baseUrl;
    if (token) {
      this.bearer = `Bearer ${token}`;
    }
    this.timeout = timeout;
  }
  post(path, body) {
    return this.request('POST', this.url(path), body);
  }
  patch(path, body) {
    return this.request('PATCH', this.url(path), body);
  }
  get(path, query) {
    return this.request('GET', this.url(path, query));
  }
  url(path, query) {
    let includeTelemetry = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
    let endpoint = _url.default.resolve(this.baseUrl, path);
    if (query && query.length !== 0 || includeTelemetry) {
      const parsed = _url.default.parse(endpoint);
      parsed.query = query || {};
      if (includeTelemetry) {
        parsed.query.auth0Client = this._encodedTelemetry();
      }
      endpoint = _url.default.format(parsed);
    }
    return endpoint;
  }
  request(method, url, body) {
    const headers = new Headers();
    headers.set('Accept', 'application/json');
    headers.set('Content-Type', 'application/json');
    headers.set('Auth0-Client', this._encodedTelemetry());
    const options = {
      method,
      headers
    };
    if (this.bearer) {
      headers.set('Authorization', this.bearer);
    }
    if (body) {
      options.body = JSON.stringify(body);
    }
    return (0, _fetchWithTimeout.fetchWithTimeout)(url, options, this.timeout).then(response => {
      const payload = {
        status: response.status,
        ok: response.ok,
        headers: response.headers
      };
      return response.json().then(json => {
        return {
          ...payload,
          json
        };
      }).catch(() => {
        return response.text().then(text => {
          return {
            ...payload,
            text
          };
        }).catch(() => {
          return {
            ...payload,
            text: response.statusText
          };
        });
      });
    });
  }
  _encodedTelemetry() {
    return _base.default.encode(JSON.stringify(this.telemetry));
  }
}
var _default = Client;
exports.default = _default;
//# sourceMappingURL=index.js.map