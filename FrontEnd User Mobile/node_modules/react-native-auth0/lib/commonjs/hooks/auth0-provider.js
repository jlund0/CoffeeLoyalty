"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _jwtDecode = _interopRequireDefault(require("jwt-decode"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _auth0Context = _interopRequireDefault(require("./auth0-context"));
var _auth = _interopRequireDefault(require("../auth0"));
var _reducer = _interopRequireDefault(require("./reducer"));
var _localAuthenticationStrategy = _interopRequireDefault(require("../credentials-manager/localAuthenticationStrategy"));
var _userConversion = require("../utils/userConversion");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
const initialState = {
  user: null,
  error: null,
  isLoading: true
};

/**
 * @ignore
 */
const getIdTokenProfileClaims = idToken => {
  const payload = (0, _jwtDecode.default)(idToken);
  return (0, _userConversion.convertUser)(payload);
};

/**
 * @ignore
 */
const finalizeScopeParam = inputScopes => {
  const specifiedScopes = inputScopes?.split(' ').map(s => s.trim()) || [];
  const scopeSet = new Set([...specifiedScopes, ...['openid', 'profile', 'email']]);
  return Array.from(scopeSet).join(' ');
};

/**
 * Provides the Auth0Context to its child components.
 * @param {String} domain Your Auth0 domain
 * @param {String} clientId Your Auth0 client ID
 *
 * @example
 * ```ts
 * <Auth0Provider domain="YOUR AUTH0 DOMAIN" clientId="YOUR CLIENT ID">
 *   <App />
 * </Auth0Provider>
 * ```
 */
const Auth0Provider = _ref => {
  let {
    domain,
    clientId,
    children
  } = _ref;
  const [client] = (0, _react.useState)(() => new _auth.default({
    domain,
    clientId
  }));
  const [state, dispatch] = (0, _react.useReducer)(_reducer.default, initialState);
  (0, _react.useEffect)(() => {
    (async () => {
      let user = null;
      if (await client.credentialsManager.hasValidCredentials()) {
        try {
          const credentials = await client.credentialsManager.getCredentials();
          if (credentials) {
            user = getIdTokenProfileClaims(credentials.idToken);
          }
        } catch (error) {
          dispatch({
            type: 'ERROR',
            error
          });
        }
      }
      dispatch({
        type: 'INITIALIZED',
        user
      });
    })();
  }, [client]);
  const authorize = (0, _react.useCallback)(async function () {
    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    try {
      parameters.scope = finalizeScopeParam(parameters.scope);
      const credentials = await client.webAuth.authorize(parameters, options);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const clearSession = (0, _react.useCallback)(async function () {
    let parameters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    try {
      await client.webAuth.clearSession(parameters, options);
      await client.credentialsManager.clearCredentials();
      dispatch({
        type: 'LOGOUT_COMPLETE'
      });
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const getCredentials = (0, _react.useCallback)(async function (scope) {
    let minTtl = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    let parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    let forceRefresh = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
    try {
      const credentials = await client.credentialsManager.getCredentials(scope, minTtl, parameters, forceRefresh);
      if (credentials.idToken) {
        const user = getIdTokenProfileClaims(credentials.idToken);
        dispatch({
          type: 'SET_USER',
          user
        });
      }
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const sendSMSCode = (0, _react.useCallback)(async parameters => {
    try {
      await client.auth.passwordlessWithSMS(parameters);
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithSMS = (0, _react.useCallback)(async parameters => {
    try {
      let scope = finalizeScopeParam(parameters?.scope);
      if (scope) {
        parameters = {
          ...parameters,
          scope
        };
      }
      const credentials = await client.auth.loginWithSMS(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const sendEmailCode = (0, _react.useCallback)(async parameters => {
    try {
      await client.auth.passwordlessWithEmail(parameters);
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithEmail = (0, _react.useCallback)(async parameters => {
    try {
      let scope = finalizeScopeParam(parameters?.scope);
      if (scope) {
        parameters = {
          ...parameters,
          scope
        };
      }
      const credentials = await client.auth.loginWithEmail(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const sendMultifactorChallenge = (0, _react.useCallback)(async parameters => {
    try {
      await client.auth.multifactorChallenge(parameters);
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithOOB = (0, _react.useCallback)(async parameters => {
    try {
      const credentials = await client.auth.loginWithOOB(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithOTP = (0, _react.useCallback)(async parameters => {
    try {
      const credentials = await client.auth.loginWithOTP(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const authorizeWithRecoveryCode = (0, _react.useCallback)(async parameters => {
    try {
      const credentials = await client.auth.loginWithRecoveryCode(parameters);
      const user = getIdTokenProfileClaims(credentials.idToken);
      await client.credentialsManager.saveCredentials(credentials);
      dispatch({
        type: 'LOGIN_COMPLETE',
        user
      });
      return credentials;
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const hasValidCredentials = (0, _react.useCallback)(async function () {
    let minTtl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    return await client.credentialsManager.hasValidCredentials(minTtl);
  }, [client]);
  const clearCredentials = (0, _react.useCallback)(async () => {
    try {
      await client.credentialsManager.clearCredentials();
      dispatch({
        type: 'LOGOUT_COMPLETE'
      });
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client]);
  const requireLocalAuthentication = (0, _react.useCallback)(async function (title, description, cancelTitle, fallbackTitle) {
    let strategy = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _localAuthenticationStrategy.default.deviceOwnerWithBiometrics;
    try {
      await client.credentialsManager.requireLocalAuthentication(title, description, cancelTitle, fallbackTitle, strategy);
    } catch (error) {
      dispatch({
        type: 'ERROR',
        error
      });
      return;
    }
  }, [client.credentialsManager]);
  const contextValue = (0, _react.useMemo)(() => ({
    ...state,
    authorize,
    sendSMSCode,
    authorizeWithSMS,
    sendEmailCode,
    authorizeWithEmail,
    sendMultifactorChallenge,
    authorizeWithOOB,
    authorizeWithOTP,
    authorizeWithRecoveryCode,
    hasValidCredentials,
    clearSession,
    getCredentials,
    clearCredentials,
    requireLocalAuthentication
  }), [state, authorize, sendSMSCode, authorizeWithSMS, sendEmailCode, authorizeWithEmail, sendMultifactorChallenge, authorizeWithOOB, authorizeWithOTP, authorizeWithRecoveryCode, hasValidCredentials, clearSession, getCredentials, clearCredentials, requireLocalAuthentication]);
  return /*#__PURE__*/_react.default.createElement(_auth0Context.default.Provider, {
    value: contextValue
  }, children);
};
Auth0Provider.propTypes = {
  domain: _propTypes.default.string.isRequired,
  clientId: _propTypes.default.string.isRequired,
  children: _propTypes.default.element.isRequired
};
var _default = Auth0Provider;
exports.default = _default;
//# sourceMappingURL=auth0-provider.js.map