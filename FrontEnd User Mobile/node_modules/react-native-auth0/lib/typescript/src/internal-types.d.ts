import { JwtPayload } from 'jwt-decode';
import LocalAuthenticationStrategy from './credentials-manager/localAuthenticationStrategy';
import { Credentials } from './types';
export declare type CredentialsResponse = {
    id_token: string;
    access_token: string;
    token_type: string;
    expires_in: number;
    refresh_token?: string;
    scope?: string;
    [key: string]: any;
};
export declare type RawCredentials = {
    idToken: string;
    accessToken: string;
    tokenType: string;
    expiresIn: number;
    refreshToken?: string;
    scope?: string;
    [key: string]: any;
};
export declare type RawUser = {
    name?: string;
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    preferred_username?: string;
    profile?: string;
    picture?: string;
    website?: string;
    email?: string;
    email_verified?: boolean;
    gender?: string;
    birthdate?: string;
    zoneinfo?: string;
    locale?: string;
    phone_number?: string;
    phone_number_verified?: boolean;
    address?: string;
    updated_at?: string;
    sub?: string;
    [key: string]: any;
};
export declare type RawMultifactorChallengeOTPResponse = {
    challenge_type: string;
};
export declare type RawMultifactorChallengeOOBResponse = RawMultifactorChallengeOTPResponse & {
    oob_code: string;
};
export declare type RawMultifactorChallengeOOBWithBindingResponse = RawMultifactorChallengeOOBResponse & {
    binding_method: string;
};
export declare type RawMultifactorChallengeResponse = RawMultifactorChallengeOTPResponse | RawMultifactorChallengeOOBResponse | RawMultifactorChallengeOOBWithBindingResponse;
export declare type CustomJwtPayload = JwtPayload & RawUser;
/**
 * Type representing the Native Auth0 API's on iOS and Android
 */
export declare type Auth0Module = {
    bundleIdentifier: string;
    webAuth: (scheme: string, redirectUri: string, state?: string, nonce?: string, audience?: string, scope?: string, connection?: string, maxAge?: number, organization?: string, invitationUrl?: string, leeway?: number, ephemeralSession?: boolean, additionalParameters?: {
        [key: string]: string;
    }) => Promise<Credentials>;
    webAuthLogout: (scheme: string, federated: boolean, redirectUri: string) => Promise<void>;
    saveCredentials: (credentials: Credentials) => Promise<void>;
    getCredentials: (scope?: string, minTtl?: number, parameters?: Record<string, unknown>, forceRefresh?: boolean) => Promise<Credentials>;
    enableLocalAuthentication: ((title?: string, cancelTitle?: string, fallbackTitle?: string, strategy?: LocalAuthenticationStrategy) => Promise<void>) | ((title?: string, description?: string) => Promise<void>);
    hasValidCredentials: (minTtl?: number) => Promise<boolean>;
    clearCredentials: () => Promise<void>;
    hasValidAuth0Instance: () => Promise<boolean>;
    initializeAuth0: (clientId: string, domain: string) => Promise<void>;
};
export declare type AgentParameters = {
    clientId: string;
    domain: string;
};
export declare type AgentLogoutOptions = {
    customScheme?: string;
    federated?: boolean;
    useLegacyCallbackUrl?: boolean;
};
export interface AgentLoginOptions {
    state?: string;
    nonce?: string;
    audience?: string;
    scope?: string;
    connection?: string;
    maxAge?: number;
    organization?: string;
    invitationUrl?: string;
    customScheme?: string;
    leeway?: number;
    ephemeralSession?: boolean;
    additionalParameters?: {
        [key: string]: string;
    };
    useLegacyCallbackUrl?: boolean;
}
//# sourceMappingURL=internal-types.d.ts.map