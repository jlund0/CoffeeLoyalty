declare const _default: "\n// This AppDelegate template is used in Expo SDK 43 and newer\n// It is (nearly) identical to the pure template used when\n// creating a bare React Native app (without Expo)\n\n#import \"AppDelegate.h\"\n\n#import <React/RCTBridge.h>\n#import <React/RCTBundleURLProvider.h>\n#import <React/RCTRootView.h>\n#import <React/RCTLinkingManager.h>\n#import <React/RCTConvert.h>\n\n#if defined(FB_SONARKIT_ENABLED) && __has_include(<FlipperKit/FlipperClient.h>)\n#import <FlipperKit/FlipperClient.h>\n#import <FlipperKitLayoutPlugin/FlipperKitLayoutPlugin.h>\n#import <FlipperKitUserDefaultsPlugin/FKUserDefaultsPlugin.h>\n#import <FlipperKitNetworkPlugin/FlipperKitNetworkPlugin.h>\n#import <SKIOSNetworkPlugin/SKIOSNetworkAdapter.h>\n#import <FlipperKitReactPlugin/FlipperKitReactPlugin.h>\n\nstatic void InitializeFlipper(UIApplication *application) {\n  FlipperClient *client = [FlipperClient sharedClient];\n  SKDescriptorMapper *layoutDescriptorMapper = [[SKDescriptorMapper alloc] initWithDefaults];\n  [client addPlugin:[[FlipperKitLayoutPlugin alloc] initWithRootNode:application withDescriptorMapper:layoutDescriptorMapper]];\n  [client addPlugin:[[FKUserDefaultsPlugin alloc] initWithSuiteName:nil]];\n  [client addPlugin:[FlipperKitReactPlugin new]];\n  [client addPlugin:[[FlipperKitNetworkPlugin alloc] initWithNetworkAdapter:[SKIOSNetworkAdapter new]]];\n  [client start];\n}\n#endif\n\n@implementation AppDelegate\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n#if defined(FB_SONARKIT_ENABLED) && __has_include(<FlipperKit/FlipperClient.h>)\n  InitializeFlipper(application);\n#endif\n  \n  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@\"main\" initialProperties:nil];\n  id rootViewBackgroundColor = [[NSBundle mainBundle] objectForInfoDictionaryKey:@\"RCTRootViewBackgroundColor\"];\n  if (rootViewBackgroundColor != nil) {\n    rootView.backgroundColor = [RCTConvert UIColor:rootViewBackgroundColor];\n  } else {\n    rootView.backgroundColor = [UIColor whiteColor];\n  }\n\n  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];\n  UIViewController *rootViewController = [UIViewController new];\n  rootViewController.view = rootView;\n  self.window.rootViewController = rootViewController;\n  [self.window makeKeyAndVisible];\n\n  [super application:application didFinishLaunchingWithOptions:launchOptions];\n\n  return YES;\n }\n\n- (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge\n{\n  // If you'd like to export some custom RCTBridgeModules, add them here!\n  return @[];\n}\n\n- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {\n #ifdef DEBUG\n  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n #else\n  return [[NSBundle mainBundle] URLForResource:@\"main\" withExtension:@\"jsbundle\"];\n #endif\n}\n\n// Linking API\n- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n// Universal Links\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {\n  return [RCTLinkingManager application:application\n                   continueUserActivity:userActivity\n                     restorationHandler:restorationHandler];\n}\n\n@end\n";
export default _default;
//# sourceMappingURL=appdelegate-withlinking.d.ts.map