{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar Blob = function () {\n  function Blob() {\n    var parts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 ? arguments[1] : undefined;\n    _classCallCheck(this, Blob);\n    var BlobManager = require(\"./BlobManager\");\n    this.data = BlobManager.createFromParts(parts, options).data;\n  }\n  _createClass(Blob, [{\n    key: \"data\",\n    get: function get() {\n      if (!this._data) {\n        throw new Error('Blob has been closed and is no longer available');\n      }\n      return this._data;\n    },\n    set: function set(data) {\n      this._data = data;\n    }\n  }, {\n    key: \"slice\",\n    value: function slice(start, end) {\n      var BlobManager = require(\"./BlobManager\");\n      var _this$data = this.data,\n        offset = _this$data.offset,\n        size = _this$data.size;\n      if (typeof start === 'number') {\n        if (start > size) {\n          start = size;\n        }\n        offset += start;\n        size -= start;\n        if (typeof end === 'number') {\n          if (end < 0) {\n            end = this.size + end;\n          }\n          if (end > this.size) {\n            end = this.size;\n          }\n          size = end - start;\n        }\n      }\n      return BlobManager.createFromOptions({\n        blobId: this.data.blobId,\n        offset: offset,\n        size: size,\n        __collector: this.data.__collector\n      });\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      var BlobManager = require(\"./BlobManager\");\n      BlobManager.release(this.data.blobId);\n      this.data = null;\n    }\n  }, {\n    key: \"size\",\n    get: function get() {\n      return this.data.size;\n    }\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.data.type || '';\n    }\n  }]);\n  return Blob;\n}();\nmodule.exports = Blob;","map":{"version":3,"names":["_classCallCheck","require","_createClass","Blob","parts","arguments","length","undefined","options","BlobManager","data","createFromParts","key","get","_data","Error","set","value","slice","start","end","_this$data","offset","size","createFromOptions","blobId","__collector","close","release","type","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Blob/Blob.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nimport type {BlobData, BlobOptions} from './BlobTypes';\r\n\r\n/**\r\n * Opaque JS representation of some binary data in native.\r\n *\r\n * The API is modeled after the W3C Blob API, with one caveat\r\n * regarding explicit deallocation. Refer to the `close()`\r\n * method for further details.\r\n *\r\n * Example usage in a React component:\r\n *\r\n *   class WebSocketImage extends React.Component {\r\n *      state = {blob: null};\r\n *      componentDidMount() {\r\n *        let ws = this.ws = new WebSocket(...);\r\n *        ws.binaryType = 'blob';\r\n *        ws.onmessage = (event) => {\r\n *          if (this.state.blob) {\r\n *            this.state.blob.close();\r\n *          }\r\n *          this.setState({blob: event.data});\r\n *        };\r\n *      }\r\n *      componentUnmount() {\r\n *        if (this.state.blob) {\r\n *          this.state.blob.close();\r\n *        }\r\n *        this.ws.close();\r\n *      }\r\n *      render() {\r\n *        if (!this.state.blob) {\r\n *          return <View />;\r\n *        }\r\n *        return <Image source={{uri: URL.createObjectURL(this.state.blob)}} />;\r\n *      }\r\n *   }\r\n *\r\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob\r\n */\r\nclass Blob {\r\n  _data: ?BlobData;\r\n\r\n  /**\r\n   * Constructor for JS consumers.\r\n   * Currently we only support creating Blobs from other Blobs.\r\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob\r\n   */\r\n  constructor(parts: Array<Blob | string> = [], options?: BlobOptions) {\r\n    const BlobManager = require('./BlobManager');\r\n    this.data = BlobManager.createFromParts(parts, options).data;\r\n  }\r\n\r\n  /*\r\n   * This method is used to create a new Blob object containing\r\n   * the data in the specified range of bytes of the source Blob.\r\n   * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice\r\n   */\r\n  // $FlowFixMe[unsafe-getters-setters]\r\n  set data(data: ?BlobData) {\r\n    this._data = data;\r\n  }\r\n\r\n  // $FlowFixMe[unsafe-getters-setters]\r\n  get data(): BlobData {\r\n    if (!this._data) {\r\n      throw new Error('Blob has been closed and is no longer available');\r\n    }\r\n\r\n    return this._data;\r\n  }\r\n\r\n  slice(start?: number, end?: number): Blob {\r\n    const BlobManager = require('./BlobManager');\r\n    let {offset, size} = this.data;\r\n\r\n    if (typeof start === 'number') {\r\n      if (start > size) {\r\n        // $FlowFixMe[reassign-const]\r\n        start = size;\r\n      }\r\n      offset += start;\r\n      size -= start;\r\n\r\n      if (typeof end === 'number') {\r\n        if (end < 0) {\r\n          // $FlowFixMe[reassign-const]\r\n          end = this.size + end;\r\n        }\r\n        if (end > this.size) {\r\n          // $FlowFixMe[reassign-const]\r\n          end = this.size;\r\n        }\r\n        size = end - start;\r\n      }\r\n    }\r\n    return BlobManager.createFromOptions({\r\n      blobId: this.data.blobId,\r\n      offset,\r\n      size,\r\n      /* Since `blob.slice()` creates a new view onto the same binary\r\n       * data as the original blob, we should re-use the same collector\r\n       * object so that the underlying resource gets deallocated when\r\n       * the last view into the data is released, not the first.\r\n       */\r\n      __collector: this.data.__collector,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This method is in the standard, but not actually implemented by\r\n   * any browsers at this point. It's important for how Blobs work in\r\n   * React Native, however, since we cannot de-allocate resources automatically,\r\n   * so consumers need to explicitly de-allocate them.\r\n   *\r\n   * Note that the semantics around Blobs created via `blob.slice()`\r\n   * and `new Blob([blob])` are different. `blob.slice()` creates a\r\n   * new *view* onto the same binary data, so calling `close()` on any\r\n   * of those views is enough to deallocate the data, whereas\r\n   * `new Blob([blob, ...])` actually copies the data in memory.\r\n   */\r\n  close() {\r\n    const BlobManager = require('./BlobManager');\r\n    BlobManager.release(this.data.blobId);\r\n    this.data = null;\r\n  }\r\n\r\n  /**\r\n   * Size of the data contained in the Blob object, in bytes.\r\n   */\r\n  // $FlowFixMe[unsafe-getters-setters]\r\n  get size(): number {\r\n    return this.data.size;\r\n  }\r\n\r\n  /*\r\n   * String indicating the MIME type of the data contained in the Blob.\r\n   * If the type is unknown, this string is empty.\r\n   */\r\n  // $FlowFixMe[unsafe-getters-setters]\r\n  get type(): string {\r\n    return this.data.type || '';\r\n  }\r\n}\r\n\r\nmodule.exports = Blob;\r\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;AAAA,IAyCPE,IAAI;EAQR,SAAAA,KAAA,EAAqE;IAAA,IAAzDC,KAA2B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,EAAE;IAAA,IAAEG,OAAqB,GAAAH,SAAA,CAAAC,MAAA,OAAAD,SAAA,MAAAE,SAAA;IAAAP,eAAA,OAAAG,IAAA;IACjE,IAAMM,WAAW,GAAGR,OAAO,gBAAgB,CAAC;IAC5C,IAAI,CAACS,IAAI,GAAGD,WAAW,CAACE,eAAe,CAACP,KAAK,EAAEI,OAAO,CAAC,CAACE,IAAI;EAC9D;EAACR,YAAA,CAAAC,IAAA;IAAAS,GAAA;IAAAC,GAAA,EAaD,SAAAA,IAAA,EAAqB;MACnB,IAAI,CAAC,IAAI,CAACC,KAAK,EAAE;QACf,MAAM,IAAIC,KAAK,CAAC,iDAAiD,CAAC;MACpE;MAEA,OAAO,IAAI,CAACD,KAAK;IACnB,CAAC;IAAAE,GAAA,EAXD,SAAAA,IAASN,IAAe,EAAE;MACxB,IAAI,CAACI,KAAK,GAAGJ,IAAI;IACnB;EAAC;IAAAE,GAAA;IAAAK,KAAA,EAWD,SAAAC,MAAMC,KAAc,EAAEC,GAAY,EAAQ;MACxC,IAAMX,WAAW,GAAGR,OAAO,gBAAgB,CAAC;MAC5C,IAAAoB,UAAA,GAAqB,IAAI,CAACX,IAAI;QAAzBY,MAAM,GAAAD,UAAA,CAANC,MAAM;QAAEC,IAAI,GAAAF,UAAA,CAAJE,IAAI;MAEjB,IAAI,OAAOJ,KAAK,KAAK,QAAQ,EAAE;QAC7B,IAAIA,KAAK,GAAGI,IAAI,EAAE;UAEhBJ,KAAK,GAAGI,IAAI;QACd;QACAD,MAAM,IAAIH,KAAK;QACfI,IAAI,IAAIJ,KAAK;QAEb,IAAI,OAAOC,GAAG,KAAK,QAAQ,EAAE;UAC3B,IAAIA,GAAG,GAAG,CAAC,EAAE;YAEXA,GAAG,GAAG,IAAI,CAACG,IAAI,GAAGH,GAAG;UACvB;UACA,IAAIA,GAAG,GAAG,IAAI,CAACG,IAAI,EAAE;YAEnBH,GAAG,GAAG,IAAI,CAACG,IAAI;UACjB;UACAA,IAAI,GAAGH,GAAG,GAAGD,KAAK;QACpB;MACF;MACA,OAAOV,WAAW,CAACe,iBAAiB,CAAC;QACnCC,MAAM,EAAE,IAAI,CAACf,IAAI,CAACe,MAAM;QACxBH,MAAM,EAANA,MAAM;QACNC,IAAI,EAAJA,IAAI;QAMJG,WAAW,EAAE,IAAI,CAAChB,IAAI,CAACgB;MACzB,CAAC,CAAC;IACJ;EAAC;IAAAd,GAAA;IAAAK,KAAA,EAcD,SAAAU,MAAA,EAAQ;MACN,IAAMlB,WAAW,GAAGR,OAAO,gBAAgB,CAAC;MAC5CQ,WAAW,CAACmB,OAAO,CAAC,IAAI,CAAClB,IAAI,CAACe,MAAM,CAAC;MACrC,IAAI,CAACf,IAAI,GAAG,IAAI;IAClB;EAAC;IAAAE,GAAA;IAAAC,GAAA,EAMD,SAAAA,IAAA,EAAmB;MACjB,OAAO,IAAI,CAACH,IAAI,CAACa,IAAI;IACvB;EAAC;IAAAX,GAAA;IAAAC,GAAA,EAOD,SAAAA,IAAA,EAAmB;MACjB,OAAO,IAAI,CAACH,IAAI,CAACmB,IAAI,IAAI,EAAE;IAC7B;EAAC;EAAA,OAAA1B,IAAA;AAAA;AAGH2B,MAAM,CAACC,OAAO,GAAG5B,IAAI"},"metadata":{},"sourceType":"script","externalDependencies":[]}