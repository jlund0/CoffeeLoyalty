{"ast":null,"code":"'use strict';\n\nexport function getFabricUIManager() {\n  return global.nativeFabricUIManager;\n}","map":{"version":3,"names":["getFabricUIManager","global","nativeFabricUIManager"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/ReactNative/FabricUIManager.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n * @format\r\n */\r\n\r\n'use strict';\r\n\r\nimport type {\r\n  LayoutAnimationConfig,\r\n  MeasureInWindowOnSuccessCallback,\r\n  MeasureLayoutOnSuccessCallback,\r\n  MeasureOnSuccessCallback,\r\n} from '../Renderer/shims/ReactNativeTypes';\r\nimport type {RootTag} from '../Types/RootTagTypes';\r\n\r\n// TODO: type these properly.\r\nexport opaque type Node = {...};\r\ntype NodeSet = Array<Node>;\r\ntype NodeProps = {...};\r\ntype InstanceHandle = {...};\r\nexport type Spec = {|\r\n  +createNode: (\r\n    reactTag: number,\r\n    viewName: string,\r\n    rootTag: RootTag,\r\n    props: NodeProps,\r\n    instanceHandle: InstanceHandle,\r\n  ) => Node,\r\n  +cloneNode: (node: Node) => Node,\r\n  +cloneNodeWithNewChildren: (node: Node) => Node,\r\n  +cloneNodeWithNewProps: (node: Node, newProps: NodeProps) => Node,\r\n  +cloneNodeWithNewChildrenAndProps: (node: Node, newProps: NodeProps) => Node,\r\n  +createChildSet: (rootTag: RootTag) => NodeSet,\r\n  +appendChild: (parentNode: Node, child: Node) => Node,\r\n  +appendChildToSet: (childSet: NodeSet, child: Node) => void,\r\n  +completeRoot: (rootTag: RootTag, childSet: NodeSet) => void,\r\n  +measure: (node: Node, callback: MeasureOnSuccessCallback) => void,\r\n  +measureInWindow: (\r\n    node: Node,\r\n    callback: MeasureInWindowOnSuccessCallback,\r\n  ) => void,\r\n  +measureLayout: (\r\n    node: Node,\r\n    relativeNode: Node,\r\n    onFail: () => void,\r\n    onSuccess: MeasureLayoutOnSuccessCallback,\r\n  ) => void,\r\n  +configureNextLayoutAnimation: (\r\n    config: LayoutAnimationConfig,\r\n    callback: () => void, // check what is returned here\r\n    errorCallback: () => void,\r\n  ) => void,\r\n  +sendAccessibilityEvent: (node: Node, eventType: string) => void,\r\n  +findShadowNodeByTag_DEPRECATED: (reactTag: number) => ?Node,\r\n  +getBoundingClientRect: (\r\n    node: Node,\r\n  ) => [\r\n    /* x:*/ number,\r\n    /* y:*/ number,\r\n    /* width:*/ number,\r\n    /* height:*/ number,\r\n  ],\r\n  +setNativeProps: (node: Node, newProps: NodeProps) => void,\r\n  +dispatchCommand: (\r\n    node: Node,\r\n    commandName: string,\r\n    args: Array<mixed>,\r\n  ) => void,\r\n|};\r\n\r\n// This is exposed as a getter because apps using the legacy renderer AND\r\n// Fabric can define the binding lazily. If we evaluated the global and cached\r\n// it in the module we might be caching an `undefined` value before it is set.\r\nexport function getFabricUIManager(): ?Spec {\r\n  return global.nativeFabricUIManager;\r\n}\r\n"],"mappings":"AAUA,YAAY;;AAoEZ,OAAO,SAASA,kBAAkBA,CAAA,EAAU;EAC1C,OAAOC,MAAM,CAACC,qBAAqB;AACrC"},"metadata":{},"sourceType":"module","externalDependencies":[]}