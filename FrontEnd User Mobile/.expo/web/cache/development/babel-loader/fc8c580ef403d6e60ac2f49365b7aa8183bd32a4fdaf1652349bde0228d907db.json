{"ast":null,"code":"'use strict';\n\nvar resolvedPromise;\nexport default function queueMicrotask(callback) {\n  if (arguments.length < 1) {\n    throw new TypeError('queueMicrotask must be called with at least one argument (a function to call)');\n  }\n  if (typeof callback !== 'function') {\n    throw new TypeError('The argument to queueMicrotask must be a function.');\n  }\n  (resolvedPromise || (resolvedPromise = Promise.resolve())).then(callback).catch(function (error) {\n    return setTimeout(function () {\n      throw error;\n    }, 0);\n  });\n}","map":{"version":3,"names":["resolvedPromise","queueMicrotask","callback","arguments","length","TypeError","Promise","resolve","then","catch","error","setTimeout"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Core/Timers/queueMicrotask.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n */\r\n\r\n'use strict';\r\n\r\nlet resolvedPromise;\r\n\r\n/**\r\n * Polyfill for the microtask queueing API defined by WHATWG HTML spec.\r\n * https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-queuemicrotask\r\n *\r\n * The method must queue a microtask to invoke @param {function} callback, and\r\n * if the callback throws an exception, report the exception.\r\n */\r\nexport default function queueMicrotask(callback: Function) {\r\n  if (arguments.length < 1) {\r\n    throw new TypeError(\r\n      'queueMicrotask must be called with at least one argument (a function to call)',\r\n    );\r\n  }\r\n  if (typeof callback !== 'function') {\r\n    throw new TypeError('The argument to queueMicrotask must be a function.');\r\n  }\r\n\r\n  // Try to reuse a lazily allocated resolved promise from closure.\r\n  (resolvedPromise || (resolvedPromise = Promise.resolve()))\r\n    .then(callback)\r\n    .catch(error =>\r\n      // Report the exception until the next tick.\r\n      setTimeout(() => {\r\n        throw error;\r\n      }, 0),\r\n    );\r\n}\r\n"],"mappings":"AAUA,YAAY;;AAEZ,IAAIA,eAAe;AASnB,eAAe,SAASC,cAAcA,CAACC,QAAkB,EAAE;EACzD,IAAIC,SAAS,CAACC,MAAM,GAAG,CAAC,EAAE;IACxB,MAAM,IAAIC,SAAS,CACjB,+EACF,CAAC;EACH;EACA,IAAI,OAAOH,QAAQ,KAAK,UAAU,EAAE;IAClC,MAAM,IAAIG,SAAS,CAAC,oDAAoD,CAAC;EAC3E;EAGA,CAACL,eAAe,KAAKA,eAAe,GAAGM,OAAO,CAACC,OAAO,CAAC,CAAC,CAAC,EACtDC,IAAI,CAACN,QAAQ,CAAC,CACdO,KAAK,CAAC,UAAAC,KAAK;IAAA,OAEVC,UAAU,CAAC,YAAM;MACf,MAAMD,KAAK;IACb,CAAC,EAAE,CAAC,CAAC;EAAA,CACP,CAAC;AACL"},"metadata":{},"sourceType":"module","externalDependencies":[]}