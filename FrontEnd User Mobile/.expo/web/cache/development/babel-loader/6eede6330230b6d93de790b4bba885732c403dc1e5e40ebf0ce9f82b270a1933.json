{"ast":null,"code":"import React, { useMemo } from 'react';\nimport Svg, { Defs, G, Path, Rect, Image, ClipPath, LinearGradient, Stop } from 'react-native-svg';\nimport genMatrix from \"./genMatrix\";\nimport transformMatrixIntoPath from \"./transformMatrixIntoPath\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar renderLogo = function renderLogo(_ref) {\n  var size = _ref.size,\n    logo = _ref.logo,\n    logoSize = _ref.logoSize,\n    logoBackgroundColor = _ref.logoBackgroundColor,\n    logoMargin = _ref.logoMargin,\n    logoBorderRadius = _ref.logoBorderRadius;\n  var logoPosition = (size - logoSize - logoMargin * 2) / 2;\n  var logoBackgroundSize = logoSize + logoMargin * 2;\n  var logoBackgroundBorderRadius = logoBorderRadius + logoMargin / logoSize * logoBorderRadius;\n  return _jsxs(G, {\n    x: logoPosition,\n    y: logoPosition,\n    children: [_jsxs(Defs, {\n      children: [_jsx(ClipPath, {\n        id: \"clip-logo-background\",\n        children: _jsx(Rect, {\n          width: logoBackgroundSize,\n          height: logoBackgroundSize,\n          rx: logoBackgroundBorderRadius,\n          ry: logoBackgroundBorderRadius\n        })\n      }), _jsx(ClipPath, {\n        id: \"clip-logo\",\n        children: _jsx(Rect, {\n          width: logoSize,\n          height: logoSize,\n          rx: logoBorderRadius,\n          ry: logoBorderRadius\n        })\n      })]\n    }), _jsx(G, {\n      children: _jsx(Rect, {\n        width: logoBackgroundSize,\n        height: logoBackgroundSize,\n        fill: logoBackgroundColor,\n        clipPath: \"url(#clip-logo-background)\"\n      })\n    }), _jsx(G, {\n      x: logoMargin,\n      y: logoMargin,\n      children: _jsx(Image, {\n        width: logoSize,\n        height: logoSize,\n        preserveAspectRatio: \"xMidYMid slice\",\n        href: logo,\n        clipPath: \"url(#clip-logo)\"\n      })\n    })]\n  });\n};\nvar QRCode = function QRCode(_ref2) {\n  var _ref2$value = _ref2.value,\n    value = _ref2$value === void 0 ? 'this is a QR code' : _ref2$value,\n    _ref2$size = _ref2.size,\n    size = _ref2$size === void 0 ? 100 : _ref2$size,\n    _ref2$color = _ref2.color,\n    color = _ref2$color === void 0 ? 'black' : _ref2$color,\n    _ref2$backgroundColor = _ref2.backgroundColor,\n    backgroundColor = _ref2$backgroundColor === void 0 ? 'white' : _ref2$backgroundColor,\n    logo = _ref2.logo,\n    _ref2$logoSize = _ref2.logoSize,\n    logoSize = _ref2$logoSize === void 0 ? size * 0.2 : _ref2$logoSize,\n    _ref2$logoBackgroundC = _ref2.logoBackgroundColor,\n    logoBackgroundColor = _ref2$logoBackgroundC === void 0 ? 'transparent' : _ref2$logoBackgroundC,\n    _ref2$logoMargin = _ref2.logoMargin,\n    logoMargin = _ref2$logoMargin === void 0 ? 2 : _ref2$logoMargin,\n    _ref2$logoBorderRadiu = _ref2.logoBorderRadius,\n    logoBorderRadius = _ref2$logoBorderRadiu === void 0 ? 0 : _ref2$logoBorderRadiu,\n    _ref2$quietZone = _ref2.quietZone,\n    quietZone = _ref2$quietZone === void 0 ? 0 : _ref2$quietZone,\n    _ref2$enableLinearGra = _ref2.enableLinearGradient,\n    enableLinearGradient = _ref2$enableLinearGra === void 0 ? false : _ref2$enableLinearGra,\n    _ref2$gradientDirecti = _ref2.gradientDirection,\n    gradientDirection = _ref2$gradientDirecti === void 0 ? ['0%', '0%', '100%', '100%'] : _ref2$gradientDirecti,\n    _ref2$linearGradient = _ref2.linearGradient,\n    linearGradient = _ref2$linearGradient === void 0 ? ['rgb(255,0,0)', 'rgb(0,255,255)'] : _ref2$linearGradient,\n    _ref2$ecl = _ref2.ecl,\n    ecl = _ref2$ecl === void 0 ? 'M' : _ref2$ecl,\n    getRef = _ref2.getRef,\n    onError = _ref2.onError;\n  var result = useMemo(function () {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size);\n    } catch (error) {\n      if (onError && typeof onError === 'function') {\n        onError(error);\n      } else {\n        throw error;\n      }\n    }\n  }, [value, size, ecl]);\n  if (!result) {\n    return null;\n  }\n  var path = result.path,\n    cellSize = result.cellSize;\n  return _jsxs(Svg, {\n    ref: getRef,\n    viewBox: [-quietZone, -quietZone, size + quietZone * 2, size + quietZone * 2].join(' '),\n    width: size,\n    height: size,\n    children: [_jsx(Defs, {\n      children: _jsxs(LinearGradient, {\n        id: \"grad\",\n        x1: gradientDirection[0],\n        y1: gradientDirection[1],\n        x2: gradientDirection[2],\n        y2: gradientDirection[3],\n        children: [_jsx(Stop, {\n          offset: \"0\",\n          stopColor: linearGradient[0],\n          stopOpacity: \"1\"\n        }), _jsx(Stop, {\n          offset: \"1\",\n          stopColor: linearGradient[1],\n          stopOpacity: \"1\"\n        })]\n      })\n    }), _jsx(G, {\n      children: _jsx(Rect, {\n        x: -quietZone,\n        y: -quietZone,\n        width: size + quietZone * 2,\n        height: size + quietZone * 2,\n        fill: backgroundColor\n      })\n    }), _jsx(G, {\n      children: _jsx(Path, {\n        d: path,\n        strokeLinecap: \"butt\",\n        stroke: enableLinearGradient ? 'url(#grad)' : color,\n        strokeWidth: cellSize\n      })\n    }), logo && renderLogo({\n      size: size,\n      logo: logo,\n      logoSize: logoSize,\n      logoBackgroundColor: logoBackgroundColor,\n      logoMargin: logoMargin,\n      logoBorderRadius: logoBorderRadius\n    })]\n  });\n};\nexport default QRCode;","map":{"version":3,"names":["React","useMemo","Svg","Defs","G","Path","Rect","Image","ClipPath","LinearGradient","Stop","genMatrix","transformMatrixIntoPath","jsx","_jsx","jsxs","_jsxs","renderLogo","_ref","size","logo","logoSize","logoBackgroundColor","logoMargin","logoBorderRadius","logoPosition","logoBackgroundSize","logoBackgroundBorderRadius","x","y","children","id","width","height","rx","ry","fill","clipPath","preserveAspectRatio","href","QRCode","_ref2","_ref2$value","value","_ref2$size","_ref2$color","color","_ref2$backgroundColor","backgroundColor","_ref2$logoSize","_ref2$logoBackgroundC","_ref2$logoMargin","_ref2$logoBorderRadiu","_ref2$quietZone","quietZone","_ref2$enableLinearGra","enableLinearGradient","_ref2$gradientDirecti","gradientDirection","_ref2$linearGradient","linearGradient","_ref2$ecl","ecl","getRef","onError","result","error","path","cellSize","ref","viewBox","join","x1","y1","x2","y2","offset","stopColor","stopOpacity","d","strokeLinecap","stroke","strokeWidth"],"sources":["C:/Users/julia/OneDrive/CoffeeLoyality/FrontEnd User Mobile/node_modules/react-native-qrcode-svg/src/index.js"],"sourcesContent":["import React, { useMemo } from 'react'\nimport Svg, {\n  Defs,\n  G,\n  Path,\n  Rect,\n  Image,\n  ClipPath,\n  LinearGradient,\n  Stop\n} from 'react-native-svg'\nimport genMatrix from './genMatrix'\nimport transformMatrixIntoPath from './transformMatrixIntoPath'\n\nconst renderLogo = ({\n  size,\n  logo,\n  logoSize,\n  logoBackgroundColor,\n  logoMargin,\n  logoBorderRadius\n}) => {\n  const logoPosition = (size - logoSize - logoMargin * 2) / 2\n  const logoBackgroundSize = logoSize + logoMargin * 2\n  const logoBackgroundBorderRadius =\n    logoBorderRadius + (logoMargin / logoSize) * logoBorderRadius\n\n  return (\n    <G x={logoPosition} y={logoPosition}>\n      <Defs>\n        <ClipPath id='clip-logo-background'>\n          <Rect\n            width={logoBackgroundSize}\n            height={logoBackgroundSize}\n            rx={logoBackgroundBorderRadius}\n            ry={logoBackgroundBorderRadius}\n          />\n        </ClipPath>\n        <ClipPath id='clip-logo'>\n          <Rect\n            width={logoSize}\n            height={logoSize}\n            rx={logoBorderRadius}\n            ry={logoBorderRadius}\n          />\n        </ClipPath>\n      </Defs>\n      <G>\n        <Rect\n          width={logoBackgroundSize}\n          height={logoBackgroundSize}\n          fill={logoBackgroundColor}\n          clipPath='url(#clip-logo-background)'\n        />\n      </G>\n      <G x={logoMargin} y={logoMargin}>\n        <Image\n          width={logoSize}\n          height={logoSize}\n          preserveAspectRatio='xMidYMid slice'\n          href={logo}\n          clipPath='url(#clip-logo)'\n        />\n      </G>\n    </G>\n  )\n}\n\nconst QRCode = ({\n  value = 'this is a QR code',\n  size = 100,\n  color = 'black',\n  backgroundColor = 'white',\n  logo,\n  logoSize = size * 0.2,\n  logoBackgroundColor = 'transparent',\n  logoMargin = 2,\n  logoBorderRadius = 0,\n  quietZone = 0,\n  enableLinearGradient = false,\n  gradientDirection = ['0%', '0%', '100%', '100%'],\n  linearGradient = ['rgb(255,0,0)', 'rgb(0,255,255)'],\n  ecl = 'M',\n  getRef,\n  onError\n}) => {\n  const result = useMemo(() => {\n    try {\n      return transformMatrixIntoPath(genMatrix(value, ecl), size)\n    } catch (error) {\n      if (onError && typeof onError === 'function') {\n        onError(error)\n      } else {\n        // Pass the error when no handler presented\n        throw error\n      }\n    }\n  }, [value, size, ecl])\n\n  if (!result) {\n    return null\n  }\n\n  const { path, cellSize } = result\n\n  return (\n    <Svg\n      ref={getRef}\n      viewBox={[\n        -quietZone,\n        -quietZone,\n        size + quietZone * 2,\n        size + quietZone * 2\n      ].join(' ')}\n      width={size}\n      height={size}\n    >\n      <Defs>\n        <LinearGradient\n          id='grad'\n          x1={gradientDirection[0]}\n          y1={gradientDirection[1]}\n          x2={gradientDirection[2]}\n          y2={gradientDirection[3]}\n        >\n          <Stop offset='0' stopColor={linearGradient[0]} stopOpacity='1' />\n          <Stop offset='1' stopColor={linearGradient[1]} stopOpacity='1' />\n        </LinearGradient>\n      </Defs>\n      <G>\n        <Rect\n          x={-quietZone}\n          y={-quietZone}\n          width={size + quietZone * 2}\n          height={size + quietZone * 2}\n          fill={backgroundColor}\n        />\n      </G>\n      <G>\n        <Path\n          d={path}\n          strokeLinecap='butt'\n          stroke={enableLinearGradient ? 'url(#grad)' : color}\n          strokeWidth={cellSize}\n        />\n      </G>\n      {logo &&\n        renderLogo({\n          size,\n          logo,\n          logoSize,\n          logoBackgroundColor,\n          logoMargin,\n          logoBorderRadius\n        })}\n    </Svg>\n  )\n}\n\nexport default QRCode\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,OAAO,QAAQ,OAAO;AACtC,OAAOC,GAAG,IACRC,IAAI,EACJC,CAAC,EACDC,IAAI,EACJC,IAAI,EACJC,KAAK,EACLC,QAAQ,EACRC,cAAc,EACdC,IAAI,QACC,kBAAkB;AACzB,OAAOC,SAAS;AAChB,OAAOC,uBAAuB;AAAiC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAE/D,IAAMC,UAAU,GAAG,SAAbA,UAAUA,CAAAC,IAAA,EAOV;EAAA,IANJC,IAAI,GAAAD,IAAA,CAAJC,IAAI;IACJC,IAAI,GAAAF,IAAA,CAAJE,IAAI;IACJC,QAAQ,GAAAH,IAAA,CAARG,QAAQ;IACRC,mBAAmB,GAAAJ,IAAA,CAAnBI,mBAAmB;IACnBC,UAAU,GAAAL,IAAA,CAAVK,UAAU;IACVC,gBAAgB,GAAAN,IAAA,CAAhBM,gBAAgB;EAEhB,IAAMC,YAAY,GAAG,CAACN,IAAI,GAAGE,QAAQ,GAAGE,UAAU,GAAG,CAAC,IAAI,CAAC;EAC3D,IAAMG,kBAAkB,GAAGL,QAAQ,GAAGE,UAAU,GAAG,CAAC;EACpD,IAAMI,0BAA0B,GAC9BH,gBAAgB,GAAID,UAAU,GAAGF,QAAQ,GAAIG,gBAAgB;EAE/D,OACER,KAAA,CAACZ,CAAC;IAACwB,CAAC,EAAEH,YAAa;IAACI,CAAC,EAAEJ,YAAa;IAAAK,QAAA,GAClCd,KAAA,CAACb,IAAI;MAAA2B,QAAA,GACHhB,IAAA,CAACN,QAAQ;QAACuB,EAAE,EAAC,sBAAsB;QAAAD,QAAA,EACjChB,IAAA,CAACR,IAAI;UACH0B,KAAK,EAAEN,kBAAmB;UAC1BO,MAAM,EAAEP,kBAAmB;UAC3BQ,EAAE,EAAEP,0BAA2B;UAC/BQ,EAAE,EAAER;QAA2B,CAChC;MAAC,CACM,CAAC,EACXb,IAAA,CAACN,QAAQ;QAACuB,EAAE,EAAC,WAAW;QAAAD,QAAA,EACtBhB,IAAA,CAACR,IAAI;UACH0B,KAAK,EAAEX,QAAS;UAChBY,MAAM,EAAEZ,QAAS;UACjBa,EAAE,EAAEV,gBAAiB;UACrBW,EAAE,EAAEX;QAAiB,CACtB;MAAC,CACM,CAAC;IAAA,CACP,CAAC,EACPV,IAAA,CAACV,CAAC;MAAA0B,QAAA,EACAhB,IAAA,CAACR,IAAI;QACH0B,KAAK,EAAEN,kBAAmB;QAC1BO,MAAM,EAAEP,kBAAmB;QAC3BU,IAAI,EAAEd,mBAAoB;QAC1Be,QAAQ,EAAC;MAA4B,CACtC;IAAC,CACD,CAAC,EACJvB,IAAA,CAACV,CAAC;MAACwB,CAAC,EAAEL,UAAW;MAACM,CAAC,EAAEN,UAAW;MAAAO,QAAA,EAC9BhB,IAAA,CAACP,KAAK;QACJyB,KAAK,EAAEX,QAAS;QAChBY,MAAM,EAAEZ,QAAS;QACjBiB,mBAAmB,EAAC,gBAAgB;QACpCC,IAAI,EAAEnB,IAAK;QACXiB,QAAQ,EAAC;MAAiB,CAC3B;IAAC,CACD,CAAC;EAAA,CACH,CAAC;AAER,CAAC;AAED,IAAMG,MAAM,GAAG,SAATA,MAAMA,CAAAC,KAAA,EAiBN;EAAA,IAAAC,WAAA,GAAAD,KAAA,CAhBJE,KAAK;IAALA,KAAK,GAAAD,WAAA,cAAG,mBAAmB,GAAAA,WAAA;IAAAE,UAAA,GAAAH,KAAA,CAC3BtB,IAAI;IAAJA,IAAI,GAAAyB,UAAA,cAAG,GAAG,GAAAA,UAAA;IAAAC,WAAA,GAAAJ,KAAA,CACVK,KAAK;IAALA,KAAK,GAAAD,WAAA,cAAG,OAAO,GAAAA,WAAA;IAAAE,qBAAA,GAAAN,KAAA,CACfO,eAAe;IAAfA,eAAe,GAAAD,qBAAA,cAAG,OAAO,GAAAA,qBAAA;IACzB3B,IAAI,GAAAqB,KAAA,CAAJrB,IAAI;IAAA6B,cAAA,GAAAR,KAAA,CACJpB,QAAQ;IAARA,QAAQ,GAAA4B,cAAA,cAAG9B,IAAI,GAAG,GAAG,GAAA8B,cAAA;IAAAC,qBAAA,GAAAT,KAAA,CACrBnB,mBAAmB;IAAnBA,mBAAmB,GAAA4B,qBAAA,cAAG,aAAa,GAAAA,qBAAA;IAAAC,gBAAA,GAAAV,KAAA,CACnClB,UAAU;IAAVA,UAAU,GAAA4B,gBAAA,cAAG,CAAC,GAAAA,gBAAA;IAAAC,qBAAA,GAAAX,KAAA,CACdjB,gBAAgB;IAAhBA,gBAAgB,GAAA4B,qBAAA,cAAG,CAAC,GAAAA,qBAAA;IAAAC,eAAA,GAAAZ,KAAA,CACpBa,SAAS;IAATA,SAAS,GAAAD,eAAA,cAAG,CAAC,GAAAA,eAAA;IAAAE,qBAAA,GAAAd,KAAA,CACbe,oBAAoB;IAApBA,oBAAoB,GAAAD,qBAAA,cAAG,KAAK,GAAAA,qBAAA;IAAAE,qBAAA,GAAAhB,KAAA,CAC5BiB,iBAAiB;IAAjBA,iBAAiB,GAAAD,qBAAA,cAAG,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,CAAC,GAAAA,qBAAA;IAAAE,oBAAA,GAAAlB,KAAA,CAChDmB,cAAc;IAAdA,cAAc,GAAAD,oBAAA,cAAG,CAAC,cAAc,EAAE,gBAAgB,CAAC,GAAAA,oBAAA;IAAAE,SAAA,GAAApB,KAAA,CACnDqB,GAAG;IAAHA,GAAG,GAAAD,SAAA,cAAG,GAAG,GAAAA,SAAA;IACTE,MAAM,GAAAtB,KAAA,CAANsB,MAAM;IACNC,OAAO,GAAAvB,KAAA,CAAPuB,OAAO;EAEP,IAAMC,MAAM,GAAGhE,OAAO,CAAC,YAAM;IAC3B,IAAI;MACF,OAAOW,uBAAuB,CAACD,SAAS,CAACgC,KAAK,EAAEmB,GAAG,CAAC,EAAE3C,IAAI,CAAC;IAC7D,CAAC,CAAC,OAAO+C,KAAK,EAAE;MACd,IAAIF,OAAO,IAAI,OAAOA,OAAO,KAAK,UAAU,EAAE;QAC5CA,OAAO,CAACE,KAAK,CAAC;MAChB,CAAC,MAAM;QAEL,MAAMA,KAAK;MACb;IACF;EACF,CAAC,EAAE,CAACvB,KAAK,EAAExB,IAAI,EAAE2C,GAAG,CAAC,CAAC;EAEtB,IAAI,CAACG,MAAM,EAAE;IACX,OAAO,IAAI;EACb;EAEA,IAAQE,IAAI,GAAeF,MAAM,CAAzBE,IAAI;IAAEC,QAAQ,GAAKH,MAAM,CAAnBG,QAAQ;EAEtB,OACEpD,KAAA,CAACd,GAAG;IACFmE,GAAG,EAAEN,MAAO;IACZO,OAAO,EAAE,CACP,CAAChB,SAAS,EACV,CAACA,SAAS,EACVnC,IAAI,GAAGmC,SAAS,GAAG,CAAC,EACpBnC,IAAI,GAAGmC,SAAS,GAAG,CAAC,CACrB,CAACiB,IAAI,CAAC,GAAG,CAAE;IACZvC,KAAK,EAAEb,IAAK;IACZc,MAAM,EAAEd,IAAK;IAAAW,QAAA,GAEbhB,IAAA,CAACX,IAAI;MAAA2B,QAAA,EACHd,KAAA,CAACP,cAAc;QACbsB,EAAE,EAAC,MAAM;QACTyC,EAAE,EAAEd,iBAAiB,CAAC,CAAC,CAAE;QACzBe,EAAE,EAAEf,iBAAiB,CAAC,CAAC,CAAE;QACzBgB,EAAE,EAAEhB,iBAAiB,CAAC,CAAC,CAAE;QACzBiB,EAAE,EAAEjB,iBAAiB,CAAC,CAAC,CAAE;QAAA5B,QAAA,GAEzBhB,IAAA,CAACJ,IAAI;UAACkE,MAAM,EAAC,GAAG;UAACC,SAAS,EAAEjB,cAAc,CAAC,CAAC,CAAE;UAACkB,WAAW,EAAC;QAAG,CAAE,CAAC,EACjEhE,IAAA,CAACJ,IAAI;UAACkE,MAAM,EAAC,GAAG;UAACC,SAAS,EAAEjB,cAAc,CAAC,CAAC,CAAE;UAACkB,WAAW,EAAC;QAAG,CAAE,CAAC;MAAA,CACnD;IAAC,CACb,CAAC,EACPhE,IAAA,CAACV,CAAC;MAAA0B,QAAA,EACAhB,IAAA,CAACR,IAAI;QACHsB,CAAC,EAAE,CAAC0B,SAAU;QACdzB,CAAC,EAAE,CAACyB,SAAU;QACdtB,KAAK,EAAEb,IAAI,GAAGmC,SAAS,GAAG,CAAE;QAC5BrB,MAAM,EAAEd,IAAI,GAAGmC,SAAS,GAAG,CAAE;QAC7BlB,IAAI,EAAEY;MAAgB,CACvB;IAAC,CACD,CAAC,EACJlC,IAAA,CAACV,CAAC;MAAA0B,QAAA,EACAhB,IAAA,CAACT,IAAI;QACH0E,CAAC,EAAEZ,IAAK;QACRa,aAAa,EAAC,MAAM;QACpBC,MAAM,EAAEzB,oBAAoB,GAAG,YAAY,GAAGV,KAAM;QACpDoC,WAAW,EAAEd;MAAS,CACvB;IAAC,CACD,CAAC,EACHhD,IAAI,IACHH,UAAU,CAAC;MACTE,IAAI,EAAJA,IAAI;MACJC,IAAI,EAAJA,IAAI;MACJC,QAAQ,EAARA,QAAQ;MACRC,mBAAmB,EAAnBA,mBAAmB;MACnBC,UAAU,EAAVA,UAAU;MACVC,gBAAgB,EAAhBA;IACF,CAAC,CAAC;EAAA,CACD,CAAC;AAEV,CAAC;AAED,eAAegB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}