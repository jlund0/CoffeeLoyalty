{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport NativeBlobModule from \"./NativeBlobModule\";\nimport invariant from 'invariant';\nvar Blob = require(\"./Blob\");\nvar BlobRegistry = require(\"./BlobRegistry\");\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16 | 0,\n      v = c == 'x' ? r : r & 0x3 | 0x8;\n    return v.toString(16);\n  });\n}\nfunction createBlobCollector(blobId) {\n  if (global.__blobCollectorProvider == null) {\n    return null;\n  } else {\n    return global.__blobCollectorProvider(blobId);\n  }\n}\nvar BlobManager = function () {\n  function BlobManager() {\n    _classCallCheck(this, BlobManager);\n  }\n  _createClass(BlobManager, null, [{\n    key: \"createFromParts\",\n    value: function createFromParts(parts, options) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      var blobId = uuidv4();\n      var items = parts.map(function (part) {\n        if (part instanceof ArrayBuffer || global.ArrayBufferView && part instanceof global.ArrayBufferView) {\n          throw new Error(\"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\");\n        }\n        if (part instanceof Blob) {\n          return {\n            data: part.data,\n            type: 'blob'\n          };\n        } else {\n          return {\n            data: String(part),\n            type: 'string'\n          };\n        }\n      });\n      var size = items.reduce(function (acc, curr) {\n        if (curr.type === 'string') {\n          return acc + global.unescape(encodeURI(curr.data)).length;\n        } else {\n          return acc + curr.data.size;\n        }\n      }, 0);\n      NativeBlobModule.createFromParts(items, blobId);\n      return BlobManager.createFromOptions({\n        blobId: blobId,\n        offset: 0,\n        size: size,\n        type: options ? options.type : '',\n        lastModified: options ? options.lastModified : Date.now()\n      });\n    }\n  }, {\n    key: \"createFromOptions\",\n    value: function createFromOptions(options) {\n      BlobRegistry.register(options.blobId);\n      return Object.assign(Object.create(Blob.prototype), {\n        data: options.__collector == null ? _objectSpread(_objectSpread({}, options), {}, {\n          __collector: createBlobCollector(options.blobId)\n        }) : options\n      });\n    }\n  }, {\n    key: \"release\",\n    value: function release(blobId) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      BlobRegistry.unregister(blobId);\n      if (BlobRegistry.has(blobId)) {\n        return;\n      }\n      NativeBlobModule.release(blobId);\n    }\n  }, {\n    key: \"addNetworkingHandler\",\n    value: function addNetworkingHandler() {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      NativeBlobModule.addNetworkingHandler();\n    }\n  }, {\n    key: \"addWebSocketHandler\",\n    value: function addWebSocketHandler(socketId) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      NativeBlobModule.addWebSocketHandler(socketId);\n    }\n  }, {\n    key: \"removeWebSocketHandler\",\n    value: function removeWebSocketHandler(socketId) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      NativeBlobModule.removeWebSocketHandler(socketId);\n    }\n  }, {\n    key: \"sendOverSocket\",\n    value: function sendOverSocket(blob, socketId) {\n      invariant(NativeBlobModule, 'NativeBlobModule is available.');\n      NativeBlobModule.sendOverSocket(blob.data, socketId);\n    }\n  }]);\n  return BlobManager;\n}();\nBlobManager.isAvailable = !!NativeBlobModule;\nmodule.exports = BlobManager;","map":{"version":3,"names":["NativeBlobModule","invariant","Blob","require","BlobRegistry","uuidv4","replace","c","r","Math","random","v","toString","createBlobCollector","blobId","global","__blobCollectorProvider","BlobManager","_classCallCheck","_createClass","key","value","createFromParts","parts","options","items","map","part","ArrayBuffer","ArrayBufferView","Error","data","type","String","size","reduce","acc","curr","unescape","encodeURI","length","createFromOptions","offset","lastModified","Date","now","register","Object","assign","create","prototype","__collector","_objectSpread","release","unregister","has","addNetworkingHandler","addWebSocketHandler","socketId","removeWebSocketHandler","sendOverSocket","blob","isAvailable","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Blob/BlobManager.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict-local\r\n * @format\r\n */\r\n\r\nimport type {BlobCollector, BlobData, BlobOptions} from './BlobTypes';\r\n\r\nimport NativeBlobModule from './NativeBlobModule';\r\nimport invariant from 'invariant';\r\n\r\nconst Blob = require('./Blob');\r\nconst BlobRegistry = require('./BlobRegistry');\r\n\r\n/*eslint-disable no-bitwise */\r\n/*eslint-disable eqeqeq */\r\n\r\n/**\r\n * Based on the rfc4122-compliant solution posted at\r\n * http://stackoverflow.com/questions/105034\r\n */\r\nfunction uuidv4(): string {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\r\n    const r = (Math.random() * 16) | 0,\r\n      v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n    return v.toString(16);\r\n  });\r\n}\r\n\r\n// **Temporary workaround**\r\n// TODO(#24654): Use turbomodules for the Blob module.\r\n// Blob collector is a jsi::HostObject that is used by native to know\r\n// when the a Blob instance is deallocated. This allows to free the\r\n// underlying native resources. This is a hack to workaround the fact\r\n// that the current bridge infra doesn't allow to track js objects\r\n// deallocation. Ideally the whole Blob object should be a jsi::HostObject.\r\nfunction createBlobCollector(blobId: string): BlobCollector | null {\r\n  if (global.__blobCollectorProvider == null) {\r\n    return null;\r\n  } else {\r\n    return global.__blobCollectorProvider(blobId);\r\n  }\r\n}\r\n\r\n/**\r\n * Module to manage blobs. Wrapper around the native blob module.\r\n */\r\nclass BlobManager {\r\n  /**\r\n   * If the native blob module is available.\r\n   */\r\n  static isAvailable: boolean = !!NativeBlobModule;\r\n\r\n  /**\r\n   * Create blob from existing array of blobs.\r\n   */\r\n  static createFromParts(\r\n    parts: Array<Blob | string>,\r\n    options?: BlobOptions,\r\n  ): Blob {\r\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\r\n\r\n    const blobId = uuidv4();\r\n    const items = parts.map(part => {\r\n      if (\r\n        part instanceof ArrayBuffer ||\r\n        (global.ArrayBufferView && part instanceof global.ArrayBufferView)\r\n      ) {\r\n        throw new Error(\r\n          \"Creating blobs from 'ArrayBuffer' and 'ArrayBufferView' are not supported\",\r\n        );\r\n      }\r\n      if (part instanceof Blob) {\r\n        return {\r\n          data: part.data,\r\n          type: 'blob',\r\n        };\r\n      } else {\r\n        return {\r\n          data: String(part),\r\n          type: 'string',\r\n        };\r\n      }\r\n    });\r\n    const size = items.reduce((acc, curr) => {\r\n      if (curr.type === 'string') {\r\n        return acc + global.unescape(encodeURI(curr.data)).length;\r\n      } else {\r\n        return acc + curr.data.size;\r\n      }\r\n    }, 0);\r\n\r\n    NativeBlobModule.createFromParts(items, blobId);\r\n\r\n    return BlobManager.createFromOptions({\r\n      blobId,\r\n      offset: 0,\r\n      size,\r\n      type: options ? options.type : '',\r\n      lastModified: options ? options.lastModified : Date.now(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create blob instance from blob data from native.\r\n   * Used internally by modules like XHR, WebSocket, etc.\r\n   */\r\n  static createFromOptions(options: BlobData): Blob {\r\n    BlobRegistry.register(options.blobId);\r\n    // $FlowFixMe[prop-missing]\r\n    return Object.assign(Object.create(Blob.prototype), {\r\n      data:\r\n        // Reuse the collector instance when creating from an existing blob.\r\n        // This will make sure that the underlying resource is only deallocated\r\n        // when all blobs that refer to it are deallocated.\r\n        options.__collector == null\r\n          ? {\r\n              ...options,\r\n              __collector: createBlobCollector(options.blobId),\r\n            }\r\n          : options,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deallocate resources for a blob.\r\n   */\r\n  static release(blobId: string): void {\r\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\r\n\r\n    BlobRegistry.unregister(blobId);\r\n    if (BlobRegistry.has(blobId)) {\r\n      return;\r\n    }\r\n    NativeBlobModule.release(blobId);\r\n  }\r\n\r\n  /**\r\n   * Inject the blob content handler in the networking module to support blob\r\n   * requests and responses.\r\n   */\r\n  static addNetworkingHandler(): void {\r\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\r\n\r\n    NativeBlobModule.addNetworkingHandler();\r\n  }\r\n\r\n  /**\r\n   * Indicate the websocket should return a blob for incoming binary\r\n   * messages.\r\n   */\r\n  static addWebSocketHandler(socketId: number): void {\r\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\r\n\r\n    NativeBlobModule.addWebSocketHandler(socketId);\r\n  }\r\n\r\n  /**\r\n   * Indicate the websocket should no longer return a blob for incoming\r\n   * binary messages.\r\n   */\r\n  static removeWebSocketHandler(socketId: number): void {\r\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\r\n\r\n    NativeBlobModule.removeWebSocketHandler(socketId);\r\n  }\r\n\r\n  /**\r\n   * Send a blob message to a websocket.\r\n   */\r\n  static sendOverSocket(blob: Blob, socketId: number): void {\r\n    invariant(NativeBlobModule, 'NativeBlobModule is available.');\r\n\r\n    NativeBlobModule.sendOverSocket(blob.data, socketId);\r\n  }\r\n}\r\n\r\nmodule.exports = BlobManager;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}