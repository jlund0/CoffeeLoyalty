{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport app from \"./firebase\";\nimport { collection, doc, getFirestore, getDoc, getDocs, setDoc, serverTimestamp, query, orderBy, startAt, endAt, where, onSnapshot } from \"firebase/firestore\";\nimport { getAuth } from \"firebase/auth\";\nimport { getStorage, getDownloadURL, ref } from \"firebase/storage\";\nimport * as geofire from \"geofire-common\";\nvar db = getFirestore(app);\nvar storage = getStorage(app);\nexport function AddUser(_x, _x2) {\n  return _AddUser.apply(this, arguments);\n}\nfunction _AddUser() {\n  _AddUser = _asyncToGenerator(function* (user, name) {\n    var displayName = user.displayName,\n      email = user.email,\n      uid = user.uid;\n    console.log(displayName, email, uid);\n    console.log(`adding user ${displayName}`);\n    var docRef = doc(db, \"users\", uid);\n    var docSnap = yield getDoc(docRef);\n    if (docSnap.exists()) {\n      console.log(\"user already added with\");\n      console.log(\"Document data:\", docSnap.data());\n    } else {\n      console.log(\"adding user \" + uid);\n      var userData = {\n        name: displayName,\n        email: email,\n        coffee_earnt: 0,\n        created_at: serverTimestamp(),\n        role: \"customer\",\n        cards: []\n      };\n      try {\n        setDoc(doc(db, \"users\", uid), userData);\n        console.log(\"User written with ID: \", uid);\n        return userData;\n      } catch (e) {\n        console.error(\"Error adding document: \", e);\n      }\n    }\n  });\n  return _AddUser.apply(this, arguments);\n}\nexport function getUserInfo() {\n  return _getUserInfo.apply(this, arguments);\n}\nfunction _getUserInfo() {\n  _getUserInfo = _asyncToGenerator(function* () {\n    var auth = getAuth();\n    var user = auth.currentUser;\n    console.log(\"getting user info\");\n    console.log(user);\n    console.log(`fetching ${user.uid} details`);\n    var docRef = doc(db, \"users\", user.uid);\n    var docSnap = yield getDoc(docRef);\n    if (docSnap.exists()) {\n      var data = docSnap.data();\n      data.userId = docSnap.id;\n      var cards = yield getCards(data.cards);\n      console.log(\"card here ****\");\n      console.log(cards);\n      console.log(\"Users data:\", data);\n      return {\n        data: data,\n        cards: cards\n      };\n    } else {\n      console.log(\"No such document!\");\n      var _data = yield AddUser(user);\n      var _cards = [];\n      return {\n        data: _data,\n        cards: _cards\n      };\n    }\n  });\n  return _getUserInfo.apply(this, arguments);\n}\nfunction getCards(_x3) {\n  return _getCards.apply(this, arguments);\n}\nfunction _getCards() {\n  _getCards = _asyncToGenerator(function* (cardRefs) {\n    var cards = [];\n    yield Promise.all(cardRefs.map(function () {\n      var _ref = _asyncToGenerator(function* (cardRef) {\n        var cardDoc = yield getDoc(cardRef, where(\"active\", \"==\", true));\n        if (cardDoc.exists) {\n          cards.push(_objectSpread({\n            cardId: cardDoc.id\n          }, cardDoc.data()));\n        }\n      });\n      return function (_x8) {\n        return _ref.apply(this, arguments);\n      };\n    }()));\n    for (card in cards) {\n      var storedata = yield getStoreInfo(cards[card].storeId);\n      cards[card] = Object.assign({}, storedata, cards[card]);\n    }\n    return cards;\n  });\n  return _getCards.apply(this, arguments);\n}\nexport function getUserCards() {\n  return _getUserCards.apply(this, arguments);\n}\nfunction _getUserCards() {\n  _getUserCards = _asyncToGenerator(function* () {\n    var cards = [];\n    var auth = getAuth();\n    var user = auth.currentUser;\n    var completeCards = [];\n    var querySnapshot = yield getDocs(query(collection(db, \"cards\"), where(\"userId\", \"==\", user.uid)));\n    querySnapshot.forEach(function (doc) {\n      var data = doc.data();\n      data.cardId = doc.id;\n      cards.push(data);\n    });\n    console.log(cards);\n    for (var _card of cards) {\n      var storedata = yield getStoreInfo(_card.storeId);\n      completeCards.push(Object.assign({}, storedata, _card));\n    }\n    console.log(\"users cards:\");\n    console.log(completeCards);\n    return completeCards;\n  });\n  return _getUserCards.apply(this, arguments);\n}\nexport function getStoreInfo(_x4) {\n  return _getStoreInfo.apply(this, arguments);\n}\nfunction _getStoreInfo() {\n  _getStoreInfo = _asyncToGenerator(function* (storeId) {\n    var docSnap = yield getDoc(doc(db, \"stores\", storeId));\n    console.log(\"store ref: \");\n    console.log(docSnap.id);\n    console.log(\"fetching store info\");\n    if (docSnap.exists()) {\n      var logo = yield getDownloadURL(ref(storage, docSnap.data().logo));\n      console.log(\"Store data:\", docSnap.data());\n      var data = docSnap.data();\n      data.coffeeId = docSnap.id;\n      data.logo = logo;\n      return data;\n    } else {\n      console.log(\"No such document!\");\n    }\n  });\n  return _getStoreInfo.apply(this, arguments);\n}\nexport function getStoreLogo(_x5) {\n  return _getStoreLogo.apply(this, arguments);\n}\nfunction _getStoreLogo() {\n  _getStoreLogo = _asyncToGenerator(function* (storeid) {\n    console.log(\"getting store logo: \" + storeid);\n    var imageurl = yield getDownloadURL(ref(storage, `STORES/Logos/${storeid}.jpg`));\n    return imageurl;\n  });\n  return _getStoreLogo.apply(this, arguments);\n}\nexport function getStores(_x6, _x7) {\n  return _getStores.apply(this, arguments);\n}\nfunction _getStores() {\n  _getStores = _asyncToGenerator(function* (lat, lng) {\n    var distance = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n    var center = [lat, lng];\n    var bounds = geofire.geohashQueryBounds(center, 2000);\n    var radiusInM = distance * 1000;\n    var promises = [];\n    for (var b of bounds) {\n      var _q = query(collection(db, \"stores\"), orderBy(\"geohash\"), startAt(b[0]), endAt(b[1]));\n      promises.push(getDocs(_q));\n    }\n    var snapshots = yield Promise.all(promises);\n    var matchingDocs = [];\n    for (var snap of snapshots) {\n      for (var _doc of snap.docs) {\n        var coords = _doc.get(\"coords\");\n        var distanceInKm = geofire.distanceBetween([coords.latitude, coords.longitude], center);\n        var distanceInM = distanceInKm * 1000;\n        if (distanceInM <= radiusInM) {\n          var data = _doc.data();\n          data[\"distanceAway\"] = distanceInM;\n          data[\"id\"] = _doc.id;\n          data[\"logo\"] = yield getDownloadURL(ref(storage, data.logo));\n          matchingDocs.push(data);\n        }\n      }\n      console.log(matchingDocs);\n      return matchingDocs.sort(function (p1, p2) {\n        p1.distanceAway > p2.distanceAway ? 1 : p1.distanceAway < p2.distanceAway ? -1 : 0;\n      });\n    }\n  });\n  return _getStores.apply(this, arguments);\n}\nexport function cardUpdateListener(cardRefs) {\n  var unsubscribe = onSnapshot(q, function (snapshot) {\n    snapshot.docChanges().forEach(function (change) {\n      if (change.type === \"modified\") {\n        console.log(\"card changes\");\n        console.log(change.doc.data());\n      }\n    });\n  });\n}","map":{"version":3,"names":["app","collection","doc","getFirestore","getDoc","getDocs","setDoc","serverTimestamp","query","orderBy","startAt","endAt","where","onSnapshot","getAuth","getStorage","getDownloadURL","ref","geofire","db","storage","AddUser","_x","_x2","_AddUser","apply","arguments","_asyncToGenerator","user","name","displayName","email","uid","console","log","docRef","docSnap","exists","data","userData","coffee_earnt","created_at","role","cards","e","error","getUserInfo","_getUserInfo","auth","currentUser","userId","id","getCards","_x3","_getCards","cardRefs","Promise","all","map","_ref","cardRef","cardDoc","push","_objectSpread","cardId","_x8","card","storedata","getStoreInfo","storeId","Object","assign","getUserCards","_getUserCards","completeCards","querySnapshot","forEach","_x4","_getStoreInfo","logo","coffeeId","getStoreLogo","_x5","_getStoreLogo","storeid","imageurl","getStores","_x6","_x7","_getStores","lat","lng","distance","length","undefined","center","bounds","geohashQueryBounds","radiusInM","promises","b","q","snapshots","matchingDocs","snap","docs","coords","get","distanceInKm","distanceBetween","latitude","longitude","distanceInM","sort","p1","p2","distanceAway","cardUpdateListener","unsubscribe","snapshot","docChanges","change","type"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/firebasefunctions.js"],"sourcesContent":["import app from \"./firebase\";\r\nimport {\r\n  collection,\r\n  doc,\r\n  getFirestore,\r\n  getDoc,\r\n  getDocs,\r\n  setDoc,\r\n  serverTimestamp,\r\n  query,\r\n  orderBy,\r\n  startAt,\r\n  endAt,\r\n  where,\r\n  onSnapshot,\r\n} from \"firebase/firestore\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getStorage, getDownloadURL, ref } from \"firebase/storage\";\r\nimport * as geofire from \"geofire-common\";\r\n\r\nconst db = getFirestore(app);\r\nconst storage = getStorage(app);\r\n\r\nexport async function AddUser(user, name) {\r\n  const { displayName, email, uid } = user;\r\n  console.log(displayName, email, uid);\r\n  console.log(`adding user ${displayName}`);\r\n  const docRef = doc(db, \"users\", uid);\r\n  const docSnap = await getDoc(docRef);\r\n\r\n  if (docSnap.exists()) {\r\n    console.log(\"user already added with\");\r\n    console.log(\"Document data:\", docSnap.data());\r\n  } else {\r\n    console.log(\"adding user \" + uid);\r\n    const userData = {\r\n      name: displayName,\r\n      email: email,\r\n      coffee_earnt: 0,\r\n      created_at: serverTimestamp(),\r\n      role: \"customer\",\r\n      cards: [],\r\n    };\r\n    try {\r\n      setDoc(doc(db, \"users\", uid), userData);\r\n      console.log(\"User written with ID: \", uid);\r\n      return userData;\r\n    } catch (e) {\r\n      console.error(\"Error adding document: \", e);\r\n    }\r\n  }\r\n}\r\n\r\nexport async function getUserInfo() {\r\n  const auth = getAuth();\r\n  const user = auth.currentUser;\r\n  console.log(\"getting user info\");\r\n  console.log(user);\r\n  console.log(`fetching ${user.uid} details`);\r\n  const docRef = doc(db, \"users\", user.uid);\r\n  const docSnap = await getDoc(docRef);\r\n\r\n  if (docSnap.exists()) {\r\n    let data = docSnap.data();\r\n    data.userId = docSnap.id;\r\n    let cards = await getCards(data.cards);\r\n    console.log(\"card here ****\");\r\n    console.log(cards);\r\n    console.log(\"Users data:\", data);\r\n\r\n    return { data, cards };\r\n  } else {\r\n    console.log(\"No such document!\");\r\n    const data = await AddUser(user);\r\n    let cards = [];\r\n    return { data, cards };\r\n  }\r\n}\r\n\r\nasync function getCards(cardRefs) {\r\n  let cards = [];\r\n  await Promise.all(\r\n    cardRefs.map(async (cardRef) => {\r\n      const cardDoc = await getDoc(cardRef, where(\"active\", \"==\", true));\r\n      if (cardDoc.exists) {\r\n        cards.push({ cardId: cardDoc.id, ...cardDoc.data() });\r\n      }\r\n    })\r\n  );\r\n  for (card in cards) {\r\n    let storedata = await getStoreInfo(cards[card].storeId);\r\n    cards[card] = Object.assign({}, storedata, cards[card]);\r\n  }\r\n  return cards;\r\n}\r\n\r\nexport async function getUserCards() {\r\n  const cards = [];\r\n  const auth = getAuth();\r\n  const user = auth.currentUser;\r\n  const completeCards = [];\r\n  // const user = auth.currentUser;\r\n  // console.log(`fetching ${user.uid} cards`);\r\n  const querySnapshot = await getDocs(\r\n    query(collection(db, \"cards\"), where(\"userId\", \"==\", user.uid))\r\n  );\r\n\r\n  querySnapshot.forEach((doc) => {\r\n    const data = doc.data();\r\n    data.cardId = doc.id;\r\n    cards.push(data);\r\n  });\r\n  console.log(cards);\r\n  for (let card of cards) {\r\n    let storedata = await getStoreInfo(card.storeId);\r\n    completeCards.push(Object.assign({}, storedata, card));\r\n  }\r\n  console.log(\"users cards:\");\r\n  console.log(completeCards);\r\n  return completeCards;\r\n}\r\n\r\nexport async function getStoreInfo(storeId) {\r\n  let docSnap = await getDoc(doc(db, \"stores\", storeId));\r\n  console.log(\"store ref: \");\r\n  console.log(docSnap.id);\r\n\r\n  console.log(\"fetching store info\");\r\n  if (docSnap.exists()) {\r\n    let logo = await getDownloadURL(ref(storage, docSnap.data().logo));\r\n    console.log(\"Store data:\", docSnap.data());\r\n    let data = docSnap.data();\r\n    data.coffeeId = docSnap.id;\r\n    data.logo = logo;\r\n    return data;\r\n  } else {\r\n    // docSnap.data() will be undefined in this case\r\n    console.log(\"No such document!\");\r\n  }\r\n}\r\n\r\n// export function getStores(filter) {\r\n//   console.log(`fetching stores in filter ${filter}`);\r\n// }\r\n\r\n// export function addCard(cardid, userid) {\r\n//   console.log(\"adding card with\" + cardid + \"to\" + userid);\r\n// }\r\n\r\nexport async function getStoreLogo(storeid) {\r\n  console.log(\"getting store logo: \" + storeid);\r\n\r\n  let imageurl = await getDownloadURL(\r\n    ref(storage, `STORES/Logos/${storeid}.jpg`)\r\n  );\r\n  // console.log(\"logo url: \" + imageurl);\r\n  return imageurl;\r\n}\r\n\r\nexport async function getStores(lat, lng, distance = 1) {\r\n  const center = [lat, lng];\r\n  const bounds = geofire.geohashQueryBounds(center, 2000);\r\n  const radiusInM = distance * 1000;\r\n\r\n  const promises = [];\r\n  for (const b of bounds) {\r\n    const q = query(\r\n      collection(db, \"stores\"),\r\n      orderBy(\"geohash\"),\r\n      startAt(b[0]),\r\n      endAt(b[1])\r\n    );\r\n\r\n    promises.push(getDocs(q));\r\n  }\r\n  // Collect all the query results together into a single list\r\n  const snapshots = await Promise.all(promises);\r\n  const matchingDocs = [];\r\n\r\n  for (const snap of snapshots) {\r\n    for (const doc of snap.docs) {\r\n      const coords = doc.get(\"coords\");\r\n      // We have to filter out a few false positives due to GeoHash\r\n      // accuracy, but most will match\r\n      const distanceInKm = geofire.distanceBetween(\r\n        [coords.latitude, coords.longitude],\r\n        center\r\n      );\r\n\r\n      const distanceInM = distanceInKm * 1000;\r\n      if (distanceInM <= radiusInM) {\r\n        const data = doc.data();\r\n        data[\"distanceAway\"] = distanceInM;\r\n        data[\"id\"] = doc.id;\r\n        data[\"logo\"] = await getDownloadURL(ref(storage, data.logo));\r\n        matchingDocs.push(data);\r\n      }\r\n    }\r\n    console.log(matchingDocs);\r\n\r\n    return matchingDocs.sort((p1, p2) => {\r\n      p1.distanceAway > p2.distanceAway\r\n        ? 1\r\n        : p1.distanceAway < p2.distanceAway\r\n        ? -1\r\n        : 0;\r\n    });\r\n  }\r\n}\r\n\r\n//CardUpdate Listener\r\nexport function cardUpdateListener(cardRefs) {\r\n  const unsubscribe = onSnapshot(q, (snapshot) => {\r\n    snapshot.docChanges().forEach((change) => {\r\n      if (change.type === \"modified\") {\r\n        console.log(\"card changes\");\r\n        console.log(change.doc.data());\r\n      }\r\n    });\r\n  });\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}