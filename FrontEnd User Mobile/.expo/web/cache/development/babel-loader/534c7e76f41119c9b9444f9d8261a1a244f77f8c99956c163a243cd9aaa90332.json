{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport NativeEventEmitter from \"../../EventEmitter/NativeEventEmitter\";\nimport LayoutAnimation from \"../../LayoutAnimation/LayoutAnimation\";\nimport dismissKeyboard from \"../../Utilities/dismissKeyboard\";\nimport Platform from \"../../Utilities/Platform\";\nimport NativeKeyboardObserver from \"./NativeKeyboardObserver\";\nvar Keyboard = function () {\n  function Keyboard() {\n    var _this = this;\n    _classCallCheck(this, Keyboard);\n    this._emitter = new NativeEventEmitter(Platform.OS !== 'ios' ? null : NativeKeyboardObserver);\n    this.addListener('keyboardDidShow', function (ev) {\n      _this._currentlyShowing = ev;\n    });\n    this.addListener('keyboardDidHide', function (_ev) {\n      _this._currentlyShowing = null;\n    });\n  }\n  _createClass(Keyboard, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      return this._emitter.addListener(eventType, listener);\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      this._emitter.removeAllListeners(eventType);\n    }\n  }, {\n    key: \"dismiss\",\n    value: function dismiss() {\n      dismissKeyboard();\n    }\n  }, {\n    key: \"isVisible\",\n    value: function isVisible() {\n      return !!this._currentlyShowing;\n    }\n  }, {\n    key: \"metrics\",\n    value: function metrics() {\n      var _this$_currentlyShowi;\n      return (_this$_currentlyShowi = this._currentlyShowing) == null ? void 0 : _this$_currentlyShowi.endCoordinates;\n    }\n  }, {\n    key: \"scheduleLayoutAnimation\",\n    value: function scheduleLayoutAnimation(event) {\n      var duration = event.duration,\n        easing = event.easing;\n      if (duration != null && duration !== 0) {\n        LayoutAnimation.configureNext({\n          duration: duration,\n          update: {\n            duration: duration,\n            type: easing != null && LayoutAnimation.Types[easing] || 'keyboard'\n          }\n        });\n      }\n    }\n  }]);\n  return Keyboard;\n}();\nmodule.exports = new Keyboard();","map":{"version":3,"names":["NativeEventEmitter","LayoutAnimation","dismissKeyboard","Platform","NativeKeyboardObserver","Keyboard","_this","_classCallCheck","_emitter","OS","addListener","ev","_currentlyShowing","_ev","_createClass","key","value","eventType","listener","context","removeAllListeners","dismiss","isVisible","metrics","_this$_currentlyShowi","endCoordinates","scheduleLayoutAnimation","event","duration","easing","configureNext","update","type","Types","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Components/Keyboard/Keyboard.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\r\n\r\nimport NativeEventEmitter from '../../EventEmitter/NativeEventEmitter';\r\nimport LayoutAnimation from '../../LayoutAnimation/LayoutAnimation';\r\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\r\nimport Platform from '../../Utilities/Platform';\r\nimport NativeKeyboardObserver from './NativeKeyboardObserver';\r\n\r\nexport type KeyboardEventName = $Keys<KeyboardEventDefinitions>;\r\n\r\nexport type KeyboardEventEasing =\r\n  | 'easeIn'\r\n  | 'easeInEaseOut'\r\n  | 'easeOut'\r\n  | 'linear'\r\n  | 'keyboard';\r\n\r\nexport type KeyboardMetrics = $ReadOnly<{|\r\n  screenX: number,\r\n  screenY: number,\r\n  width: number,\r\n  height: number,\r\n|}>;\r\n\r\nexport type KeyboardEvent = AndroidKeyboardEvent | IOSKeyboardEvent;\r\n\r\ntype BaseKeyboardEvent = {|\r\n  duration: number,\r\n  easing: KeyboardEventEasing,\r\n  endCoordinates: KeyboardMetrics,\r\n|};\r\n\r\nexport type AndroidKeyboardEvent = $ReadOnly<{|\r\n  ...BaseKeyboardEvent,\r\n  duration: 0,\r\n  easing: 'keyboard',\r\n|}>;\r\n\r\nexport type IOSKeyboardEvent = $ReadOnly<{|\r\n  ...BaseKeyboardEvent,\r\n  startCoordinates: KeyboardMetrics,\r\n  isEventFromThisApp: boolean,\r\n|}>;\r\n\r\ntype KeyboardEventDefinitions = {\r\n  keyboardWillShow: [KeyboardEvent],\r\n  keyboardDidShow: [KeyboardEvent],\r\n  keyboardWillHide: [KeyboardEvent],\r\n  keyboardDidHide: [KeyboardEvent],\r\n  keyboardWillChangeFrame: [KeyboardEvent],\r\n  keyboardDidChangeFrame: [KeyboardEvent],\r\n};\r\n\r\n/**\r\n * `Keyboard` module to control keyboard events.\r\n *\r\n * ### Usage\r\n *\r\n * The Keyboard module allows you to listen for native events and react to them, as\r\n * well as make changes to the keyboard, like dismissing it.\r\n *\r\n *```\r\n * import React, { Component } from 'react';\r\n * import { Keyboard, TextInput } from 'react-native';\r\n *\r\n * class Example extends Component {\r\n *   componentWillMount () {\r\n *     this.keyboardDidShowListener = Keyboard.addListener('keyboardDidShow', this._keyboardDidShow);\r\n *     this.keyboardDidHideListener = Keyboard.addListener('keyboardDidHide', this._keyboardDidHide);\r\n *   }\r\n *\r\n *   componentWillUnmount () {\r\n *     this.keyboardDidShowListener.remove();\r\n *     this.keyboardDidHideListener.remove();\r\n *   }\r\n *\r\n *   _keyboardDidShow () {\r\n *     alert('Keyboard Shown');\r\n *   }\r\n *\r\n *   _keyboardDidHide () {\r\n *     alert('Keyboard Hidden');\r\n *   }\r\n *\r\n *   render() {\r\n *     return (\r\n *       <TextInput\r\n *         onSubmitEditing={Keyboard.dismiss}\r\n *       />\r\n *     );\r\n *   }\r\n * }\r\n *```\r\n */\r\n\r\nclass Keyboard {\r\n  _currentlyShowing: ?KeyboardEvent;\r\n\r\n  _emitter: NativeEventEmitter<KeyboardEventDefinitions> =\r\n    new NativeEventEmitter(\r\n      // T88715063: NativeEventEmitter only used this parameter on iOS. Now it uses it on all platforms, so this code was modified automatically to preserve its behavior\r\n      // If you want to use the native module on other platforms, please remove this condition and test its behavior\r\n      Platform.OS !== 'ios' ? null : NativeKeyboardObserver,\r\n    );\r\n\r\n  constructor() {\r\n    this.addListener('keyboardDidShow', ev => {\r\n      this._currentlyShowing = ev;\r\n    });\r\n    this.addListener('keyboardDidHide', _ev => {\r\n      this._currentlyShowing = null;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * The `addListener` function connects a JavaScript function to an identified native\r\n   * keyboard notification event.\r\n   *\r\n   * This function then returns the reference to the listener.\r\n   *\r\n   * @param {string} eventName The `nativeEvent` is the string that identifies the event you're listening for.  This\r\n   *can be any of the following:\r\n   *\r\n   * - `keyboardWillShow`\r\n   * - `keyboardDidShow`\r\n   * - `keyboardWillHide`\r\n   * - `keyboardDidHide`\r\n   * - `keyboardWillChangeFrame`\r\n   * - `keyboardDidChangeFrame`\r\n   *\r\n   * Android versions prior to API 30 rely on observing layout changes when\r\n   * `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.\r\n   *\r\n   * `keyboardWillShow` as well as `keyboardWillHide` are not available on Android since there is\r\n   * no native corresponding event.\r\n   *\r\n   * @param {function} callback function to be called when the event fires.\r\n   */\r\n  addListener<K: $Keys<KeyboardEventDefinitions>>(\r\n    eventType: K,\r\n    listener: (...$ElementType<KeyboardEventDefinitions, K>) => mixed,\r\n    context?: mixed,\r\n  ): EventSubscription {\r\n    return this._emitter.addListener(eventType, listener);\r\n  }\r\n\r\n  /**\r\n   * Removes all listeners for a specific event type.\r\n   *\r\n   * @param {string} eventType The native event string listeners are watching which will be removed.\r\n   */\r\n  removeAllListeners<K: $Keys<KeyboardEventDefinitions>>(eventType: ?K): void {\r\n    this._emitter.removeAllListeners(eventType);\r\n  }\r\n\r\n  /**\r\n   * Dismisses the active keyboard and removes focus.\r\n   */\r\n  dismiss(): void {\r\n    dismissKeyboard();\r\n  }\r\n\r\n  /**\r\n   * Whether the keyboard is last known to be visible.\r\n   */\r\n  isVisible(): boolean {\r\n    return !!this._currentlyShowing;\r\n  }\r\n\r\n  /**\r\n   * Return the metrics of the soft-keyboard if visible.\r\n   */\r\n  metrics(): ?KeyboardMetrics {\r\n    return this._currentlyShowing?.endCoordinates;\r\n  }\r\n\r\n  /**\r\n   * Useful for syncing TextInput (or other keyboard accessory view) size of\r\n   * position changes with keyboard movements.\r\n   */\r\n  scheduleLayoutAnimation(event: KeyboardEvent): void {\r\n    const {duration, easing} = event;\r\n    if (duration != null && duration !== 0) {\r\n      LayoutAnimation.configureNext({\r\n        duration: duration,\r\n        update: {\r\n          duration: duration,\r\n          type: (easing != null && LayoutAnimation.Types[easing]) || 'keyboard',\r\n        },\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = (new Keyboard(): Keyboard);\r\n"],"mappings":";;AAYA,OAAOA,kBAAkB;AACzB,OAAOC,eAAe;AACtB,OAAOC,eAAe;AACtB,OAAOC,QAAQ;AACf,OAAOC,sBAAsB;AAAiC,IAyFxDC,QAAQ;EAUZ,SAAAA,SAAA,EAAc;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAF,QAAA;IAAA,KAPdG,QAAQ,GACN,IAAIR,kBAAkB,CAGpBG,QAAQ,CAACM,EAAE,KAAK,KAAK,GAAG,IAAI,GAAGL,sBACjC,CAAC;IAGD,IAAI,CAACM,WAAW,CAAC,iBAAiB,EAAE,UAAAC,EAAE,EAAI;MACxCL,KAAI,CAACM,iBAAiB,GAAGD,EAAE;IAC7B,CAAC,CAAC;IACF,IAAI,CAACD,WAAW,CAAC,iBAAiB,EAAE,UAAAG,GAAG,EAAI;MACzCP,KAAI,CAACM,iBAAiB,GAAG,IAAI;IAC/B,CAAC,CAAC;EACJ;EAACE,YAAA,CAAAT,QAAA;IAAAU,GAAA;IAAAC,KAAA,EA0BD,SAAAN,YACEO,SAAY,EACZC,QAAiE,EACjEC,OAAe,EACI;MACnB,OAAO,IAAI,CAACX,QAAQ,CAACE,WAAW,CAACO,SAAS,EAAEC,QAAQ,CAAC;IACvD;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAOD,SAAAI,mBAAuDH,SAAa,EAAQ;MAC1E,IAAI,CAACT,QAAQ,CAACY,kBAAkB,CAACH,SAAS,CAAC;IAC7C;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAKD,SAAAK,QAAA,EAAgB;MACdnB,eAAe,CAAC,CAAC;IACnB;EAAC;IAAAa,GAAA;IAAAC,KAAA,EAKD,SAAAM,UAAA,EAAqB;MACnB,OAAO,CAAC,CAAC,IAAI,CAACV,iBAAiB;IACjC;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAKD,SAAAO,QAAA,EAA4B;MAAA,IAAAC,qBAAA;MAC1B,QAAAA,qBAAA,GAAO,IAAI,CAACZ,iBAAiB,qBAAtBY,qBAAA,CAAwBC,cAAc;IAC/C;EAAC;IAAAV,GAAA;IAAAC,KAAA,EAMD,SAAAU,wBAAwBC,KAAoB,EAAQ;MAClD,IAAOC,QAAQ,GAAYD,KAAK,CAAzBC,QAAQ;QAAEC,MAAM,GAAIF,KAAK,CAAfE,MAAM;MACvB,IAAID,QAAQ,IAAI,IAAI,IAAIA,QAAQ,KAAK,CAAC,EAAE;QACtC3B,eAAe,CAAC6B,aAAa,CAAC;UAC5BF,QAAQ,EAAEA,QAAQ;UAClBG,MAAM,EAAE;YACNH,QAAQ,EAAEA,QAAQ;YAClBI,IAAI,EAAGH,MAAM,IAAI,IAAI,IAAI5B,eAAe,CAACgC,KAAK,CAACJ,MAAM,CAAC,IAAK;UAC7D;QACF,CAAC,CAAC;MACJ;IACF;EAAC;EAAA,OAAAxB,QAAA;AAAA;AAGH6B,MAAM,CAACC,OAAO,GAAI,IAAI9B,QAAQ,CAAC,CAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}