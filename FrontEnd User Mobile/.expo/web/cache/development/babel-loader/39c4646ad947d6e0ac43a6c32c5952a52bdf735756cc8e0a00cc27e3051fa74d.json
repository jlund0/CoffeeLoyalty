{"ast":null,"code":"'use strict';\nfunction dumpReactTree() {\n  try {\n    return getReactTree();\n  } catch (e) {\n    return 'Failed to dump react tree: ' + e;\n  }\n}\nfunction getReactTree() {\n  return 'React tree dumps have been temporarily disabled while React is ' + 'upgraded to Fiber.';\n}\nmodule.exports = dumpReactTree;","map":{"version":3,"names":["dumpReactTree","getReactTree","e","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/BugReporting/dumpReactTree.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict\r\n */\r\n\r\n'use strict';\r\n\r\n/*\r\nconst getReactData = require('getReactData');\r\n\r\nconst INDENTATION_SIZE = 2;\r\nconst MAX_DEPTH = 2;\r\nconst MAX_STRING_LENGTH = 50;\r\n*/\r\n\r\n/**\r\n * Dump all React Native root views and their content. This function tries\r\n * it best to get the content but ultimately relies on implementation details\r\n * of React and will fail in future versions.\r\n */\r\nfunction dumpReactTree(): string {\r\n  try {\r\n    return getReactTree();\r\n  } catch (e) {\r\n    return 'Failed to dump react tree: ' + e;\r\n  }\r\n}\r\n\r\nfunction getReactTree() {\r\n  // TODO(sema): Reenable tree dumps using the Fiber tree structure. #15945684\r\n  return (\r\n    'React tree dumps have been temporarily disabled while React is ' +\r\n    'upgraded to Fiber.'\r\n  );\r\n  /*\r\n  let output = '';\r\n  const rootIds = Object.getOwnPropertyNames(ReactNativeMount._instancesByContainerID);\r\n  for (const rootId of rootIds) {\r\n    const instance = ReactNativeMount._instancesByContainerID[rootId];\r\n    output += `============ Root ID: ${rootId} ============\\n`;\r\n    output += dumpNode(instance, 0);\r\n    output += `============ End root ID: ${rootId} ============\\n`;\r\n  }\r\n  return output;\r\n*/\r\n}\r\n\r\n/*\r\nfunction dumpNode(node: Object, indentation: number) {\r\n  const data = getReactData(node);\r\n  if (data.nodeType === 'Text') {\r\n    return indent(indentation) + data.text + '\\n';\r\n  } else if (data.nodeType === 'Empty') {\r\n    return '';\r\n  }\r\n  let output = indent(indentation) + `<${data.name}`;\r\n  if (data.nodeType === 'Composite') {\r\n    for (const propName of Object.getOwnPropertyNames(data.props || {})) {\r\n      if (isNormalProp(propName)) {\r\n        try {\r\n          const value = convertValue(data.props[propName]);\r\n          if (value) {\r\n            output += ` ${propName}=${value}`;\r\n          }\r\n        } catch (e) {\r\n          const message = `[Failed to get property: ${e}]`;\r\n          output += ` ${propName}=${message}`;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  let childOutput = '';\r\n  for (const child of data.children || []) {\r\n    childOutput += dumpNode(child, indentation + 1);\r\n  }\r\n\r\n  if (childOutput) {\r\n    output += '>\\n' + childOutput + indent(indentation) + `</${data.name}>\\n`;\r\n  } else {\r\n    output += ' />\\n';\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\nfunction isNormalProp(name: string): boolean {\r\n  switch (name) {\r\n    case 'children':\r\n    case 'key':\r\n    case 'ref':\r\n      return false;\r\n    default:\r\n      return true;\r\n  }\r\n}\r\n\r\nfunction convertObject(object: Object, depth: number) {\r\n  if (depth >= MAX_DEPTH) {\r\n    return '[...omitted]';\r\n  }\r\n  let output = '{';\r\n  let first = true;\r\n  for (const key of Object.getOwnPropertyNames(object)) {\r\n    if (!first) {\r\n      output += ', ';\r\n    }\r\n    output += `${key}: ${convertValue(object[key], depth + 1)}`;\r\n    first = false;\r\n  }\r\n  return output + '}';\r\n}\r\n\r\nfunction convertValue(value, depth = 0): ?string {\r\n  if (!value) {\r\n    return null;\r\n  }\r\n\r\n  switch (typeof value) {\r\n    case 'string':\r\n      return JSON.stringify(possiblyEllipsis(value).replace('\\n', '\\\\n'));\r\n    case 'boolean':\r\n    case 'number':\r\n      return JSON.stringify(value);\r\n    case 'function':\r\n      return '[function]';\r\n    case 'object':\r\n      return convertObject(value, depth);\r\n    default:\r\n      return null;\r\n  }\r\n}\r\n\r\nfunction possiblyEllipsis(value: string) {\r\n  if (value.length > MAX_STRING_LENGTH) {\r\n    return value.slice(0, MAX_STRING_LENGTH) + '...';\r\n  } else {\r\n    return value;\r\n  }\r\n}\r\n\r\nfunction indent(size: number) {\r\n  return ' '.repeat(size * INDENTATION_SIZE);\r\n}\r\n*/\r\n\r\nmodule.exports = dumpReactTree;\r\n"],"mappings":"AAUA,YAAY;AAeZ,SAASA,aAAaA,CAAA,EAAW;EAC/B,IAAI;IACF,OAAOC,YAAY,CAAC,CAAC;EACvB,CAAC,CAAC,OAAOC,CAAC,EAAE;IACV,OAAO,6BAA6B,GAAGA,CAAC;EAC1C;AACF;AAEA,SAASD,YAAYA,CAAA,EAAG;EAEtB,OACE,iEAAiE,GACjE,oBAAoB;AAaxB;AAoGAE,MAAM,CAACC,OAAO,GAAGJ,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}