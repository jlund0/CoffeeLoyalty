{"ast":null,"code":"import PlatformBaseViewConfig from \"../NativeComponent/PlatformBaseViewConfig\";\nvar IGNORED_KEYS = ['transform', 'hitSlop'];\nexport default function verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig) {\n  for (var prop of ['validAttributes', 'bubblingEventTypes', 'directEventTypes']) {\n    var diff = Object.keys(lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]));\n    if (diff.length > 0) {\n      var _staticViewConfig$uiV;\n      var name = (_staticViewConfig$uiV = staticViewConfig.uiViewClassName) != null ? _staticViewConfig$uiV : nativeViewConfig.uiViewClassName;\n      console.error(`'${name}' has a view config that does not match native. ` + `'${prop}' is missing: ${diff.join(', ')}`);\n    }\n  }\n}\nfunction lefthandObjectDiff(leftObj, rightObj) {\n  var differentKeys = {};\n  function compare(leftItem, rightItem, key) {\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n    if (typeof leftItem === 'object') {\n      var objDiff = lefthandObjectDiff(leftItem, rightItem);\n      if (Object.keys(objDiff).length > 1) {\n        differentKeys[key] = objDiff;\n      }\n      return;\n    }\n    if (leftItem !== rightItem) {\n      differentKeys[key] = rightItem;\n      return;\n    }\n  }\n  for (var key in leftObj) {\n    if (IGNORED_KEYS.includes(key)) {\n      continue;\n    }\n    if (!rightObj) {\n      differentKeys[key] = {};\n    } else if (leftObj.hasOwnProperty(key)) {\n      compare(leftObj[key], rightObj[key], key);\n    }\n  }\n  return differentKeys;\n}\nexport function getConfigWithoutViewProps(viewConfig, propName) {\n  if (!viewConfig[propName]) {\n    return {};\n  }\n  return Object.keys(viewConfig[propName]).filter(function (prop) {\n    return !PlatformBaseViewConfig[propName][prop];\n  }).reduce(function (obj, prop) {\n    obj[prop] = viewConfig[propName][prop];\n    return obj;\n  }, {});\n}\nexport function stringifyViewConfig(viewConfig) {\n  return JSON.stringify(viewConfig, function (key, val) {\n    if (typeof val === 'function') {\n      return `ƒ ${val.name}`;\n    }\n    return val;\n  }, 2);\n}","map":{"version":3,"names":["PlatformBaseViewConfig","IGNORED_KEYS","verifyComponentAttributeEquivalence","nativeViewConfig","staticViewConfig","prop","diff","Object","keys","lefthandObjectDiff","length","_staticViewConfig$uiV","name","uiViewClassName","console","error","join","leftObj","rightObj","differentKeys","compare","leftItem","rightItem","key","objDiff","includes","hasOwnProperty","getConfigWithoutViewProps","viewConfig","propName","filter","reduce","obj","stringifyViewConfig","JSON","stringify","val"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Utilities/verifyComponentAttributeEquivalence.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n */\r\n\r\nimport PlatformBaseViewConfig from '../NativeComponent/PlatformBaseViewConfig';\r\nimport {type ViewConfig} from '../Renderer/shims/ReactNativeTypes';\r\n\r\nconst IGNORED_KEYS = ['transform', 'hitSlop'];\r\n\r\n/**\r\n * The purpose of this function is to validate that the view config that\r\n * native exposes for a given view manager is the same as the view config\r\n * that is specified for that view manager in JS.\r\n *\r\n * In order to improve perf, we want to avoid calling into native to get\r\n * the view config when each view manager is used. To do this, we are moving\r\n * the configs to JS. In the future we will use these JS based view configs\r\n * to codegen the view manager on native to ensure they stay in sync without\r\n * this runtime check.\r\n *\r\n * If this function fails, that likely means a change was made to the native\r\n * view manager without updating the JS config as well. Ideally you can make\r\n * that direct change to the JS config. If you don't know what the differences\r\n * are, the best approach I've found is to create a view that prints\r\n * the return value of getNativeComponentAttributes, and then copying that\r\n * text and pasting it back into JS:\r\n * <Text selectable={true}>{JSON.stringify(getNativeComponentAttributes('RCTView'))}</Text>\r\n *\r\n * This is meant to be a stopgap until the time comes when we only have a\r\n * single source of truth. I wonder if this message will still be here two\r\n * years from now...\r\n */\r\nexport default function verifyComponentAttributeEquivalence(\r\n  nativeViewConfig: ViewConfig,\r\n  staticViewConfig: ViewConfig,\r\n) {\r\n  for (const prop of [\r\n    'validAttributes',\r\n    'bubblingEventTypes',\r\n    'directEventTypes',\r\n  ]) {\r\n    const diff = Object.keys(\r\n      lefthandObjectDiff(nativeViewConfig[prop], staticViewConfig[prop]),\r\n    );\r\n\r\n    if (diff.length > 0) {\r\n      const name =\r\n        staticViewConfig.uiViewClassName ?? nativeViewConfig.uiViewClassName;\r\n      console.error(\r\n        `'${name}' has a view config that does not match native. ` +\r\n          `'${prop}' is missing: ${diff.join(', ')}`,\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\n// Return the different key-value pairs of the right object, by iterating through the keys in the left object\r\n// Note it won't return a difference where a key is missing in the left but exists the right.\r\nfunction lefthandObjectDiff(leftObj: Object, rightObj: Object): Object {\r\n  const differentKeys: {[string]: any | {...}} = {};\r\n\r\n  function compare(leftItem: any, rightItem: any, key: string) {\r\n    if (typeof leftItem !== typeof rightItem && leftItem != null) {\r\n      differentKeys[key] = rightItem;\r\n      return;\r\n    }\r\n\r\n    if (typeof leftItem === 'object') {\r\n      const objDiff = lefthandObjectDiff(leftItem, rightItem);\r\n      if (Object.keys(objDiff).length > 1) {\r\n        differentKeys[key] = objDiff;\r\n      }\r\n      return;\r\n    }\r\n\r\n    if (leftItem !== rightItem) {\r\n      differentKeys[key] = rightItem;\r\n      return;\r\n    }\r\n  }\r\n\r\n  for (const key in leftObj) {\r\n    if (IGNORED_KEYS.includes(key)) {\r\n      continue;\r\n    }\r\n\r\n    if (!rightObj) {\r\n      differentKeys[key] = {};\r\n    } else if (leftObj.hasOwnProperty(key)) {\r\n      compare(leftObj[key], rightObj[key], key);\r\n    }\r\n  }\r\n\r\n  return differentKeys;\r\n}\r\n\r\nexport function getConfigWithoutViewProps(\r\n  viewConfig: ViewConfig,\r\n  propName: string,\r\n): {...} {\r\n  if (!viewConfig[propName]) {\r\n    return {};\r\n  }\r\n\r\n  return Object.keys(viewConfig[propName])\r\n    .filter(prop => !PlatformBaseViewConfig[propName][prop])\r\n    .reduce<{[string]: any}>((obj, prop) => {\r\n      obj[prop] = viewConfig[propName][prop];\r\n      return obj;\r\n    }, {});\r\n}\r\n\r\nexport function stringifyViewConfig(viewConfig: any): string {\r\n  return JSON.stringify(\r\n    viewConfig,\r\n    (key, val) => {\r\n      if (typeof val === 'function') {\r\n        return `ƒ ${val.name}`;\r\n      }\r\n      return val;\r\n    },\r\n    2,\r\n  );\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}