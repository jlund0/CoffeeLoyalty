{"ast":null,"code":"import NativeFrameRateLogger from \"./NativeFrameRateLogger\";\nvar invariant = require('invariant');\nvar FrameRateLogger = {\n  setGlobalOptions: function setGlobalOptions(options) {\n    if (options.debug !== undefined) {\n      invariant(NativeFrameRateLogger, 'Trying to debug FrameRateLogger without the native module!');\n    }\n    if (NativeFrameRateLogger) {\n      var optionsClone = {\n        debug: !!options.debug,\n        reportStackTraces: !!options.reportStackTraces\n      };\n      NativeFrameRateLogger.setGlobalOptions(optionsClone);\n    }\n  },\n  setContext: function setContext(context) {\n    NativeFrameRateLogger && NativeFrameRateLogger.setContext(context);\n  },\n  beginScroll: function beginScroll() {\n    NativeFrameRateLogger && NativeFrameRateLogger.beginScroll();\n  },\n  endScroll: function endScroll() {\n    NativeFrameRateLogger && NativeFrameRateLogger.endScroll();\n  }\n};\nmodule.exports = FrameRateLogger;","map":{"version":3,"names":["NativeFrameRateLogger","invariant","require","FrameRateLogger","setGlobalOptions","options","debug","undefined","optionsClone","reportStackTraces","setContext","context","beginScroll","endScroll","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Interaction/FrameRateLogger.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\nimport NativeFrameRateLogger from './NativeFrameRateLogger';\r\n\r\nconst invariant = require('invariant');\r\n\r\n/**\r\n * Flow API for native FrameRateLogger module. If the native module is not installed, function calls\r\n * are just no-ops.\r\n *\r\n * Typical behavior is that `setContext` is called when a new screen is loaded (e.g. via a\r\n * navigation integration), and then `beginScroll` is called by `ScrollResponder` at which point the\r\n * native module then begins tracking frame drops. When `ScrollResponder` calls `endScroll`, the\r\n * native module gathers up all it's frame drop data and reports it via an analytics pipeline for\r\n * analysis.\r\n *\r\n * Note that `beginScroll` may be called multiple times by `ScrollResponder` - unclear if that's a\r\n * bug, but the native module should be robust to that.\r\n *\r\n * In the future we may add support for tracking frame drops in other types of interactions beyond\r\n * scrolling.\r\n */\r\nconst FrameRateLogger = {\r\n  /**\r\n   * Enable `debug` to see local logs of what's going on. `reportStackTraces` will grab stack traces\r\n   * during UI thread stalls and upload them if the native module supports it.\r\n   */\r\n  setGlobalOptions: function (options: {\r\n    debug?: boolean,\r\n    reportStackTraces?: boolean,\r\n    ...\r\n  }) {\r\n    if (options.debug !== undefined) {\r\n      invariant(\r\n        NativeFrameRateLogger,\r\n        'Trying to debug FrameRateLogger without the native module!',\r\n      );\r\n    }\r\n    if (NativeFrameRateLogger) {\r\n      // Needs to clone the object first to avoid modifying the argument.\r\n      const optionsClone = {\r\n        debug: !!options.debug,\r\n        reportStackTraces: !!options.reportStackTraces,\r\n      };\r\n      NativeFrameRateLogger.setGlobalOptions(optionsClone);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Must call `setContext` before any events can be properly tracked, which is done automatically\r\n   * in `AppRegistry`, but navigation is also a common place to hook in.\r\n   */\r\n  setContext: function (context: string) {\r\n    NativeFrameRateLogger && NativeFrameRateLogger.setContext(context);\r\n  },\r\n\r\n  /**\r\n   * Called in `ScrollResponder` so any component that uses that module will handle this\r\n   * automatically.\r\n   */\r\n  beginScroll() {\r\n    NativeFrameRateLogger && NativeFrameRateLogger.beginScroll();\r\n  },\r\n\r\n  /**\r\n   * Called in `ScrollResponder` so any component that uses that module will handle this\r\n   * automatically.\r\n   */\r\n  endScroll() {\r\n    NativeFrameRateLogger && NativeFrameRateLogger.endScroll();\r\n  },\r\n};\r\n\r\nmodule.exports = FrameRateLogger;\r\n"],"mappings":"AAUA,OAAOA,qBAAqB;AAE5B,IAAMC,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AAkBtC,IAAMC,eAAe,GAAG;EAKtBC,gBAAgB,EAAE,SAAAA,iBAAUC,OAI3B,EAAE;IACD,IAAIA,OAAO,CAACC,KAAK,KAAKC,SAAS,EAAE;MAC/BN,SAAS,CACPD,qBAAqB,EACrB,4DACF,CAAC;IACH;IACA,IAAIA,qBAAqB,EAAE;MAEzB,IAAMQ,YAAY,GAAG;QACnBF,KAAK,EAAE,CAAC,CAACD,OAAO,CAACC,KAAK;QACtBG,iBAAiB,EAAE,CAAC,CAACJ,OAAO,CAACI;MAC/B,CAAC;MACDT,qBAAqB,CAACI,gBAAgB,CAACI,YAAY,CAAC;IACtD;EACF,CAAC;EAMDE,UAAU,EAAE,SAAAA,WAAUC,OAAe,EAAE;IACrCX,qBAAqB,IAAIA,qBAAqB,CAACU,UAAU,CAACC,OAAO,CAAC;EACpE,CAAC;EAMDC,WAAW,WAAAA,YAAA,EAAG;IACZZ,qBAAqB,IAAIA,qBAAqB,CAACY,WAAW,CAAC,CAAC;EAC9D,CAAC;EAMDC,SAAS,WAAAA,UAAA,EAAG;IACVb,qBAAqB,IAAIA,qBAAqB,CAACa,SAAS,CAAC,CAAC;EAC5D;AACF,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAGZ,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}