{"ast":null,"code":"import Platform from \"../Utilities/Platform\";\nvar isEnabled = false;\nif (Platform.OS === 'web') {\n  var canUseDOM = Boolean(typeof window !== 'undefined' && window.document && window.document.createElement);\n  if (canUseDOM) {\n    var HOVER_THRESHOLD_MS = 1000;\n    var lastTouchTimestamp = 0;\n    var enableHover = function enableHover() {\n      if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\n        return;\n      }\n      isEnabled = true;\n    };\n    var disableHover = function disableHover() {\n      lastTouchTimestamp = Date.now();\n      if (isEnabled) {\n        isEnabled = false;\n      }\n    };\n    document.addEventListener('touchstart', disableHover, true);\n    document.addEventListener('touchmove', disableHover, true);\n    document.addEventListener('mousemove', enableHover, true);\n  }\n}\nexport function isHoverEnabled() {\n  return isEnabled;\n}","map":{"version":3,"names":["Platform","isEnabled","OS","canUseDOM","Boolean","window","document","createElement","HOVER_THRESHOLD_MS","lastTouchTimestamp","enableHover","Date","now","disableHover","addEventListener","isHoverEnabled"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Pressability/HoverState.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n * @format\r\n */\r\n\r\nimport Platform from '../Utilities/Platform';\r\n\r\nlet isEnabled = false;\r\n\r\nif (Platform.OS === 'web') {\r\n  const canUseDOM = Boolean(\r\n    typeof window !== 'undefined' &&\r\n      window.document &&\r\n      window.document.createElement,\r\n  );\r\n\r\n  if (canUseDOM) {\r\n    /**\r\n     * Web browsers emulate mouse events (and hover states) after touch events.\r\n     * This code infers when the currently-in-use modality supports hover\r\n     * (including for multi-modality devices) and considers \"hover\" to be enabled\r\n     * if a mouse movement occurs more than 1 second after the last touch event.\r\n     * This threshold is long enough to account for longer delays between the\r\n     * browser firing touch and mouse events on low-powered devices.\r\n     */\r\n    const HOVER_THRESHOLD_MS = 1000;\r\n    let lastTouchTimestamp = 0;\r\n\r\n    const enableHover = () => {\r\n      if (isEnabled || Date.now() - lastTouchTimestamp < HOVER_THRESHOLD_MS) {\r\n        return;\r\n      }\r\n      isEnabled = true;\r\n    };\r\n\r\n    const disableHover = () => {\r\n      lastTouchTimestamp = Date.now();\r\n      if (isEnabled) {\r\n        isEnabled = false;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('touchstart', disableHover, true);\r\n    document.addEventListener('touchmove', disableHover, true);\r\n    document.addEventListener('mousemove', enableHover, true);\r\n  }\r\n}\r\n\r\nexport function isHoverEnabled(): boolean {\r\n  return isEnabled;\r\n}\r\n"],"mappings":"AAUA,OAAOA,QAAQ;AAEf,IAAIC,SAAS,GAAG,KAAK;AAErB,IAAID,QAAQ,CAACE,EAAE,KAAK,KAAK,EAAE;EACzB,IAAMC,SAAS,GAAGC,OAAO,CACvB,OAAOC,MAAM,KAAK,WAAW,IAC3BA,MAAM,CAACC,QAAQ,IACfD,MAAM,CAACC,QAAQ,CAACC,aACpB,CAAC;EAED,IAAIJ,SAAS,EAAE;IASb,IAAMK,kBAAkB,GAAG,IAAI;IAC/B,IAAIC,kBAAkB,GAAG,CAAC;IAE1B,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;MACxB,IAAIT,SAAS,IAAIU,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGH,kBAAkB,GAAGD,kBAAkB,EAAE;QACrE;MACF;MACAP,SAAS,GAAG,IAAI;IAClB,CAAC;IAED,IAAMY,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;MACzBJ,kBAAkB,GAAGE,IAAI,CAACC,GAAG,CAAC,CAAC;MAC/B,IAAIX,SAAS,EAAE;QACbA,SAAS,GAAG,KAAK;MACnB;IACF,CAAC;IAEDK,QAAQ,CAACQ,gBAAgB,CAAC,YAAY,EAAED,YAAY,EAAE,IAAI,CAAC;IAC3DP,QAAQ,CAACQ,gBAAgB,CAAC,WAAW,EAAED,YAAY,EAAE,IAAI,CAAC;IAC1DP,QAAQ,CAACQ,gBAAgB,CAAC,WAAW,EAAEJ,WAAW,EAAE,IAAI,CAAC;EAC3D;AACF;AAEA,OAAO,SAASK,cAAcA,CAAA,EAAY;EACxC,OAAOd,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}