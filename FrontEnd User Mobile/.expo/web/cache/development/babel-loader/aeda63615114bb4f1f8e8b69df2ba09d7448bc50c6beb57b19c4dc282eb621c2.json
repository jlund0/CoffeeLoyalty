{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"numColumns\", \"columnWrapperStyle\", \"removeClippedSubviews\", \"strictMode\"];\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport { VirtualizedList, keyExtractor as defaultKeyExtractor } from '@react-native/virtualized-lists';\nimport memoizeOne from 'memoize-one';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar View = require(\"../Components/View/View\");\nvar StyleSheet = require(\"../StyleSheet/StyleSheet\");\nvar deepDiffer = require(\"../Utilities/differ/deepDiffer\");\nvar Platform = require(\"../Utilities/Platform\");\nvar invariant = require('invariant');\nvar React = require('react');\nfunction removeClippedSubviewsOrDefault(removeClippedSubviews) {\n  return removeClippedSubviews != null ? removeClippedSubviews : Platform.OS === 'android';\n}\nfunction numColumnsOrDefault(numColumns) {\n  return numColumns != null ? numColumns : 1;\n}\nfunction isArrayLike(data) {\n  return typeof Object(data).length === 'number';\n}\nvar FlatList = function (_React$PureComponent) {\n  _inherits(FlatList, _React$PureComponent);\n  var _super = _createSuper(FlatList);\n  function FlatList(_props) {\n    var _this;\n    _classCallCheck(this, FlatList);\n    _this = _super.call(this, _props);\n    _this._virtualizedListPairs = [];\n    _this._captureRef = function (ref) {\n      _this._listRef = ref;\n    };\n    _this._getItem = function (data, index) {\n      var numColumns = numColumnsOrDefault(_this.props.numColumns);\n      if (numColumns > 1) {\n        var ret = [];\n        for (var kk = 0; kk < numColumns; kk++) {\n          var itemIndex = index * numColumns + kk;\n          if (itemIndex < data.length) {\n            var _item = data[itemIndex];\n            ret.push(_item);\n          }\n        }\n        return ret;\n      } else {\n        return data[index];\n      }\n    };\n    _this._getItemCount = function (data) {\n      if (data != null && isArrayLike(data)) {\n        var numColumns = numColumnsOrDefault(_this.props.numColumns);\n        return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;\n      } else {\n        return 0;\n      }\n    };\n    _this._keyExtractor = function (items, index) {\n      var _this$props$keyExtrac;\n      var numColumns = numColumnsOrDefault(_this.props.numColumns);\n      var keyExtractor = (_this$props$keyExtrac = _this.props.keyExtractor) != null ? _this$props$keyExtrac : defaultKeyExtractor;\n      if (numColumns > 1) {\n        invariant(Array.isArray(items), 'FlatList: Encountered internal consistency error, expected each item to consist of an ' + 'array with 1-%s columns; instead, received a single item.', numColumns);\n        return items.map(function (item, kk) {\n          return keyExtractor(item, index * numColumns + kk);\n        }).join(':');\n      }\n      return keyExtractor(items, index);\n    };\n    _this._renderer = function (ListItemComponent, renderItem, columnWrapperStyle, numColumns, extraData) {\n      var cols = numColumnsOrDefault(numColumns);\n      var render = function render(props) {\n        if (ListItemComponent) {\n          return _jsx(ListItemComponent, _objectSpread({}, props));\n        } else if (renderItem) {\n          return renderItem(props);\n        } else {\n          return null;\n        }\n      };\n      var renderProp = function renderProp(info) {\n        if (cols > 1) {\n          var _item2 = info.item,\n            _index = info.index;\n          invariant(Array.isArray(_item2), 'Expected array of items with numColumns > 1');\n          return _jsx(View, {\n            style: StyleSheet.compose(styles.row, columnWrapperStyle),\n            children: _item2.map(function (it, kk) {\n              var element = render({\n                item: it,\n                index: _index * cols + kk,\n                separators: info.separators\n              });\n              return element != null ? _jsx(React.Fragment, {\n                children: element\n              }, kk) : null;\n            })\n          });\n        } else {\n          return render(info);\n        }\n      };\n      return ListItemComponent ? {\n        ListItemComponent: renderProp\n      } : {\n        renderItem: renderProp\n      };\n    };\n    _this._memoizedRenderer = memoizeOne(_this._renderer);\n    _this._checkProps(_this.props);\n    if (_this.props.viewabilityConfigCallbackPairs) {\n      _this._virtualizedListPairs = _this.props.viewabilityConfigCallbackPairs.map(function (pair) {\n        return {\n          viewabilityConfig: pair.viewabilityConfig,\n          onViewableItemsChanged: _this._createOnViewableItemsChanged(pair.onViewableItemsChanged)\n        };\n      });\n    } else if (_this.props.onViewableItemsChanged) {\n      _this._virtualizedListPairs.push({\n        viewabilityConfig: _this.props.viewabilityConfig,\n        onViewableItemsChanged: _this._createOnViewableItemsChanged(_this.props.onViewableItemsChanged)\n      });\n    }\n    return _this;\n  }\n  _createClass(FlatList, [{\n    key: \"scrollToEnd\",\n    value: function scrollToEnd(params) {\n      if (this._listRef) {\n        this._listRef.scrollToEnd(params);\n      }\n    }\n  }, {\n    key: \"scrollToIndex\",\n    value: function scrollToIndex(params) {\n      if (this._listRef) {\n        this._listRef.scrollToIndex(params);\n      }\n    }\n  }, {\n    key: \"scrollToItem\",\n    value: function scrollToItem(params) {\n      if (this._listRef) {\n        this._listRef.scrollToItem(params);\n      }\n    }\n  }, {\n    key: \"scrollToOffset\",\n    value: function scrollToOffset(params) {\n      if (this._listRef) {\n        this._listRef.scrollToOffset(params);\n      }\n    }\n  }, {\n    key: \"recordInteraction\",\n    value: function recordInteraction() {\n      if (this._listRef) {\n        this._listRef.recordInteraction();\n      }\n    }\n  }, {\n    key: \"flashScrollIndicators\",\n    value: function flashScrollIndicators() {\n      if (this._listRef) {\n        this._listRef.flashScrollIndicators();\n      }\n    }\n  }, {\n    key: \"getScrollResponder\",\n    value: function getScrollResponder() {\n      if (this._listRef) {\n        return this._listRef.getScrollResponder();\n      }\n    }\n  }, {\n    key: \"getNativeScrollRef\",\n    value: function getNativeScrollRef() {\n      if (this._listRef) {\n        return this._listRef.getScrollRef();\n      }\n    }\n  }, {\n    key: \"getScrollableNode\",\n    value: function getScrollableNode() {\n      if (this._listRef) {\n        return this._listRef.getScrollableNode();\n      }\n    }\n  }, {\n    key: \"setNativeProps\",\n    value: function setNativeProps(props) {\n      if (this._listRef) {\n        this._listRef.setNativeProps(props);\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      invariant(prevProps.numColumns === this.props.numColumns, 'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' + 'changing the number of columns to force a fresh render of the component.');\n      invariant(prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged, 'Changing onViewableItemsChanged on the fly is not supported');\n      invariant(!deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig), 'Changing viewabilityConfig on the fly is not supported');\n      invariant(prevProps.viewabilityConfigCallbackPairs === this.props.viewabilityConfigCallbackPairs, 'Changing viewabilityConfigCallbackPairs on the fly is not supported');\n      this._checkProps(this.props);\n    }\n  }, {\n    key: \"_checkProps\",\n    value: function _checkProps(props) {\n      var getItem = props.getItem,\n        getItemCount = props.getItemCount,\n        horizontal = props.horizontal,\n        columnWrapperStyle = props.columnWrapperStyle,\n        onViewableItemsChanged = props.onViewableItemsChanged,\n        viewabilityConfigCallbackPairs = props.viewabilityConfigCallbackPairs;\n      var numColumns = numColumnsOrDefault(this.props.numColumns);\n      invariant(!getItem && !getItemCount, 'FlatList does not support custom data formats.');\n      if (numColumns > 1) {\n        invariant(!horizontal, 'numColumns does not support horizontal.');\n      } else {\n        invariant(!columnWrapperStyle, 'columnWrapperStyle not supported for single column lists');\n      }\n      invariant(!(onViewableItemsChanged && viewabilityConfigCallbackPairs), 'FlatList does not support setting both onViewableItemsChanged and ' + 'viewabilityConfigCallbackPairs.');\n    }\n  }, {\n    key: \"_pushMultiColumnViewable\",\n    value: function _pushMultiColumnViewable(arr, v) {\n      var _this$props$keyExtrac2;\n      var numColumns = numColumnsOrDefault(this.props.numColumns);\n      var keyExtractor = (_this$props$keyExtrac2 = this.props.keyExtractor) != null ? _this$props$keyExtrac2 : defaultKeyExtractor;\n      v.item.forEach(function (item, ii) {\n        invariant(v.index != null, 'Missing index!');\n        var index = v.index * numColumns + ii;\n        arr.push(_objectSpread(_objectSpread({}, v), {}, {\n          item: item,\n          key: keyExtractor(item, index),\n          index: index\n        }));\n      });\n    }\n  }, {\n    key: \"_createOnViewableItemsChanged\",\n    value: function _createOnViewableItemsChanged(onViewableItemsChanged) {\n      var _this2 = this;\n      return function (info) {\n        var numColumns = numColumnsOrDefault(_this2.props.numColumns);\n        if (onViewableItemsChanged) {\n          if (numColumns > 1) {\n            var changed = [];\n            var viewableItems = [];\n            info.viewableItems.forEach(function (v) {\n              return _this2._pushMultiColumnViewable(viewableItems, v);\n            });\n            info.changed.forEach(function (v) {\n              return _this2._pushMultiColumnViewable(changed, v);\n            });\n            onViewableItemsChanged({\n              viewableItems: viewableItems,\n              changed: changed\n            });\n          } else {\n            onViewableItemsChanged(info);\n          }\n        }\n      };\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n        numColumns = _this$props.numColumns,\n        columnWrapperStyle = _this$props.columnWrapperStyle,\n        _removeClippedSubviews = _this$props.removeClippedSubviews,\n        _this$props$strictMod = _this$props.strictMode,\n        strictMode = _this$props$strictMod === void 0 ? false : _this$props$strictMod,\n        restProps = _objectWithoutProperties(_this$props, _excluded);\n      var renderer = strictMode ? this._memoizedRenderer : this._renderer;\n      return _jsx(VirtualizedList, _objectSpread(_objectSpread({}, restProps), {}, {\n        getItem: this._getItem,\n        getItemCount: this._getItemCount,\n        keyExtractor: this._keyExtractor,\n        ref: this._captureRef,\n        viewabilityConfigCallbackPairs: this._virtualizedListPairs,\n        removeClippedSubviews: removeClippedSubviewsOrDefault(_removeClippedSubviews)\n      }, renderer(this.props.ListItemComponent, this.props.renderItem, columnWrapperStyle, numColumns, this.props.extraData)));\n    }\n  }]);\n  return FlatList;\n}(React.PureComponent);\nvar styles = StyleSheet.create({\n  row: {\n    flexDirection: 'row'\n  }\n});\nmodule.exports = FlatList;","map":{"version":3,"names":["VirtualizedList","keyExtractor","defaultKeyExtractor","memoizeOne","jsx","_jsx","View","require","StyleSheet","deepDiffer","Platform","invariant","React","removeClippedSubviewsOrDefault","removeClippedSubviews","OS","numColumnsOrDefault","numColumns","isArrayLike","data","Object","length","FlatList","_React$PureComponent","_inherits","_super","_createSuper","props","_this","_classCallCheck","call","_virtualizedListPairs","_captureRef","ref","_listRef","_getItem","index","ret","kk","itemIndex","item","push","_getItemCount","Math","ceil","_keyExtractor","items","_this$props$keyExtrac","Array","isArray","map","join","_renderer","ListItemComponent","renderItem","columnWrapperStyle","extraData","cols","render","_objectSpread","renderProp","info","style","compose","styles","row","children","it","element","separators","Fragment","_memoizedRenderer","_checkProps","viewabilityConfigCallbackPairs","pair","viewabilityConfig","onViewableItemsChanged","_createOnViewableItemsChanged","_createClass","key","value","scrollToEnd","params","scrollToIndex","scrollToItem","scrollToOffset","recordInteraction","flashScrollIndicators","getScrollResponder","getNativeScrollRef","getScrollRef","getScrollableNode","setNativeProps","componentDidUpdate","prevProps","getItem","getItemCount","horizontal","_pushMultiColumnViewable","arr","v","_this$props$keyExtrac2","forEach","ii","_this2","changed","viewableItems","_this$props","_removeClippedSubviews","_this$props$strictMod","strictMode","restProps","_objectWithoutProperties","_excluded","renderer","PureComponent","create","flexDirection","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Lists/FlatList.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n * @format\r\n */\r\n\r\nimport typeof ScrollViewNativeComponent from '../Components/ScrollView/ScrollViewNativeComponent';\r\nimport type {ViewStyleProp} from '../StyleSheet/StyleSheet';\r\nimport type {\r\n  RenderItemProps,\r\n  RenderItemType,\r\n  ViewabilityConfigCallbackPair,\r\n  ViewToken,\r\n} from '@react-native/virtualized-lists';\r\n\r\nimport {type ScrollResponderType} from '../Components/ScrollView/ScrollView';\r\nimport {\r\n  VirtualizedList,\r\n  keyExtractor as defaultKeyExtractor,\r\n} from '@react-native/virtualized-lists';\r\nimport memoizeOne from 'memoize-one';\r\n\r\nconst View = require('../Components/View/View');\r\nconst StyleSheet = require('../StyleSheet/StyleSheet');\r\nconst deepDiffer = require('../Utilities/differ/deepDiffer');\r\nconst Platform = require('../Utilities/Platform');\r\nconst invariant = require('invariant');\r\nconst React = require('react');\r\n\r\ntype RequiredProps<ItemT> = {|\r\n  /**\r\n   * An array (or array-like list) of items to render. Other data types can be\r\n   * used by targeting VirtualizedList directly.\r\n   */\r\n  data: ?$ArrayLike<ItemT>,\r\n|};\r\ntype OptionalProps<ItemT> = {|\r\n  /**\r\n   * Takes an item from `data` and renders it into the list. Example usage:\r\n   *\r\n   *     <FlatList\r\n   *       ItemSeparatorComponent={Platform.OS !== 'android' && ({highlighted}) => (\r\n   *         <View style={[style.separator, highlighted && {marginLeft: 0}]} />\r\n   *       )}\r\n   *       data={[{title: 'Title Text', key: 'item1'}]}\r\n   *       renderItem={({item, separators}) => (\r\n   *         <TouchableHighlight\r\n   *           onPress={() => this._onPress(item)}\r\n   *           onShowUnderlay={separators.highlight}\r\n   *           onHideUnderlay={separators.unhighlight}>\r\n   *           <View style={{backgroundColor: 'white'}}>\r\n   *             <Text>{item.title}</Text>\r\n   *           </View>\r\n   *         </TouchableHighlight>\r\n   *       )}\r\n   *     />\r\n   *\r\n   * Provides additional metadata like `index` if you need it, as well as a more generic\r\n   * `separators.updateProps` function which let's you set whatever props you want to change the\r\n   * rendering of either the leading separator or trailing separator in case the more common\r\n   * `highlight` and `unhighlight` (which set the `highlighted: boolean` prop) are insufficient for\r\n   * your use-case.\r\n   */\r\n  renderItem?: ?RenderItemType<ItemT>,\r\n\r\n  /**\r\n   * Optional custom style for multi-item rows generated when numColumns > 1.\r\n   */\r\n  columnWrapperStyle?: ViewStyleProp,\r\n  /**\r\n   * A marker property for telling the list to re-render (since it implements `PureComponent`). If\r\n   * any of your `renderItem`, Header, Footer, etc. functions depend on anything outside of the\r\n   * `data` prop, stick it here and treat it immutably.\r\n   */\r\n  extraData?: any,\r\n  /**\r\n   * `getItemLayout` is an optional optimizations that let us skip measurement of dynamic content if\r\n   * you know the height of items a priori. `getItemLayout` is the most efficient, and is easy to\r\n   * use if you have fixed height items, for example:\r\n   *\r\n   *     getItemLayout={(data, index) => (\r\n   *       {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}\r\n   *     )}\r\n   *\r\n   * Adding `getItemLayout` can be a great performance boost for lists of several hundred items.\r\n   * Remember to include separator length (height or width) in your offset calculation if you\r\n   * specify `ItemSeparatorComponent`.\r\n   */\r\n  getItemLayout?: (\r\n    data: ?$ArrayLike<ItemT>,\r\n    index: number,\r\n  ) => {\r\n    length: number,\r\n    offset: number,\r\n    index: number,\r\n    ...\r\n  },\r\n  /**\r\n   * If true, renders items next to each other horizontally instead of stacked vertically.\r\n   */\r\n  horizontal?: ?boolean,\r\n  /**\r\n   * How many items to render in the initial batch. This should be enough to fill the screen but not\r\n   * much more. Note these items will never be unmounted as part of the windowed rendering in order\r\n   * to improve perceived performance of scroll-to-top actions.\r\n   */\r\n  initialNumToRender?: ?number,\r\n  /**\r\n   * Instead of starting at the top with the first item, start at `initialScrollIndex`. This\r\n   * disables the \"scroll to top\" optimization that keeps the first `initialNumToRender` items\r\n   * always rendered and immediately renders the items starting at this initial index. Requires\r\n   * `getItemLayout` to be implemented.\r\n   */\r\n  initialScrollIndex?: ?number,\r\n  /**\r\n   * Reverses the direction of scroll. Uses scale transforms of -1.\r\n   */\r\n  inverted?: ?boolean,\r\n  /**\r\n   * Used to extract a unique key for a given item at the specified index. Key is used for caching\r\n   * and as the react key to track item re-ordering. The default extractor checks `item.key`, then\r\n   * falls back to using the index, like React does.\r\n   */\r\n  keyExtractor?: ?(item: ItemT, index: number) => string,\r\n  /**\r\n   * Multiple columns can only be rendered with `horizontal={false}` and will zig-zag like a\r\n   * `flexWrap` layout. Items should all be the same height - masonry layouts are not supported.\r\n   *\r\n   * The default value is 1.\r\n   */\r\n  numColumns?: number,\r\n  /**\r\n   * Note: may have bugs (missing content) in some circumstances - use at your own risk.\r\n   *\r\n   * This may improve scroll performance for large lists.\r\n   *\r\n   * The default value is true for Android.\r\n   */\r\n  removeClippedSubviews?: boolean,\r\n  /**\r\n   * See `ScrollView` for flow type and further documentation.\r\n   */\r\n  fadingEdgeLength?: ?number,\r\n  /**\r\n   * Enable an optimization to memoize the item renderer to prevent unnecessary rerenders.\r\n   */\r\n  strictMode?: boolean,\r\n|};\r\n\r\n/**\r\n * Default Props Helper Functions\r\n * Use the following helper functions for default values\r\n */\r\n\r\n// removeClippedSubviewsOrDefault(this.props.removeClippedSubviews)\r\nfunction removeClippedSubviewsOrDefault(removeClippedSubviews: ?boolean) {\r\n  return removeClippedSubviews ?? Platform.OS === 'android';\r\n}\r\n\r\n// numColumnsOrDefault(this.props.numColumns)\r\nfunction numColumnsOrDefault(numColumns: ?number) {\r\n  return numColumns ?? 1;\r\n}\r\n\r\nfunction isArrayLike(data: mixed): boolean {\r\n  // $FlowExpectedError[incompatible-use]\r\n  return typeof Object(data).length === 'number';\r\n}\r\n\r\ntype FlatListProps<ItemT> = {|\r\n  ...RequiredProps<ItemT>,\r\n  ...OptionalProps<ItemT>,\r\n|};\r\n\r\ntype VirtualizedListProps = React.ElementConfig<typeof VirtualizedList>;\r\n\r\nexport type Props<ItemT> = {\r\n  ...$Diff<\r\n    VirtualizedListProps,\r\n    {\r\n      getItem: $PropertyType<VirtualizedListProps, 'getItem'>,\r\n      getItemCount: $PropertyType<VirtualizedListProps, 'getItemCount'>,\r\n      getItemLayout: $PropertyType<VirtualizedListProps, 'getItemLayout'>,\r\n      renderItem: $PropertyType<VirtualizedListProps, 'renderItem'>,\r\n      keyExtractor: $PropertyType<VirtualizedListProps, 'keyExtractor'>,\r\n      ...\r\n    },\r\n  >,\r\n  ...FlatListProps<ItemT>,\r\n  ...\r\n};\r\n\r\n/**\r\n * A performant interface for rendering simple, flat lists, supporting the most handy features:\r\n *\r\n *  - Fully cross-platform.\r\n *  - Optional horizontal mode.\r\n *  - Configurable viewability callbacks.\r\n *  - Header support.\r\n *  - Footer support.\r\n *  - Separator support.\r\n *  - Pull to Refresh.\r\n *  - Scroll loading.\r\n *  - ScrollToIndex support.\r\n *\r\n * If you need section support, use [`<SectionList>`](docs/sectionlist.html).\r\n *\r\n * Minimal Example:\r\n *\r\n *     <FlatList\r\n *       data={[{key: 'a'}, {key: 'b'}]}\r\n *       renderItem={({item}) => <Text>{item.key}</Text>}\r\n *     />\r\n *\r\n * More complex, multi-select example demonstrating `PureComponent` usage for perf optimization and avoiding bugs.\r\n *\r\n * - By binding the `onPressItem` handler, the props will remain `===` and `PureComponent` will\r\n *   prevent wasteful re-renders unless the actual `id`, `selected`, or `title` props change, even\r\n *   if the components rendered in `MyListItem` did not have such optimizations.\r\n * - By passing `extraData={this.state}` to `FlatList` we make sure `FlatList` itself will re-render\r\n *   when the `state.selected` changes. Without setting this prop, `FlatList` would not know it\r\n *   needs to re-render any items because it is also a `PureComponent` and the prop comparison will\r\n *   not show any changes.\r\n * - `keyExtractor` tells the list to use the `id`s for the react keys instead of the default `key` property.\r\n *\r\n *\r\n *     class MyListItem extends React.PureComponent {\r\n *       _onPress = () => {\r\n *         this.props.onPressItem(this.props.id);\r\n *       };\r\n *\r\n *       render() {\r\n *         const textColor = this.props.selected ? \"red\" : \"black\";\r\n *         return (\r\n *           <TouchableOpacity onPress={this._onPress}>\r\n *             <View>\r\n *               <Text style={{ color: textColor }}>\r\n *                 {this.props.title}\r\n *               </Text>\r\n *             </View>\r\n *           </TouchableOpacity>\r\n *         );\r\n *       }\r\n *     }\r\n *\r\n *     class MultiSelectList extends React.PureComponent {\r\n *       state = {selected: (new Map(): Map<string, boolean>)};\r\n *\r\n *       _keyExtractor = (item, index) => item.id;\r\n *\r\n *       _onPressItem = (id: string) => {\r\n *         // updater functions are preferred for transactional updates\r\n *         this.setState((state) => {\r\n *           // copy the map rather than modifying state.\r\n *           const selected = new Map(state.selected);\r\n *           selected.set(id, !selected.get(id)); // toggle\r\n *           return {selected};\r\n *         });\r\n *       };\r\n *\r\n *       _renderItem = ({item}) => (\r\n *         <MyListItem\r\n *           id={item.id}\r\n *           onPressItem={this._onPressItem}\r\n *           selected={!!this.state.selected.get(item.id)}\r\n *           title={item.title}\r\n *         />\r\n *       );\r\n *\r\n *       render() {\r\n *         return (\r\n *           <FlatList\r\n *             data={this.props.data}\r\n *             extraData={this.state}\r\n *             keyExtractor={this._keyExtractor}\r\n *             renderItem={this._renderItem}\r\n *           />\r\n *         );\r\n *       }\r\n *     }\r\n *\r\n * This is a convenience wrapper around [`<VirtualizedList>`](docs/virtualizedlist.html),\r\n * and thus inherits its props (as well as those of `ScrollView`) that aren't explicitly listed\r\n * here, along with the following caveats:\r\n *\r\n * - Internal state is not preserved when content scrolls out of the render window. Make sure all\r\n *   your data is captured in the item data or external stores like Flux, Redux, or Relay.\r\n * - This is a `PureComponent` which means that it will not re-render if `props` remain shallow-\r\n *   equal. Make sure that everything your `renderItem` function depends on is passed as a prop\r\n *   (e.g. `extraData`) that is not `===` after updates, otherwise your UI may not update on\r\n *   changes. This includes the `data` prop and parent component state.\r\n * - In order to constrain memory and enable smooth scrolling, content is rendered asynchronously\r\n *   offscreen. This means it's possible to scroll faster than the fill rate ands momentarily see\r\n *   blank content. This is a tradeoff that can be adjusted to suit the needs of each application,\r\n *   and we are working on improving it behind the scenes.\r\n * - By default, the list looks for a `key` prop on each item and uses that for the React key.\r\n *   Alternatively, you can provide a custom `keyExtractor` prop.\r\n *\r\n * Also inherits [ScrollView Props](docs/scrollview.html#props), unless it is nested in another FlatList of same orientation.\r\n */\r\nclass FlatList<ItemT> extends React.PureComponent<Props<ItemT>, void> {\r\n  props: Props<ItemT>;\r\n  /**\r\n   * Scrolls to the end of the content. May be janky without `getItemLayout` prop.\r\n   */\r\n  scrollToEnd(params?: ?{animated?: ?boolean, ...}) {\r\n    if (this._listRef) {\r\n      this._listRef.scrollToEnd(params);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scrolls to the item at the specified index such that it is positioned in the viewable area\r\n   * such that `viewPosition` 0 places it at the top, 1 at the bottom, and 0.5 centered in the\r\n   * middle. `viewOffset` is a fixed number of pixels to offset the final target position.\r\n   *\r\n   * Note: cannot scroll to locations outside the render window without specifying the\r\n   * `getItemLayout` prop.\r\n   */\r\n  scrollToIndex(params: {\r\n    animated?: ?boolean,\r\n    index: number,\r\n    viewOffset?: number,\r\n    viewPosition?: number,\r\n    ...\r\n  }) {\r\n    if (this._listRef) {\r\n      this._listRef.scrollToIndex(params);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Requires linear scan through data - use `scrollToIndex` instead if possible.\r\n   *\r\n   * Note: cannot scroll to locations outside the render window without specifying the\r\n   * `getItemLayout` prop.\r\n   */\r\n  scrollToItem(params: {\r\n    animated?: ?boolean,\r\n    item: ItemT,\r\n    viewOffset?: number,\r\n    viewPosition?: number,\r\n    ...\r\n  }) {\r\n    if (this._listRef) {\r\n      this._listRef.scrollToItem(params);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Scroll to a specific content pixel offset in the list.\r\n   *\r\n   * Check out [scrollToOffset](docs/virtualizedlist.html#scrolltooffset) of VirtualizedList\r\n   */\r\n  scrollToOffset(params: {animated?: ?boolean, offset: number, ...}) {\r\n    if (this._listRef) {\r\n      this._listRef.scrollToOffset(params);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tells the list an interaction has occurred, which should trigger viewability calculations, e.g.\r\n   * if `waitForInteractions` is true and the user has not scrolled. This is typically called by\r\n   * taps on items or by navigation actions.\r\n   */\r\n  recordInteraction() {\r\n    if (this._listRef) {\r\n      this._listRef.recordInteraction();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Displays the scroll indicators momentarily.\r\n   *\r\n   * @platform ios\r\n   */\r\n  flashScrollIndicators() {\r\n    if (this._listRef) {\r\n      this._listRef.flashScrollIndicators();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Provides a handle to the underlying scroll responder.\r\n   */\r\n  getScrollResponder(): ?ScrollResponderType {\r\n    if (this._listRef) {\r\n      return this._listRef.getScrollResponder();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Provides a reference to the underlying host component\r\n   */\r\n  getNativeScrollRef():\r\n    | ?React.ElementRef<typeof View>\r\n    | ?React.ElementRef<ScrollViewNativeComponent> {\r\n    if (this._listRef) {\r\n      /* $FlowFixMe[incompatible-return] Suppresses errors found when fixing\r\n       * TextInput typing */\r\n      return this._listRef.getScrollRef();\r\n    }\r\n  }\r\n\r\n  getScrollableNode(): any {\r\n    if (this._listRef) {\r\n      return this._listRef.getScrollableNode();\r\n    }\r\n  }\r\n\r\n  setNativeProps(props: {[string]: mixed, ...}) {\r\n    if (this._listRef) {\r\n      this._listRef.setNativeProps(props);\r\n    }\r\n  }\r\n\r\n  constructor(props: Props<ItemT>) {\r\n    super(props);\r\n    this._checkProps(this.props);\r\n    if (this.props.viewabilityConfigCallbackPairs) {\r\n      this._virtualizedListPairs =\r\n        this.props.viewabilityConfigCallbackPairs.map(pair => ({\r\n          viewabilityConfig: pair.viewabilityConfig,\r\n          onViewableItemsChanged: this._createOnViewableItemsChanged(\r\n            pair.onViewableItemsChanged,\r\n          ),\r\n        }));\r\n    } else if (this.props.onViewableItemsChanged) {\r\n      this._virtualizedListPairs.push({\r\n        /* $FlowFixMe[incompatible-call] (>=0.63.0 site=react_native_fb) This\r\n         * comment suppresses an error found when Flow v0.63 was deployed. To\r\n         * see the error delete this comment and run Flow. */\r\n        viewabilityConfig: this.props.viewabilityConfig,\r\n        onViewableItemsChanged: this._createOnViewableItemsChanged(\r\n          this.props.onViewableItemsChanged,\r\n        ),\r\n      });\r\n    }\r\n  }\r\n\r\n  // $FlowFixMe[missing-local-annot]\r\n  componentDidUpdate(prevProps: Props<ItemT>) {\r\n    invariant(\r\n      prevProps.numColumns === this.props.numColumns,\r\n      'Changing numColumns on the fly is not supported. Change the key prop on FlatList when ' +\r\n        'changing the number of columns to force a fresh render of the component.',\r\n    );\r\n    invariant(\r\n      prevProps.onViewableItemsChanged === this.props.onViewableItemsChanged,\r\n      'Changing onViewableItemsChanged on the fly is not supported',\r\n    );\r\n    invariant(\r\n      !deepDiffer(prevProps.viewabilityConfig, this.props.viewabilityConfig),\r\n      'Changing viewabilityConfig on the fly is not supported',\r\n    );\r\n    invariant(\r\n      prevProps.viewabilityConfigCallbackPairs ===\r\n        this.props.viewabilityConfigCallbackPairs,\r\n      'Changing viewabilityConfigCallbackPairs on the fly is not supported',\r\n    );\r\n\r\n    this._checkProps(this.props);\r\n  }\r\n\r\n  _listRef: ?React.ElementRef<typeof VirtualizedList>;\r\n  _virtualizedListPairs: Array<ViewabilityConfigCallbackPair> = [];\r\n\r\n  _captureRef = (ref: ?React.ElementRef<typeof VirtualizedList>) => {\r\n    this._listRef = ref;\r\n  };\r\n\r\n  // $FlowFixMe[missing-local-annot]\r\n  _checkProps(props: Props<ItemT>) {\r\n    const {\r\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\r\n      getItem,\r\n      // $FlowFixMe[prop-missing] this prop doesn't exist, is only used for an invariant\r\n      getItemCount,\r\n      horizontal,\r\n      columnWrapperStyle,\r\n      onViewableItemsChanged,\r\n      viewabilityConfigCallbackPairs,\r\n    } = props;\r\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\r\n    invariant(\r\n      !getItem && !getItemCount,\r\n      'FlatList does not support custom data formats.',\r\n    );\r\n    if (numColumns > 1) {\r\n      invariant(!horizontal, 'numColumns does not support horizontal.');\r\n    } else {\r\n      invariant(\r\n        !columnWrapperStyle,\r\n        'columnWrapperStyle not supported for single column lists',\r\n      );\r\n    }\r\n    invariant(\r\n      !(onViewableItemsChanged && viewabilityConfigCallbackPairs),\r\n      'FlatList does not support setting both onViewableItemsChanged and ' +\r\n        'viewabilityConfigCallbackPairs.',\r\n    );\r\n  }\r\n\r\n  _getItem = (\r\n    data: $ArrayLike<ItemT>,\r\n    index: number,\r\n  ): ?(ItemT | $ReadOnlyArray<ItemT>) => {\r\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\r\n    if (numColumns > 1) {\r\n      const ret = [];\r\n      for (let kk = 0; kk < numColumns; kk++) {\r\n        const itemIndex = index * numColumns + kk;\r\n        if (itemIndex < data.length) {\r\n          const item = data[itemIndex];\r\n          ret.push(item);\r\n        }\r\n      }\r\n      return ret;\r\n    } else {\r\n      return data[index];\r\n    }\r\n  };\r\n\r\n  _getItemCount = (data: ?$ArrayLike<ItemT>): number => {\r\n    // Legacy behavior of FlatList was to forward \"undefined\" length if invalid\r\n    // data like a non-arraylike object is passed. VirtualizedList would then\r\n    // coerce this, and the math would work out to no-op. For compatibility, if\r\n    // invalid data is passed, we tell VirtualizedList there are zero items\r\n    // available to prevent it from trying to read from the invalid data\r\n    // (without propagating invalidly typed data).\r\n    if (data != null && isArrayLike(data)) {\r\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\r\n      return numColumns > 1 ? Math.ceil(data.length / numColumns) : data.length;\r\n    } else {\r\n      return 0;\r\n    }\r\n  };\r\n\r\n  _keyExtractor = (items: ItemT | Array<ItemT>, index: number): string => {\r\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\r\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\r\n\r\n    if (numColumns > 1) {\r\n      invariant(\r\n        Array.isArray(items),\r\n        'FlatList: Encountered internal consistency error, expected each item to consist of an ' +\r\n          'array with 1-%s columns; instead, received a single item.',\r\n        numColumns,\r\n      );\r\n      return items\r\n        .map((item, kk) =>\r\n          keyExtractor(((item: $FlowFixMe): ItemT), index * numColumns + kk),\r\n        )\r\n        .join(':');\r\n    }\r\n\r\n    // $FlowFixMe[incompatible-call] Can't call keyExtractor with an array\r\n    return keyExtractor(items, index);\r\n  };\r\n\r\n  _pushMultiColumnViewable(arr: Array<ViewToken>, v: ViewToken): void {\r\n    const numColumns = numColumnsOrDefault(this.props.numColumns);\r\n    const keyExtractor = this.props.keyExtractor ?? defaultKeyExtractor;\r\n    v.item.forEach((item, ii) => {\r\n      invariant(v.index != null, 'Missing index!');\r\n      const index = v.index * numColumns + ii;\r\n      arr.push({...v, item, key: keyExtractor(item, index), index});\r\n    });\r\n  }\r\n\r\n  _createOnViewableItemsChanged(\r\n    onViewableItemsChanged: ?(info: {\r\n      viewableItems: Array<ViewToken>,\r\n      changed: Array<ViewToken>,\r\n      ...\r\n    }) => void,\r\n    // $FlowFixMe[missing-local-annot]\r\n  ) {\r\n    return (info: {\r\n      viewableItems: Array<ViewToken>,\r\n      changed: Array<ViewToken>,\r\n      ...\r\n    }) => {\r\n      const numColumns = numColumnsOrDefault(this.props.numColumns);\r\n      if (onViewableItemsChanged) {\r\n        if (numColumns > 1) {\r\n          const changed: Array<ViewToken> = [];\r\n          const viewableItems: Array<ViewToken> = [];\r\n          info.viewableItems.forEach(v =>\r\n            this._pushMultiColumnViewable(viewableItems, v),\r\n          );\r\n          info.changed.forEach(v => this._pushMultiColumnViewable(changed, v));\r\n          onViewableItemsChanged({viewableItems, changed});\r\n        } else {\r\n          onViewableItemsChanged(info);\r\n        }\r\n      }\r\n    };\r\n  }\r\n\r\n  _renderer = (\r\n    ListItemComponent: ?(React.ComponentType<any> | React.Element<any>),\r\n    renderItem: ?RenderItemType<ItemT>,\r\n    columnWrapperStyle: ?ViewStyleProp,\r\n    numColumns: ?number,\r\n    extraData: ?any,\r\n    // $FlowFixMe[missing-local-annot]\r\n  ) => {\r\n    const cols = numColumnsOrDefault(numColumns);\r\n\r\n    const render = (props: RenderItemProps<ItemT>): React.Node => {\r\n      if (ListItemComponent) {\r\n        // $FlowFixMe[not-a-component] Component isn't valid\r\n        // $FlowFixMe[incompatible-type-arg] Component isn't valid\r\n        // $FlowFixMe[incompatible-return] Component isn't valid\r\n        return <ListItemComponent {...props} />;\r\n      } else if (renderItem) {\r\n        // $FlowFixMe[incompatible-call]\r\n        return renderItem(props);\r\n      } else {\r\n        return null;\r\n      }\r\n    };\r\n\r\n    const renderProp = (info: RenderItemProps<ItemT>) => {\r\n      if (cols > 1) {\r\n        const {item, index} = info;\r\n        invariant(\r\n          Array.isArray(item),\r\n          'Expected array of items with numColumns > 1',\r\n        );\r\n        return (\r\n          <View style={StyleSheet.compose(styles.row, columnWrapperStyle)}>\r\n            {item.map((it, kk) => {\r\n              const element = render({\r\n                // $FlowFixMe[incompatible-call]\r\n                item: it,\r\n                index: index * cols + kk,\r\n                separators: info.separators,\r\n              });\r\n              return element != null ? (\r\n                <React.Fragment key={kk}>{element}</React.Fragment>\r\n              ) : null;\r\n            })}\r\n          </View>\r\n        );\r\n      } else {\r\n        return render(info);\r\n      }\r\n    };\r\n\r\n    return ListItemComponent\r\n      ? {ListItemComponent: renderProp}\r\n      : {renderItem: renderProp};\r\n  };\r\n\r\n  // $FlowFixMe[missing-local-annot]\r\n  _memoizedRenderer = memoizeOne(this._renderer);\r\n\r\n  render(): React.Node {\r\n    const {\r\n      numColumns,\r\n      columnWrapperStyle,\r\n      removeClippedSubviews: _removeClippedSubviews,\r\n      strictMode = false,\r\n      ...restProps\r\n    } = this.props;\r\n\r\n    const renderer = strictMode ? this._memoizedRenderer : this._renderer;\r\n\r\n    return (\r\n      // $FlowFixMe[incompatible-exact] - `restProps` (`Props`) is inexact.\r\n      <VirtualizedList\r\n        {...restProps}\r\n        getItem={this._getItem}\r\n        getItemCount={this._getItemCount}\r\n        keyExtractor={this._keyExtractor}\r\n        ref={this._captureRef}\r\n        viewabilityConfigCallbackPairs={this._virtualizedListPairs}\r\n        removeClippedSubviews={removeClippedSubviewsOrDefault(\r\n          _removeClippedSubviews,\r\n        )}\r\n        {...renderer(\r\n          this.props.ListItemComponent,\r\n          this.props.renderItem,\r\n          columnWrapperStyle,\r\n          numColumns,\r\n          this.props.extraData,\r\n        )}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  row: {flexDirection: 'row'},\r\n});\r\n\r\nmodule.exports = FlatList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}