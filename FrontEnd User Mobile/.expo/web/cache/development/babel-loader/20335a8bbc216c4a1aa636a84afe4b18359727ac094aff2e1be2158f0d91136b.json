{"ast":null,"code":"import * as TurboModuleRegistry from \"../TurboModule/TurboModuleRegistry\";\nvar Platform = require(\"../Utilities/Platform\");\nvar NativeModule = TurboModuleRegistry.getEnforcing('ExceptionsManager');\nvar ExceptionsManager = {\n  reportFatalException: function reportFatalException(message, stack, exceptionId) {\n    NativeModule.reportFatalException(message, stack, exceptionId);\n  },\n  reportSoftException: function reportSoftException(message, stack, exceptionId) {\n    NativeModule.reportSoftException(message, stack, exceptionId);\n  },\n  updateExceptionMessage: function updateExceptionMessage(message, stack, exceptionId) {\n    NativeModule.updateExceptionMessage(message, stack, exceptionId);\n  },\n  dismissRedbox: function dismissRedbox() {\n    if (Platform.OS !== 'ios' && NativeModule.dismissRedbox) {\n      NativeModule.dismissRedbox();\n    }\n  },\n  reportException: function reportException(data) {\n    if (NativeModule.reportException) {\n      NativeModule.reportException(data);\n      return;\n    }\n    if (data.isFatal) {\n      ExceptionsManager.reportFatalException(data.message, data.stack, data.id);\n    } else {\n      ExceptionsManager.reportSoftException(data.message, data.stack, data.id);\n    }\n  }\n};\nexport default ExceptionsManager;","map":{"version":3,"names":["TurboModuleRegistry","Platform","require","NativeModule","getEnforcing","ExceptionsManager","reportFatalException","message","stack","exceptionId","reportSoftException","updateExceptionMessage","dismissRedbox","OS","reportException","data","isFatal","id"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Core/NativeExceptionsManager.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow strict\r\n * @format\r\n */\r\n\r\nimport type {TurboModule} from '../TurboModule/RCTExport';\r\n\r\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\r\n\r\nconst Platform = require('../Utilities/Platform');\r\n\r\nexport type StackFrame = {|\r\n  column: ?number,\r\n  file: ?string,\r\n  lineNumber: ?number,\r\n  methodName: string,\r\n  collapse?: boolean,\r\n|};\r\nexport type ExceptionData = {\r\n  message: string,\r\n  originalMessage: ?string,\r\n  name: ?string,\r\n  componentStack: ?string,\r\n  stack: Array<StackFrame>,\r\n  id: number,\r\n  isFatal: boolean,\r\n  // flowlint-next-line unclear-type:off\r\n  extraData?: Object,\r\n  ...\r\n};\r\nexport interface Spec extends TurboModule {\r\n  // Deprecated: Use `reportException`\r\n  +reportFatalException: (\r\n    message: string,\r\n    stack: Array<StackFrame>,\r\n    exceptionId: number,\r\n  ) => void;\r\n  // Deprecated: Use `reportException`\r\n  +reportSoftException: (\r\n    message: string,\r\n    stack: Array<StackFrame>,\r\n    exceptionId: number,\r\n  ) => void;\r\n  +reportException?: (data: ExceptionData) => void;\r\n  +updateExceptionMessage: (\r\n    message: string,\r\n    stack: Array<StackFrame>,\r\n    exceptionId: number,\r\n  ) => void;\r\n  // TODO(T53311281): This is a noop on iOS now. Implement it.\r\n  +dismissRedbox?: () => void;\r\n}\r\n\r\nconst NativeModule =\r\n  TurboModuleRegistry.getEnforcing<Spec>('ExceptionsManager');\r\n\r\nconst ExceptionsManager = {\r\n  reportFatalException(\r\n    message: string,\r\n    stack: Array<StackFrame>,\r\n    exceptionId: number,\r\n  ) {\r\n    NativeModule.reportFatalException(message, stack, exceptionId);\r\n  },\r\n  reportSoftException(\r\n    message: string,\r\n    stack: Array<StackFrame>,\r\n    exceptionId: number,\r\n  ) {\r\n    NativeModule.reportSoftException(message, stack, exceptionId);\r\n  },\r\n  updateExceptionMessage(\r\n    message: string,\r\n    stack: Array<StackFrame>,\r\n    exceptionId: number,\r\n  ) {\r\n    NativeModule.updateExceptionMessage(message, stack, exceptionId);\r\n  },\r\n  dismissRedbox(): void {\r\n    if (Platform.OS !== 'ios' && NativeModule.dismissRedbox) {\r\n      // TODO(T53311281): This is a noop on iOS now. Implement it.\r\n      NativeModule.dismissRedbox();\r\n    }\r\n  },\r\n  reportException(data: ExceptionData): void {\r\n    if (NativeModule.reportException) {\r\n      NativeModule.reportException(data);\r\n      return;\r\n    }\r\n    if (data.isFatal) {\r\n      ExceptionsManager.reportFatalException(data.message, data.stack, data.id);\r\n    } else {\r\n      ExceptionsManager.reportSoftException(data.message, data.stack, data.id);\r\n    }\r\n  },\r\n};\r\n\r\nexport default ExceptionsManager;\r\n"],"mappings":"AAYA,OAAO,KAAKA,mBAAmB;AAE/B,IAAMC,QAAQ,GAAGC,OAAO,wBAAwB,CAAC;AA4CjD,IAAMC,YAAY,GAChBH,mBAAmB,CAACI,YAAY,CAAO,mBAAmB,CAAC;AAE7D,IAAMC,iBAAiB,GAAG;EACxBC,oBAAoB,WAAAA,qBAClBC,OAAe,EACfC,KAAwB,EACxBC,WAAmB,EACnB;IACAN,YAAY,CAACG,oBAAoB,CAACC,OAAO,EAAEC,KAAK,EAAEC,WAAW,CAAC;EAChE,CAAC;EACDC,mBAAmB,WAAAA,oBACjBH,OAAe,EACfC,KAAwB,EACxBC,WAAmB,EACnB;IACAN,YAAY,CAACO,mBAAmB,CAACH,OAAO,EAAEC,KAAK,EAAEC,WAAW,CAAC;EAC/D,CAAC;EACDE,sBAAsB,WAAAA,uBACpBJ,OAAe,EACfC,KAAwB,EACxBC,WAAmB,EACnB;IACAN,YAAY,CAACQ,sBAAsB,CAACJ,OAAO,EAAEC,KAAK,EAAEC,WAAW,CAAC;EAClE,CAAC;EACDG,aAAa,WAAAA,cAAA,EAAS;IACpB,IAAIX,QAAQ,CAACY,EAAE,KAAK,KAAK,IAAIV,YAAY,CAACS,aAAa,EAAE;MAEvDT,YAAY,CAACS,aAAa,CAAC,CAAC;IAC9B;EACF,CAAC;EACDE,eAAe,WAAAA,gBAACC,IAAmB,EAAQ;IACzC,IAAIZ,YAAY,CAACW,eAAe,EAAE;MAChCX,YAAY,CAACW,eAAe,CAACC,IAAI,CAAC;MAClC;IACF;IACA,IAAIA,IAAI,CAACC,OAAO,EAAE;MAChBX,iBAAiB,CAACC,oBAAoB,CAACS,IAAI,CAACR,OAAO,EAAEQ,IAAI,CAACP,KAAK,EAAEO,IAAI,CAACE,EAAE,CAAC;IAC3E,CAAC,MAAM;MACLZ,iBAAiB,CAACK,mBAAmB,CAACK,IAAI,CAACR,OAAO,EAAEQ,IAAI,CAACP,KAAK,EAAEO,IAAI,CAACE,EAAE,CAAC;IAC1E;EACF;AACF,CAAC;AAED,eAAeZ,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}