{"ast":null,"code":"import requireNativeComponent from \"../../Libraries/ReactNative/requireNativeComponent\";\nimport UIManager from \"../ReactNative/UIManager\";\nfunction codegenNativeComponent(componentName, options) {\n  if (global.RN$Bridgeless === true) {\n    var errorMessage = \"Native Component '\" + componentName + \"' that calls codegenNativeComponent was not code generated at build time. Please check its definition.\";\n    console.error(errorMessage);\n  }\n  var componentNameInUse = options && options.paperComponentName != null ? options.paperComponentName : componentName;\n  if (options != null && options.paperComponentNameDeprecated != null) {\n    if (UIManager.hasViewManagerConfig(componentName)) {\n      componentNameInUse = componentName;\n    } else if (options.paperComponentNameDeprecated != null && UIManager.hasViewManagerConfig(options.paperComponentNameDeprecated)) {\n      componentNameInUse = options.paperComponentNameDeprecated;\n    } else {\n      var _options$paperCompone;\n      throw new Error(`Failed to find native component for either ${componentName} or ${(_options$paperCompone = options.paperComponentNameDeprecated) != null ? _options$paperCompone : '(unknown)'}`);\n    }\n  }\n  return requireNativeComponent(componentNameInUse);\n}\nexport default codegenNativeComponent;","map":{"version":3,"names":["requireNativeComponent","UIManager","codegenNativeComponent","componentName","options","global","RN$Bridgeless","errorMessage","console","error","componentNameInUse","paperComponentName","paperComponentNameDeprecated","hasViewManagerConfig","_options$paperCompone","Error"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Utilities/codegenNativeComponent.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\n// TODO: move this file to shims/ReactNative (requires React update and sync)\r\n\r\nimport type {HostComponent} from '../../Libraries/Renderer/shims/ReactNativeTypes';\r\n\r\nimport requireNativeComponent from '../../Libraries/ReactNative/requireNativeComponent';\r\nimport UIManager from '../ReactNative/UIManager';\r\n\r\n// TODO: import from CodegenSchema once workspaces are enabled\r\ntype Options = $ReadOnly<{|\r\n  interfaceOnly?: boolean,\r\n  paperComponentName?: string,\r\n  paperComponentNameDeprecated?: string,\r\n  excludedPlatforms?: $ReadOnlyArray<'iOS' | 'android'>,\r\n|}>;\r\n\r\nexport type NativeComponentType<T> = HostComponent<T>;\r\n\r\n// If this function runs then that means the view configs were not\r\n// generated at build time using `GenerateViewConfigJs.js`. Thus\r\n// we need to `requireNativeComponent` to get the view configs from view managers.\r\n// `requireNativeComponent` is not available in Bridgeless mode.\r\n// e.g. This function runs at runtime if `codegenNativeComponent` was not called\r\n// from a file suffixed with NativeComponent.js.\r\nfunction codegenNativeComponent<Props>(\r\n  componentName: string,\r\n  options?: Options,\r\n): NativeComponentType<Props> {\r\n  if (global.RN$Bridgeless === true) {\r\n    const errorMessage =\r\n      \"Native Component '\" +\r\n      componentName +\r\n      \"' that calls codegenNativeComponent was not code generated at build time. Please check its definition.\";\r\n    console.error(errorMessage);\r\n  }\r\n\r\n  let componentNameInUse =\r\n    options && options.paperComponentName != null\r\n      ? options.paperComponentName\r\n      : componentName;\r\n\r\n  if (options != null && options.paperComponentNameDeprecated != null) {\r\n    if (UIManager.hasViewManagerConfig(componentName)) {\r\n      componentNameInUse = componentName;\r\n    } else if (\r\n      options.paperComponentNameDeprecated != null &&\r\n      UIManager.hasViewManagerConfig(options.paperComponentNameDeprecated)\r\n    ) {\r\n      // $FlowFixMe[incompatible-type]\r\n      componentNameInUse = options.paperComponentNameDeprecated;\r\n    } else {\r\n      throw new Error(\r\n        `Failed to find native component for either ${componentName} or ${\r\n          options.paperComponentNameDeprecated ?? '(unknown)'\r\n        }`,\r\n      );\r\n    }\r\n  }\r\n\r\n  return (requireNativeComponent<Props>(\r\n    // $FlowFixMe[incompatible-call]\r\n    componentNameInUse,\r\n  ): HostComponent<Props>);\r\n}\r\n\r\nexport default codegenNativeComponent;\r\n"],"mappings":"AAcA,OAAOA,sBAAsB;AAC7B,OAAOC,SAAS;AAkBhB,SAASC,sBAAsBA,CAC7BC,aAAqB,EACrBC,OAAiB,EACW;EAC5B,IAAIC,MAAM,CAACC,aAAa,KAAK,IAAI,EAAE;IACjC,IAAMC,YAAY,GAChB,oBAAoB,GACpBJ,aAAa,GACb,wGAAwG;IAC1GK,OAAO,CAACC,KAAK,CAACF,YAAY,CAAC;EAC7B;EAEA,IAAIG,kBAAkB,GACpBN,OAAO,IAAIA,OAAO,CAACO,kBAAkB,IAAI,IAAI,GACzCP,OAAO,CAACO,kBAAkB,GAC1BR,aAAa;EAEnB,IAAIC,OAAO,IAAI,IAAI,IAAIA,OAAO,CAACQ,4BAA4B,IAAI,IAAI,EAAE;IACnE,IAAIX,SAAS,CAACY,oBAAoB,CAACV,aAAa,CAAC,EAAE;MACjDO,kBAAkB,GAAGP,aAAa;IACpC,CAAC,MAAM,IACLC,OAAO,CAACQ,4BAA4B,IAAI,IAAI,IAC5CX,SAAS,CAACY,oBAAoB,CAACT,OAAO,CAACQ,4BAA4B,CAAC,EACpE;MAEAF,kBAAkB,GAAGN,OAAO,CAACQ,4BAA4B;IAC3D,CAAC,MAAM;MAAA,IAAAE,qBAAA;MACL,MAAM,IAAIC,KAAK,CACZ,8CAA6CZ,aAAc,OAAI,CAAAW,qBAAA,GAC9DV,OAAO,CAACQ,4BAA4B,YAAAE,qBAAA,GAAI,WACzC,EACH,CAAC;IACH;EACF;EAEA,OAAQd,sBAAsB,CAE5BU,kBACF,CAAC;AACH;AAEA,eAAeR,sBAAsB"},"metadata":{},"sourceType":"module","externalDependencies":[]}