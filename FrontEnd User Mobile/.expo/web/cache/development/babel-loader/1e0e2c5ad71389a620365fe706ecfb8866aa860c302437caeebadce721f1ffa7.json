{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport AnimatedImplementation from \"../../Animated/AnimatedImplementation\";\nimport FrameRateLogger from \"../../Interaction/FrameRateLogger\";\nimport { findNodeHandle } from \"../../ReactNative/RendererProxy\";\nimport UIManager from \"../../ReactNative/UIManager\";\nimport flattenStyle from \"../../StyleSheet/flattenStyle\";\nimport splitLayoutProps from \"../../StyleSheet/splitLayoutProps\";\nimport StyleSheet from \"../../StyleSheet/StyleSheet\";\nimport Dimensions from \"../../Utilities/Dimensions\";\nimport dismissKeyboard from \"../../Utilities/dismissKeyboard\";\nimport Platform from \"../../Utilities/Platform\";\nimport Keyboard from \"../Keyboard/Keyboard\";\nimport TextInputState from \"../TextInput/TextInputState\";\nimport View from \"../View/View\";\nimport AndroidHorizontalScrollContentViewNativeComponent from \"./AndroidHorizontalScrollContentViewNativeComponent\";\nimport AndroidHorizontalScrollViewNativeComponent from \"./AndroidHorizontalScrollViewNativeComponent\";\nimport processDecelerationRate from \"./processDecelerationRate\";\nimport ScrollContentViewNativeComponent from \"./ScrollContentViewNativeComponent\";\nimport Commands from \"./ScrollViewCommands\";\nimport ScrollViewContext, { HORIZONTAL, VERTICAL } from \"./ScrollViewContext\";\nimport ScrollViewNativeComponent from \"./ScrollViewNativeComponent\";\nimport ScrollViewStickyHeader from \"./ScrollViewStickyHeader\";\nimport invariant from 'invariant';\nimport memoize from 'memoize-one';\nimport nullthrows from 'nullthrows';\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nif (Platform.OS === 'ios') {\n  require(\"../../Renderer/shims/ReactNative\");\n}\nvar _ref = Platform.OS === 'android' ? {\n    NativeHorizontalScrollViewTuple: [AndroidHorizontalScrollViewNativeComponent, AndroidHorizontalScrollContentViewNativeComponent],\n    NativeVerticalScrollViewTuple: [ScrollViewNativeComponent, View]\n  } : {\n    NativeHorizontalScrollViewTuple: [ScrollViewNativeComponent, ScrollContentViewNativeComponent],\n    NativeVerticalScrollViewTuple: [ScrollViewNativeComponent, ScrollContentViewNativeComponent]\n  },\n  NativeHorizontalScrollViewTuple = _ref.NativeHorizontalScrollViewTuple,\n  NativeVerticalScrollViewTuple = _ref.NativeVerticalScrollViewTuple;\nvar IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\nvar ScrollView = function (_React$Component) {\n  _inherits(ScrollView, _React$Component);\n  var _super = _createSuper(ScrollView);\n  function ScrollView(props) {\n    var _this$props$contentOf, _this$props$contentOf2, _this$props$contentIn, _this$props$contentIn2;\n    var _this;\n    _classCallCheck(this, ScrollView);\n    _this = _super.call(this, props);\n    _this._scrollAnimatedValueAttachment = null;\n    _this._stickyHeaderRefs = new Map();\n    _this._headerLayoutYs = new Map();\n    _this._keyboardMetrics = null;\n    _this._additionalScrollOffset = 0;\n    _this._isTouching = false;\n    _this._lastMomentumScrollBeginTime = 0;\n    _this._lastMomentumScrollEndTime = 0;\n    _this._observedScrollSinceBecomingResponder = false;\n    _this._becameResponderWhileAnimating = false;\n    _this._preventNegativeScrollOffset = null;\n    _this._animated = null;\n    _this._subscriptionKeyboardWillShow = null;\n    _this._subscriptionKeyboardWillHide = null;\n    _this._subscriptionKeyboardDidShow = null;\n    _this._subscriptionKeyboardDidHide = null;\n    _this.state = {\n      layoutHeight: null\n    };\n    _this.getScrollResponder = function () {\n      return _assertThisInitialized(_this);\n    };\n    _this.getScrollableNode = function () {\n      return findNodeHandle(_this._scrollView.nativeInstance);\n    };\n    _this.getInnerViewNode = function () {\n      return findNodeHandle(_this._innerView.nativeInstance);\n    };\n    _this.getInnerViewRef = function () {\n      return _this._innerView.nativeInstance;\n    };\n    _this.getNativeScrollRef = function () {\n      return _this._scrollView.nativeInstance;\n    };\n    _this.scrollTo = function (options, deprecatedX, deprecatedAnimated) {\n      var x, y, animated;\n      if (typeof options === 'number') {\n        console.warn('`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' + 'animated: true})` instead.');\n        y = options;\n        x = deprecatedX;\n        animated = deprecatedAnimated;\n      } else if (options) {\n        y = options.y;\n        x = options.x;\n        animated = options.animated;\n      }\n      if (_this._scrollView.nativeInstance == null) {\n        return;\n      }\n      Commands.scrollTo(_this._scrollView.nativeInstance, x || 0, y || 0, animated !== false);\n    };\n    _this.scrollToEnd = function (options) {\n      var animated = (options && options.animated) !== false;\n      if (_this._scrollView.nativeInstance == null) {\n        return;\n      }\n      Commands.scrollToEnd(_this._scrollView.nativeInstance, animated);\n    };\n    _this.flashScrollIndicators = function () {\n      if (_this._scrollView.nativeInstance == null) {\n        return;\n      }\n      Commands.flashScrollIndicators(_this._scrollView.nativeInstance);\n    };\n    _this.scrollResponderScrollNativeHandleToKeyboard = function (nodeHandle, additionalOffset, preventNegativeScrollOffset) {\n      _this._additionalScrollOffset = additionalOffset || 0;\n      _this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;\n      if (_this._innerView.nativeInstance == null) {\n        return;\n      }\n      if (typeof nodeHandle === 'number') {\n        UIManager.measureLayout(nodeHandle, nullthrows(findNodeHandle(_assertThisInitialized(_this))), _this._textInputFocusError, _this._inputMeasureAndScrollToKeyboard);\n      } else {\n        nodeHandle.measureLayout(_this._innerView.nativeInstance, _this._inputMeasureAndScrollToKeyboard, _this._textInputFocusError);\n      }\n    };\n    _this.scrollResponderZoomTo = function (rect, animated) {\n      invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');\n      if ('animated' in rect) {\n        _this._animated = rect.animated;\n        delete rect.animated;\n      } else if (typeof animated !== 'undefined') {\n        console.warn('`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead');\n      }\n      if (_this._scrollView.nativeInstance == null) {\n        return;\n      }\n      Commands.zoomToRect(_this._scrollView.nativeInstance, rect, animated !== false);\n    };\n    _this._inputMeasureAndScrollToKeyboard = function (left, top, width, height) {\n      var keyboardScreenY = Dimensions.get('window').height;\n      var scrollTextInputIntoVisibleRect = function scrollTextInputIntoVisibleRect() {\n        if (_this._keyboardMetrics != null) {\n          keyboardScreenY = _this._keyboardMetrics.screenY;\n        }\n        var scrollOffsetY = top - keyboardScreenY + height + _this._additionalScrollOffset;\n        if (_this._preventNegativeScrollOffset === true) {\n          scrollOffsetY = Math.max(0, scrollOffsetY);\n        }\n        _this.scrollTo({\n          x: 0,\n          y: scrollOffsetY,\n          animated: true\n        });\n        _this._additionalScrollOffset = 0;\n        _this._preventNegativeScrollOffset = false;\n      };\n      if (_this._keyboardMetrics == null) {\n        setTimeout(function () {\n          scrollTextInputIntoVisibleRect();\n        }, 0);\n      } else {\n        scrollTextInputIntoVisibleRect();\n      }\n    };\n    _this._handleScroll = function (e) {\n      if (__DEV__) {\n        if (_this.props.onScroll && _this.props.scrollEventThrottle == null && Platform.OS === 'ios') {\n          console.log('You specified `onScroll` on a <ScrollView> but not ' + '`scrollEventThrottle`. You will only receive one event. ' + 'Using `16` you get all the events but be aware that it may ' + \"cause frame drops, use a bigger number if you don't need as \" + 'much precision.');\n        }\n      }\n      _this._observedScrollSinceBecomingResponder = true;\n      _this.props.onScroll && _this.props.onScroll(e);\n    };\n    _this._handleLayout = function (e) {\n      if (_this.props.invertStickyHeaders === true) {\n        _this.setState({\n          layoutHeight: e.nativeEvent.layout.height\n        });\n      }\n      if (_this.props.onLayout) {\n        _this.props.onLayout(e);\n      }\n    };\n    _this._handleContentOnLayout = function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        width = _e$nativeEvent$layout.width,\n        height = _e$nativeEvent$layout.height;\n      _this.props.onContentSizeChange && _this.props.onContentSizeChange(width, height);\n    };\n    _this._innerView = createRefForwarder(function (instance) {\n      return instance;\n    });\n    _this._scrollView = createRefForwarder(function (nativeInstance) {\n      var publicInstance = Object.assign(nativeInstance, {\n        getScrollResponder: _this.getScrollResponder,\n        getScrollableNode: _this.getScrollableNode,\n        getInnerViewNode: _this.getInnerViewNode,\n        getInnerViewRef: _this.getInnerViewRef,\n        getNativeScrollRef: _this.getNativeScrollRef,\n        scrollTo: _this.scrollTo,\n        scrollToEnd: _this.scrollToEnd,\n        flashScrollIndicators: _this.flashScrollIndicators,\n        scrollResponderZoomTo: _this.scrollResponderZoomTo,\n        scrollResponderScrollNativeHandleToKeyboard: _this.scrollResponderScrollNativeHandleToKeyboard\n      });\n      return publicInstance;\n    });\n    _this.scrollResponderKeyboardWillShow = function (e) {\n      _this._keyboardMetrics = e.endCoordinates;\n      _this.props.onKeyboardWillShow && _this.props.onKeyboardWillShow(e);\n    };\n    _this.scrollResponderKeyboardWillHide = function (e) {\n      _this._keyboardMetrics = null;\n      _this.props.onKeyboardWillHide && _this.props.onKeyboardWillHide(e);\n    };\n    _this.scrollResponderKeyboardDidShow = function (e) {\n      _this._keyboardMetrics = e.endCoordinates;\n      _this.props.onKeyboardDidShow && _this.props.onKeyboardDidShow(e);\n    };\n    _this.scrollResponderKeyboardDidHide = function (e) {\n      _this._keyboardMetrics = null;\n      _this.props.onKeyboardDidHide && _this.props.onKeyboardDidHide(e);\n    };\n    _this._handleMomentumScrollBegin = function (e) {\n      _this._lastMomentumScrollBeginTime = global.performance.now();\n      _this.props.onMomentumScrollBegin && _this.props.onMomentumScrollBegin(e);\n    };\n    _this._handleMomentumScrollEnd = function (e) {\n      FrameRateLogger.endScroll();\n      _this._lastMomentumScrollEndTime = global.performance.now();\n      _this.props.onMomentumScrollEnd && _this.props.onMomentumScrollEnd(e);\n    };\n    _this._handleScrollBeginDrag = function (e) {\n      FrameRateLogger.beginScroll();\n      if (Platform.OS === 'android' && _this.props.keyboardDismissMode === 'on-drag') {\n        dismissKeyboard();\n      }\n      _this.props.onScrollBeginDrag && _this.props.onScrollBeginDrag(e);\n    };\n    _this._handleScrollEndDrag = function (e) {\n      var velocity = e.nativeEvent.velocity;\n      if (!_this._isAnimating() && (!velocity || velocity.x === 0 && velocity.y === 0)) {\n        FrameRateLogger.endScroll();\n      }\n      _this.props.onScrollEndDrag && _this.props.onScrollEndDrag(e);\n    };\n    _this._isAnimating = function () {\n      var now = global.performance.now();\n      var timeSinceLastMomentumScrollEnd = now - _this._lastMomentumScrollEndTime;\n      var isAnimating = timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS || _this._lastMomentumScrollEndTime < _this._lastMomentumScrollBeginTime;\n      return isAnimating;\n    };\n    _this._handleResponderGrant = function (e) {\n      _this._observedScrollSinceBecomingResponder = false;\n      _this.props.onResponderGrant && _this.props.onResponderGrant(e);\n      _this._becameResponderWhileAnimating = _this._isAnimating();\n    };\n    _this._handleResponderReject = function () {};\n    _this._handleResponderRelease = function (e) {\n      _this._isTouching = e.nativeEvent.touches.length !== 0;\n      _this.props.onResponderRelease && _this.props.onResponderRelease(e);\n      if (typeof e.target === 'number') {\n        if (__DEV__) {\n          console.error('Did not expect event target to be a number. Should have been a native component');\n        }\n        return;\n      }\n      var currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n      if (currentlyFocusedTextInput != null && _this.props.keyboardShouldPersistTaps !== true && _this.props.keyboardShouldPersistTaps !== 'always' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedTextInput && !_this._observedScrollSinceBecomingResponder && !_this._becameResponderWhileAnimating) {\n        TextInputState.blurTextInput(currentlyFocusedTextInput);\n      }\n    };\n    _this._handleResponderTerminationRequest = function () {\n      return !_this._observedScrollSinceBecomingResponder;\n    };\n    _this._handleScrollShouldSetResponder = function () {\n      if (_this.props.disableScrollViewPanResponder === true) {\n        return false;\n      }\n      return _this._isTouching;\n    };\n    _this._handleStartShouldSetResponder = function (e) {\n      if (_this.props.disableScrollViewPanResponder === true) {\n        return false;\n      }\n      var currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n      if (_this.props.keyboardShouldPersistTaps === 'handled' && _this._keyboardIsDismissible() && e.target !== currentlyFocusedInput) {\n        return true;\n      }\n      return false;\n    };\n    _this._handleStartShouldSetResponderCapture = function (e) {\n      if (_this._isAnimating()) {\n        return true;\n      }\n      if (_this.props.disableScrollViewPanResponder === true) {\n        return false;\n      }\n      var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;\n      var keyboardNeverPersistTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n      if (typeof e.target === 'number') {\n        if (__DEV__) {\n          console.error('Did not expect event target to be a number. Should have been a native component');\n        }\n        return false;\n      }\n      if (_this._softKeyboardIsDetached()) {\n        return false;\n      }\n      if (keyboardNeverPersistTaps && _this._keyboardIsDismissible() && e.target != null && !TextInputState.isTextInput(e.target)) {\n        return true;\n      }\n      return false;\n    };\n    _this._keyboardIsDismissible = function () {\n      var currentlyFocusedInput = TextInputState.currentlyFocusedInput();\n      var hasFocusedTextInput = currentlyFocusedInput != null && TextInputState.isTextInput(currentlyFocusedInput);\n      var softKeyboardMayBeOpen = _this._keyboardMetrics != null || _this._keyboardEventsAreUnreliable();\n      return hasFocusedTextInput && softKeyboardMayBeOpen;\n    };\n    _this._softKeyboardIsDetached = function () {\n      return _this._keyboardMetrics != null && _this._keyboardMetrics.height === 0;\n    };\n    _this._keyboardEventsAreUnreliable = function () {\n      return Platform.OS === 'android' && Platform.Version < 30;\n    };\n    _this._handleTouchEnd = function (e) {\n      var nativeEvent = e.nativeEvent;\n      _this._isTouching = nativeEvent.touches.length !== 0;\n      var keyboardShouldPersistTaps = _this.props.keyboardShouldPersistTaps;\n      var keyboardNeverPersistsTaps = !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\n      var currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\n      if (currentlyFocusedTextInput != null && e.target !== currentlyFocusedTextInput && _this._softKeyboardIsDetached() && _this._keyboardIsDismissible() && keyboardNeverPersistsTaps) {\n        TextInputState.blurTextInput(currentlyFocusedTextInput);\n      }\n      _this.props.onTouchEnd && _this.props.onTouchEnd(e);\n    };\n    _this._handleTouchCancel = function (e) {\n      _this._isTouching = false;\n      _this.props.onTouchCancel && _this.props.onTouchCancel(e);\n    };\n    _this._handleTouchStart = function (e) {\n      _this._isTouching = true;\n      _this.props.onTouchStart && _this.props.onTouchStart(e);\n    };\n    _this._handleTouchMove = function (e) {\n      _this.props.onTouchMove && _this.props.onTouchMove(e);\n    };\n    _this._scrollAnimatedValue = new AnimatedImplementation.Value((_this$props$contentOf = (_this$props$contentOf2 = _this.props.contentOffset) == null ? void 0 : _this$props$contentOf2.y) != null ? _this$props$contentOf : 0);\n    _this._scrollAnimatedValue.setOffset((_this$props$contentIn = (_this$props$contentIn2 = _this.props.contentInset) == null ? void 0 : _this$props$contentIn2.top) != null ? _this$props$contentIn : 0);\n    return _this;\n  }\n  _createClass(ScrollView, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {\n        console.warn(`'keyboardShouldPersistTaps={${this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'}}' is deprecated. ` + `Use 'keyboardShouldPersistTaps=\"${this.props.keyboardShouldPersistTaps ? 'always' : 'never'}\"' instead`);\n      }\n      this._keyboardMetrics = Keyboard.metrics();\n      this._additionalScrollOffset = 0;\n      this._subscriptionKeyboardWillShow = Keyboard.addListener('keyboardWillShow', this.scrollResponderKeyboardWillShow);\n      this._subscriptionKeyboardWillHide = Keyboard.addListener('keyboardWillHide', this.scrollResponderKeyboardWillHide);\n      this._subscriptionKeyboardDidShow = Keyboard.addListener('keyboardDidShow', this.scrollResponderKeyboardDidShow);\n      this._subscriptionKeyboardDidHide = Keyboard.addListener('keyboardDidHide', this.scrollResponderKeyboardDidHide);\n      this._updateAnimatedNodeAttachment();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var prevContentInsetTop = prevProps.contentInset ? prevProps.contentInset.top : 0;\n      var newContentInsetTop = this.props.contentInset ? this.props.contentInset.top : 0;\n      if (prevContentInsetTop !== newContentInsetTop) {\n        this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);\n      }\n      this._updateAnimatedNodeAttachment();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this._subscriptionKeyboardWillShow != null) {\n        this._subscriptionKeyboardWillShow.remove();\n      }\n      if (this._subscriptionKeyboardWillHide != null) {\n        this._subscriptionKeyboardWillHide.remove();\n      }\n      if (this._subscriptionKeyboardDidShow != null) {\n        this._subscriptionKeyboardDidShow.remove();\n      }\n      if (this._subscriptionKeyboardDidHide != null) {\n        this._subscriptionKeyboardDidHide.remove();\n      }\n      if (this._scrollAnimatedValueAttachment) {\n        this._scrollAnimatedValueAttachment.detach();\n      }\n    }\n  }, {\n    key: \"_textInputFocusError\",\n    value: function _textInputFocusError() {\n      console.warn('Error measuring text field.');\n    }\n  }, {\n    key: \"_getKeyForIndex\",\n    value: function _getKeyForIndex(index, childArray) {\n      var child = childArray[index];\n      return child && child.key;\n    }\n  }, {\n    key: \"_updateAnimatedNodeAttachment\",\n    value: function _updateAnimatedNodeAttachment() {\n      if (this._scrollAnimatedValueAttachment) {\n        this._scrollAnimatedValueAttachment.detach();\n      }\n      if (this.props.stickyHeaderIndices && this.props.stickyHeaderIndices.length > 0) {\n        this._scrollAnimatedValueAttachment = AnimatedImplementation.attachNativeEvent(this._scrollView.nativeInstance, 'onScroll', [{\n          nativeEvent: {\n            contentOffset: {\n              y: this._scrollAnimatedValue\n            }\n          }\n        }]);\n      }\n    }\n  }, {\n    key: \"_setStickyHeaderRef\",\n    value: function _setStickyHeaderRef(key, ref) {\n      if (ref) {\n        this._stickyHeaderRefs.set(key, ref);\n      } else {\n        this._stickyHeaderRefs.delete(key);\n      }\n    }\n  }, {\n    key: \"_onStickyHeaderLayout\",\n    value: function _onStickyHeaderLayout(index, event, key) {\n      var stickyHeaderIndices = this.props.stickyHeaderIndices;\n      if (!stickyHeaderIndices) {\n        return;\n      }\n      var childArray = React.Children.toArray(this.props.children);\n      if (key !== this._getKeyForIndex(index, childArray)) {\n        return;\n      }\n      var layoutY = event.nativeEvent.layout.y;\n      this._headerLayoutYs.set(key, layoutY);\n      var indexOfIndex = stickyHeaderIndices.indexOf(index);\n      var previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\n      if (previousHeaderIndex != null) {\n        var previousHeader = this._stickyHeaderRefs.get(this._getKeyForIndex(previousHeaderIndex, childArray));\n        previousHeader && previousHeader.setNextHeaderY && previousHeader.setNextHeaderY(layoutY);\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _ref2 = this.props.horizontal === true ? NativeHorizontalScrollViewTuple : NativeVerticalScrollViewTuple,\n        _ref3 = _slicedToArray(_ref2, 2),\n        NativeDirectionalScrollView = _ref3[0],\n        NativeDirectionalScrollContentView = _ref3[1];\n      var contentContainerStyle = [this.props.horizontal === true && styles.contentContainerHorizontal, this.props.contentContainerStyle];\n      if (__DEV__ && this.props.style !== undefined) {\n        var style = flattenStyle(this.props.style);\n        var childLayoutProps = ['alignItems', 'justifyContent'].filter(function (prop) {\n          return style && style[prop] !== undefined;\n        });\n        invariant(childLayoutProps.length === 0, 'ScrollView child layout (' + JSON.stringify(childLayoutProps) + ') must be applied through the contentContainerStyle prop.');\n      }\n      var contentSizeChangeProps = this.props.onContentSizeChange == null ? null : {\n        onLayout: this._handleContentOnLayout\n      };\n      var stickyHeaderIndices = this.props.stickyHeaderIndices;\n      var children = this.props.children;\n      if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\n        var childArray = React.Children.toArray(this.props.children);\n        children = childArray.map(function (child, index) {\n          var indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\n          if (indexOfIndex > -1) {\n            var key = child.key;\n            var nextIndex = stickyHeaderIndices[indexOfIndex + 1];\n            var StickyHeaderComponent = _this2.props.StickyHeaderComponent || ScrollViewStickyHeader;\n            return _jsx(StickyHeaderComponent, {\n              nativeID: 'StickyHeader-' + key,\n              ref: function ref(_ref4) {\n                return _this2._setStickyHeaderRef(key, _ref4);\n              },\n              nextHeaderLayoutY: _this2._headerLayoutYs.get(_this2._getKeyForIndex(nextIndex, childArray)),\n              onLayout: function onLayout(event) {\n                return _this2._onStickyHeaderLayout(index, event, key);\n              },\n              scrollAnimatedValue: _this2._scrollAnimatedValue,\n              inverted: _this2.props.invertStickyHeaders,\n              hiddenOnScroll: _this2.props.stickyHeaderHiddenOnScroll,\n              scrollViewHeight: _this2.state.layoutHeight,\n              children: child\n            }, key);\n          } else {\n            return child;\n          }\n        });\n      }\n      children = _jsx(ScrollViewContext.Provider, {\n        value: this.props.horizontal === true ? HORIZONTAL : VERTICAL,\n        children: children\n      });\n      var hasStickyHeaders = Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\n      var contentContainer = _jsx(NativeDirectionalScrollContentView, _objectSpread(_objectSpread({}, contentSizeChangeProps), {}, {\n        ref: this._innerView.getForwardingRef(this.props.innerViewRef),\n        style: contentContainerStyle,\n        removeClippedSubviews: Platform.OS === 'android' && hasStickyHeaders ? false : this.props.removeClippedSubviews,\n        collapsable: false,\n        children: children\n      }));\n      var alwaysBounceHorizontal = this.props.alwaysBounceHorizontal !== undefined ? this.props.alwaysBounceHorizontal : this.props.horizontal;\n      var alwaysBounceVertical = this.props.alwaysBounceVertical !== undefined ? this.props.alwaysBounceVertical : !this.props.horizontal;\n      var baseStyle = this.props.horizontal === true ? styles.baseHorizontal : styles.baseVertical;\n      var props = _objectSpread(_objectSpread({}, this.props), {}, {\n        alwaysBounceHorizontal: alwaysBounceHorizontal,\n        alwaysBounceVertical: alwaysBounceVertical,\n        style: StyleSheet.compose(baseStyle, this.props.style),\n        onContentSizeChange: null,\n        onLayout: this._handleLayout,\n        onMomentumScrollBegin: this._handleMomentumScrollBegin,\n        onMomentumScrollEnd: this._handleMomentumScrollEnd,\n        onResponderGrant: this._handleResponderGrant,\n        onResponderReject: this._handleResponderReject,\n        onResponderRelease: this._handleResponderRelease,\n        onResponderTerminationRequest: this._handleResponderTerminationRequest,\n        onScrollBeginDrag: this._handleScrollBeginDrag,\n        onScrollEndDrag: this._handleScrollEndDrag,\n        onScrollShouldSetResponder: this._handleScrollShouldSetResponder,\n        onStartShouldSetResponder: this._handleStartShouldSetResponder,\n        onStartShouldSetResponderCapture: this._handleStartShouldSetResponderCapture,\n        onTouchEnd: this._handleTouchEnd,\n        onTouchMove: this._handleTouchMove,\n        onTouchStart: this._handleTouchStart,\n        onTouchCancel: this._handleTouchCancel,\n        onScroll: this._handleScroll,\n        scrollEventThrottle: hasStickyHeaders ? 1 : this.props.scrollEventThrottle,\n        sendMomentumEvents: this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd ? true : false,\n        snapToStart: this.props.snapToStart !== false,\n        snapToEnd: this.props.snapToEnd !== false,\n        pagingEnabled: Platform.select({\n          ios: this.props.pagingEnabled === true && this.props.snapToInterval == null && this.props.snapToOffsets == null,\n          android: this.props.pagingEnabled === true || this.props.snapToInterval != null || this.props.snapToOffsets != null\n        })\n      });\n      var decelerationRate = this.props.decelerationRate;\n      if (decelerationRate != null) {\n        props.decelerationRate = processDecelerationRate(decelerationRate);\n      }\n      var refreshControl = this.props.refreshControl;\n      var scrollViewRef = this._scrollView.getForwardingRef(this.props.scrollViewRef);\n      if (refreshControl) {\n        if (Platform.OS === 'ios') {\n          return _jsxs(NativeDirectionalScrollView, _objectSpread(_objectSpread({}, props), {}, {\n            ref: scrollViewRef,\n            children: [refreshControl, contentContainer]\n          }));\n        } else if (Platform.OS === 'android') {\n          var _splitLayoutProps = splitLayoutProps(flattenStyle(props.style)),\n            outer = _splitLayoutProps.outer,\n            inner = _splitLayoutProps.inner;\n          return React.cloneElement(refreshControl, {\n            style: StyleSheet.compose(baseStyle, outer)\n          }, _jsx(NativeDirectionalScrollView, _objectSpread(_objectSpread({}, props), {}, {\n            style: StyleSheet.compose(baseStyle, inner),\n            ref: scrollViewRef,\n            children: contentContainer\n          })));\n        }\n      }\n      return _jsx(NativeDirectionalScrollView, _objectSpread(_objectSpread({}, props), {}, {\n        ref: scrollViewRef,\n        children: contentContainer\n      }));\n    }\n  }]);\n  return ScrollView;\n}(React.Component);\nScrollView.Context = ScrollViewContext;\nvar styles = StyleSheet.create({\n  baseVertical: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'column',\n    overflow: 'scroll'\n  },\n  baseHorizontal: {\n    flexGrow: 1,\n    flexShrink: 1,\n    flexDirection: 'row',\n    overflow: 'scroll'\n  },\n  contentContainerHorizontal: {\n    flexDirection: 'row'\n  }\n});\nfunction createRefForwarder(mutator) {\n  var state = {\n    getForwardingRef: memoize(function (forwardedRef) {\n      return function (nativeInstance) {\n        var publicInstance = nativeInstance == null ? null : mutator(nativeInstance);\n        state.nativeInstance = nativeInstance;\n        state.publicInstance = publicInstance;\n        if (forwardedRef != null) {\n          if (typeof forwardedRef === 'function') {\n            forwardedRef(publicInstance);\n          } else {\n            forwardedRef.current = publicInstance;\n          }\n        }\n      };\n    }),\n    nativeInstance: null,\n    publicInstance: null\n  };\n  return state;\n}\nfunction Wrapper(props, ref) {\n  return _jsx(ScrollView, _objectSpread(_objectSpread({}, props), {}, {\n    scrollViewRef: ref\n  }));\n}\nWrapper.displayName = 'ScrollView';\nvar ForwardedScrollView = React.forwardRef(Wrapper);\nForwardedScrollView.Context = ScrollViewContext;\nForwardedScrollView.displayName = 'ScrollView';\nmodule.exports = ForwardedScrollView;","map":{"version":3,"names":["AnimatedImplementation","FrameRateLogger","findNodeHandle","UIManager","flattenStyle","splitLayoutProps","StyleSheet","Dimensions","dismissKeyboard","Platform","Keyboard","TextInputState","View","AndroidHorizontalScrollContentViewNativeComponent","AndroidHorizontalScrollViewNativeComponent","processDecelerationRate","ScrollContentViewNativeComponent","Commands","ScrollViewContext","HORIZONTAL","VERTICAL","ScrollViewNativeComponent","ScrollViewStickyHeader","invariant","memoize","nullthrows","React","jsx","_jsx","jsxs","_jsxs","OS","require","_ref","NativeHorizontalScrollViewTuple","NativeVerticalScrollViewTuple","IS_ANIMATING_TOUCH_START_THRESHOLD_MS","ScrollView","_React$Component","_inherits","_super","_createSuper","props","_this$props$contentOf","_this$props$contentOf2","_this$props$contentIn","_this$props$contentIn2","_this","_classCallCheck","call","_scrollAnimatedValueAttachment","_stickyHeaderRefs","Map","_headerLayoutYs","_keyboardMetrics","_additionalScrollOffset","_isTouching","_lastMomentumScrollBeginTime","_lastMomentumScrollEndTime","_observedScrollSinceBecomingResponder","_becameResponderWhileAnimating","_preventNegativeScrollOffset","_animated","_subscriptionKeyboardWillShow","_subscriptionKeyboardWillHide","_subscriptionKeyboardDidShow","_subscriptionKeyboardDidHide","state","layoutHeight","getScrollResponder","_assertThisInitialized","getScrollableNode","_scrollView","nativeInstance","getInnerViewNode","_innerView","getInnerViewRef","getNativeScrollRef","scrollTo","options","deprecatedX","deprecatedAnimated","x","y","animated","console","warn","scrollToEnd","flashScrollIndicators","scrollResponderScrollNativeHandleToKeyboard","nodeHandle","additionalOffset","preventNegativeScrollOffset","measureLayout","_textInputFocusError","_inputMeasureAndScrollToKeyboard","scrollResponderZoomTo","rect","zoomToRect","left","top","width","height","keyboardScreenY","get","scrollTextInputIntoVisibleRect","screenY","scrollOffsetY","Math","max","setTimeout","_handleScroll","e","__DEV__","onScroll","scrollEventThrottle","log","_handleLayout","invertStickyHeaders","setState","nativeEvent","layout","onLayout","_handleContentOnLayout","_e$nativeEvent$layout","onContentSizeChange","createRefForwarder","instance","publicInstance","Object","assign","scrollResponderKeyboardWillShow","endCoordinates","onKeyboardWillShow","scrollResponderKeyboardWillHide","onKeyboardWillHide","scrollResponderKeyboardDidShow","onKeyboardDidShow","scrollResponderKeyboardDidHide","onKeyboardDidHide","_handleMomentumScrollBegin","global","performance","now","onMomentumScrollBegin","_handleMomentumScrollEnd","endScroll","onMomentumScrollEnd","_handleScrollBeginDrag","beginScroll","keyboardDismissMode","onScrollBeginDrag","_handleScrollEndDrag","velocity","_isAnimating","onScrollEndDrag","timeSinceLastMomentumScrollEnd","isAnimating","_handleResponderGrant","onResponderGrant","_handleResponderReject","_handleResponderRelease","touches","length","onResponderRelease","target","error","currentlyFocusedTextInput","currentlyFocusedInput","keyboardShouldPersistTaps","_keyboardIsDismissible","blurTextInput","_handleResponderTerminationRequest","_handleScrollShouldSetResponder","disableScrollViewPanResponder","_handleStartShouldSetResponder","_handleStartShouldSetResponderCapture","keyboardNeverPersistTaps","_softKeyboardIsDetached","isTextInput","hasFocusedTextInput","softKeyboardMayBeOpen","_keyboardEventsAreUnreliable","Version","_handleTouchEnd","keyboardNeverPersistsTaps","onTouchEnd","_handleTouchCancel","onTouchCancel","_handleTouchStart","onTouchStart","_handleTouchMove","onTouchMove","_scrollAnimatedValue","Value","contentOffset","setOffset","contentInset","_createClass","key","value","componentDidMount","metrics","addListener","_updateAnimatedNodeAttachment","componentDidUpdate","prevProps","prevContentInsetTop","newContentInsetTop","componentWillUnmount","remove","detach","_getKeyForIndex","index","childArray","child","stickyHeaderIndices","attachNativeEvent","_setStickyHeaderRef","ref","set","delete","_onStickyHeaderLayout","event","Children","toArray","children","layoutY","indexOfIndex","indexOf","previousHeaderIndex","previousHeader","setNextHeaderY","render","_this2","_ref2","horizontal","_ref3","_slicedToArray","NativeDirectionalScrollView","NativeDirectionalScrollContentView","contentContainerStyle","styles","contentContainerHorizontal","style","undefined","childLayoutProps","filter","prop","JSON","stringify","contentSizeChangeProps","map","nextIndex","StickyHeaderComponent","nativeID","nextHeaderLayoutY","scrollAnimatedValue","inverted","hiddenOnScroll","stickyHeaderHiddenOnScroll","scrollViewHeight","Provider","hasStickyHeaders","Array","isArray","contentContainer","_objectSpread","getForwardingRef","innerViewRef","removeClippedSubviews","collapsable","alwaysBounceHorizontal","alwaysBounceVertical","baseStyle","baseHorizontal","baseVertical","compose","onResponderReject","onResponderTerminationRequest","onScrollShouldSetResponder","onStartShouldSetResponder","onStartShouldSetResponderCapture","sendMomentumEvents","snapToStart","snapToEnd","pagingEnabled","select","ios","snapToInterval","snapToOffsets","android","decelerationRate","refreshControl","scrollViewRef","_splitLayoutProps","outer","inner","cloneElement","Component","Context","create","flexGrow","flexShrink","flexDirection","overflow","mutator","forwardedRef","current","Wrapper","displayName","ForwardedScrollView","forwardRef","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Components/ScrollView/ScrollView.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\nimport type {HostComponent} from '../../Renderer/shims/ReactNativeTypes';\r\nimport type {EdgeInsetsProp} from '../../StyleSheet/EdgeInsetsPropType';\r\nimport type {PointProp} from '../../StyleSheet/PointPropType';\r\nimport type {ViewStyleProp} from '../../StyleSheet/StyleSheet';\r\nimport type {ColorValue} from '../../StyleSheet/StyleSheet';\r\nimport type {\r\n  LayoutEvent,\r\n  PressEvent,\r\n  ScrollEvent,\r\n} from '../../Types/CoreEventTypes';\r\nimport type {EventSubscription} from '../../vendor/emitter/EventEmitter';\r\nimport type {KeyboardEvent, KeyboardMetrics} from '../Keyboard/Keyboard';\r\nimport type {ViewProps} from '../View/ViewPropTypes';\r\nimport type {Props as ScrollViewStickyHeaderProps} from './ScrollViewStickyHeader';\r\n\r\nimport AnimatedImplementation from '../../Animated/AnimatedImplementation';\r\nimport FrameRateLogger from '../../Interaction/FrameRateLogger';\r\nimport {findNodeHandle} from '../../ReactNative/RendererProxy';\r\nimport UIManager from '../../ReactNative/UIManager';\r\nimport flattenStyle from '../../StyleSheet/flattenStyle';\r\nimport splitLayoutProps from '../../StyleSheet/splitLayoutProps';\r\nimport StyleSheet from '../../StyleSheet/StyleSheet';\r\nimport Dimensions from '../../Utilities/Dimensions';\r\nimport dismissKeyboard from '../../Utilities/dismissKeyboard';\r\nimport Platform from '../../Utilities/Platform';\r\nimport Keyboard from '../Keyboard/Keyboard';\r\nimport TextInputState from '../TextInput/TextInputState';\r\nimport View from '../View/View';\r\nimport AndroidHorizontalScrollContentViewNativeComponent from './AndroidHorizontalScrollContentViewNativeComponent';\r\nimport AndroidHorizontalScrollViewNativeComponent from './AndroidHorizontalScrollViewNativeComponent';\r\nimport processDecelerationRate from './processDecelerationRate';\r\nimport ScrollContentViewNativeComponent from './ScrollContentViewNativeComponent';\r\nimport Commands from './ScrollViewCommands';\r\nimport ScrollViewContext, {HORIZONTAL, VERTICAL} from './ScrollViewContext';\r\nimport ScrollViewNativeComponent from './ScrollViewNativeComponent';\r\nimport ScrollViewStickyHeader from './ScrollViewStickyHeader';\r\nimport invariant from 'invariant';\r\nimport memoize from 'memoize-one';\r\nimport nullthrows from 'nullthrows';\r\nimport * as React from 'react';\r\n\r\nif (Platform.OS === 'ios') {\r\n  require('../../Renderer/shims/ReactNative'); // Force side effects to prevent T55744311\r\n}\r\n\r\nconst {NativeHorizontalScrollViewTuple, NativeVerticalScrollViewTuple} =\r\n  Platform.OS === 'android'\r\n    ? {\r\n        NativeHorizontalScrollViewTuple: [\r\n          AndroidHorizontalScrollViewNativeComponent,\r\n          AndroidHorizontalScrollContentViewNativeComponent,\r\n        ],\r\n        NativeVerticalScrollViewTuple: [ScrollViewNativeComponent, View],\r\n      }\r\n    : {\r\n        NativeHorizontalScrollViewTuple: [\r\n          ScrollViewNativeComponent,\r\n          ScrollContentViewNativeComponent,\r\n        ],\r\n        NativeVerticalScrollViewTuple: [\r\n          ScrollViewNativeComponent,\r\n          ScrollContentViewNativeComponent,\r\n        ],\r\n      };\r\n\r\n/*\r\n * iOS scroll event timing nuances:\r\n * ===============================\r\n *\r\n *\r\n * Scrolling without bouncing, if you touch down:\r\n * -------------------------------\r\n *\r\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\r\n *    ... physical touch starts ...\r\n * 2. `onTouchStartCapture`   (when you press down to stop the scroll)\r\n * 3. `onTouchStart`          (same, but bubble phase)\r\n * 4. `onResponderRelease`    (when lifting up - you could pause forever before * lifting)\r\n * 5. `onMomentumScrollEnd`\r\n *\r\n *\r\n * Scrolling with bouncing, if you touch down:\r\n * -------------------------------\r\n *\r\n * 1. `onMomentumScrollBegin` (when animation begins after letting up)\r\n *    ... bounce begins ...\r\n *    ... some time elapses ...\r\n *    ... physical touch during bounce ...\r\n * 2. `onMomentumScrollEnd`   (Makes no sense why this occurs first during bounce)\r\n * 3. `onTouchStartCapture`   (immediately after `onMomentumScrollEnd`)\r\n * 4. `onTouchStart`          (same, but bubble phase)\r\n * 5. `onTouchEnd`            (You could hold the touch start for a long time)\r\n * 6. `onMomentumScrollBegin` (When releasing the view starts bouncing back)\r\n *\r\n * So when we receive an `onTouchStart`, how can we tell if we are touching\r\n * *during* an animation (which then causes the animation to stop)? The only way\r\n * to tell is if the `touchStart` occurred immediately after the\r\n * `onMomentumScrollEnd`.\r\n *\r\n * This is abstracted out for you, so you can just call this.scrollResponderIsAnimating() if\r\n * necessary\r\n *\r\n * `ScrollView` also includes logic for blurring a currently focused input\r\n * if one is focused while scrolling. This is a natural place\r\n * to put this logic since it can support not dismissing the keyboard while\r\n * scrolling, unless a recognized \"tap\"-like gesture has occurred.\r\n *\r\n * The public lifecycle API includes events for keyboard interaction, responder\r\n * interaction, and scrolling (among others). The keyboard callbacks\r\n * `onKeyboardWill/Did/*` are *global* events, but are invoked on scroll\r\n * responder's props so that you can guarantee that the scroll responder's\r\n * internal state has been updated accordingly (and deterministically) by\r\n * the time the props callbacks are invoke. Otherwise, you would always wonder\r\n * if the scroll responder is currently in a state where it recognizes new\r\n * keyboard positions etc. If coordinating scrolling with keyboard movement,\r\n * *always* use these hooks instead of listening to your own global keyboard\r\n * events.\r\n *\r\n * Public keyboard lifecycle API: (props callbacks)\r\n *\r\n * Standard Keyboard Appearance Sequence:\r\n *\r\n *   this.props.onKeyboardWillShow\r\n *   this.props.onKeyboardDidShow\r\n *\r\n * `onScrollResponderKeyboardDismissed` will be invoked if an appropriate\r\n * tap inside the scroll responder's scrollable region was responsible\r\n * for the dismissal of the keyboard. There are other reasons why the\r\n * keyboard could be dismissed.\r\n *\r\n *   this.props.onScrollResponderKeyboardDismissed\r\n *\r\n * Standard Keyboard Hide Sequence:\r\n *\r\n *   this.props.onKeyboardWillHide\r\n *   this.props.onKeyboardDidHide\r\n */\r\n\r\n// Public methods for ScrollView\r\nexport type ScrollViewImperativeMethods = $ReadOnly<{|\r\n  getScrollResponder: $PropertyType<ScrollView, 'getScrollResponder'>,\r\n  getScrollableNode: $PropertyType<ScrollView, 'getScrollableNode'>,\r\n  getInnerViewNode: $PropertyType<ScrollView, 'getInnerViewNode'>,\r\n  getInnerViewRef: $PropertyType<ScrollView, 'getInnerViewRef'>,\r\n  getNativeScrollRef: $PropertyType<ScrollView, 'getNativeScrollRef'>,\r\n  scrollTo: $PropertyType<ScrollView, 'scrollTo'>,\r\n  scrollToEnd: $PropertyType<ScrollView, 'scrollToEnd'>,\r\n  flashScrollIndicators: $PropertyType<ScrollView, 'flashScrollIndicators'>,\r\n  scrollResponderZoomTo: $PropertyType<ScrollView, 'scrollResponderZoomTo'>,\r\n  scrollResponderScrollNativeHandleToKeyboard: $PropertyType<\r\n    ScrollView,\r\n    'scrollResponderScrollNativeHandleToKeyboard',\r\n  >,\r\n|}>;\r\n\r\nexport type DecelerationRateType = 'fast' | 'normal' | number;\r\nexport type ScrollResponderType = ScrollViewImperativeMethods;\r\n\r\ntype NativeScrollViewInstance = React.ElementRef<HostComponent<mixed>>;\r\ntype PublicScrollViewInstance = $ReadOnly<{|\r\n  ...$Exact<NativeScrollViewInstance>,\r\n  ...ScrollViewImperativeMethods,\r\n|}>;\r\n\r\ntype InnerViewInstance = React.ElementRef<typeof View>;\r\n\r\ntype IOSProps = $ReadOnly<{|\r\n  /**\r\n   * Controls whether iOS should automatically adjust the content inset\r\n   * for scroll views that are placed behind a navigation bar or\r\n   * tab bar/ toolbar. The default value is true.\r\n   * @platform ios\r\n   */\r\n  automaticallyAdjustContentInsets?: ?boolean,\r\n  /**\r\n   * Controls whether the ScrollView should automatically adjust its `contentInset`\r\n   * and `scrollViewInsets` when the Keyboard changes its size. The default value is false.\r\n   * @platform ios\r\n   */\r\n  automaticallyAdjustKeyboardInsets?: ?boolean,\r\n  /**\r\n   * Controls whether iOS should automatically adjust the scroll indicator\r\n   * insets. The default value is true. Available on iOS 13 and later.\r\n   * @platform ios\r\n   */\r\n  automaticallyAdjustsScrollIndicatorInsets?: ?boolean,\r\n  /**\r\n   * The amount by which the scroll view content is inset from the edges\r\n   * of the scroll view. Defaults to `{top: 0, left: 0, bottom: 0, right: 0}`.\r\n   * @platform ios\r\n   */\r\n  contentInset?: ?EdgeInsetsProp,\r\n  /**\r\n   * When true, the scroll view bounces when it reaches the end of the\r\n   * content if the content is larger then the scroll view along the axis of\r\n   * the scroll direction. When false, it disables all bouncing even if\r\n   * the `alwaysBounce*` props are true. The default value is true.\r\n   * @platform ios\r\n   */\r\n  bounces?: ?boolean,\r\n  /**\r\n   * By default, ScrollView has an active pan responder that hijacks panresponders\r\n   * deeper in the render tree in order to prevent accidental touches while scrolling.\r\n   * However, in certain occasions (such as when using snapToInterval) in a vertical scrollview\r\n   * You may want to disable this behavior in order to prevent the ScrollView from blocking touches\r\n   */\r\n  disableScrollViewPanResponder?: ?boolean,\r\n  /**\r\n   * When true, gestures can drive zoom past min/max and the zoom will animate\r\n   * to the min/max value at gesture end, otherwise the zoom will not exceed\r\n   * the limits.\r\n   * @platform ios\r\n   */\r\n  bouncesZoom?: ?boolean,\r\n  /**\r\n   * When true, the scroll view bounces horizontally when it reaches the end\r\n   * even if the content is smaller than the scroll view itself. The default\r\n   * value is true when `horizontal={true}` and false otherwise.\r\n   * @platform ios\r\n   */\r\n  alwaysBounceHorizontal?: ?boolean,\r\n  /**\r\n   * When true, the scroll view bounces vertically when it reaches the end\r\n   * even if the content is smaller than the scroll view itself. The default\r\n   * value is false when `horizontal={true}` and true otherwise.\r\n   * @platform ios\r\n   */\r\n  alwaysBounceVertical?: ?boolean,\r\n  /**\r\n   * When true, the scroll view automatically centers the content when the\r\n   * content is smaller than the scroll view bounds; when the content is\r\n   * larger than the scroll view, this property has no effect. The default\r\n   * value is false.\r\n   * @platform ios\r\n   */\r\n  centerContent?: ?boolean,\r\n  /**\r\n   * The style of the scroll indicators.\r\n   *\r\n   *   - `'default'` (the default), same as `black`.\r\n   *   - `'black'`, scroll indicator is black. This style is good against a light background.\r\n   *   - `'white'`, scroll indicator is white. This style is good against a dark background.\r\n   *\r\n   * @platform ios\r\n   */\r\n  indicatorStyle?: ?('default' | 'black' | 'white'),\r\n  /**\r\n   * When true, the ScrollView will try to lock to only vertical or horizontal\r\n   * scrolling while dragging.  The default value is false.\r\n   * @platform ios\r\n   */\r\n  directionalLockEnabled?: ?boolean,\r\n  /**\r\n   * When false, once tracking starts, won't try to drag if the touch moves.\r\n   * The default value is true.\r\n   * @platform ios\r\n   */\r\n  canCancelContentTouches?: ?boolean,\r\n  /**\r\n   * When set, the scroll view will adjust the scroll position so that the first child that is\r\n   * currently visible and at or beyond `minIndexForVisible` will not change position. This is\r\n   * useful for lists that are loading content in both directions, e.g. a chat thread, where new\r\n   * messages coming in might otherwise cause the scroll position to jump. A value of 0 is common,\r\n   * but other values such as 1 can be used to skip loading spinners or other content that should\r\n   * not maintain position.\r\n   *\r\n   * The optional `autoscrollToTopThreshold` can be used to make the content automatically scroll\r\n   * to the top after making the adjustment if the user was within the threshold of the top before\r\n   * the adjustment was made. This is also useful for chat-like applications where you want to see\r\n   * new messages scroll into place, but not if the user has scrolled up a ways and it would be\r\n   * disruptive to scroll a bunch.\r\n   *\r\n   * Caveat 1: Reordering elements in the scrollview with this enabled will probably cause\r\n   * jumpiness and jank. It can be fixed, but there are currently no plans to do so. For now,\r\n   * don't re-order the content of any ScrollViews or Lists that use this feature.\r\n   *\r\n   * Caveat 2: This simply uses `contentOffset` and `frame.origin` in native code to compute\r\n   * visibility. Occlusion, transforms, and other complexity won't be taken into account as to\r\n   * whether content is \"visible\" or not.\r\n   *\r\n   */\r\n  maintainVisibleContentPosition?: ?$ReadOnly<{|\r\n    minIndexForVisible: number,\r\n    autoscrollToTopThreshold?: ?number,\r\n  |}>,\r\n  /**\r\n   * The maximum allowed zoom scale. The default value is 1.0.\r\n   * @platform ios\r\n   */\r\n  maximumZoomScale?: ?number,\r\n  /**\r\n   * The minimum allowed zoom scale. The default value is 1.0.\r\n   * @platform ios\r\n   */\r\n  minimumZoomScale?: ?number,\r\n  /**\r\n   * When true, ScrollView allows use of pinch gestures to zoom in and out.\r\n   * The default value is true.\r\n   * @platform ios\r\n   */\r\n  pinchGestureEnabled?: ?boolean,\r\n  /**\r\n   * The amount by which the scroll view indicators are inset from the edges\r\n   * of the scroll view. This should normally be set to the same value as\r\n   * the `contentInset`. Defaults to `{0, 0, 0, 0}`.\r\n   * @platform ios\r\n   */\r\n  scrollIndicatorInsets?: ?EdgeInsetsProp,\r\n  /**\r\n   * When true, the scroll view can be programmatically scrolled beyond its\r\n   * content size. The default value is false.\r\n   * @platform ios\r\n   */\r\n  scrollToOverflowEnabled?: ?boolean,\r\n  /**\r\n   * When true, the scroll view scrolls to top when the status bar is tapped.\r\n   * The default value is true.\r\n   * @platform ios\r\n   */\r\n  scrollsToTop?: ?boolean,\r\n  /**\r\n   * Fires when the scroll view scrolls to top after the status bar has been tapped\r\n   * @platform ios\r\n   */\r\n  onScrollToTop?: (event: ScrollEvent) => void,\r\n  /**\r\n   * When true, shows a horizontal scroll indicator.\r\n   * The default value is true.\r\n   */\r\n  showsHorizontalScrollIndicator?: ?boolean,\r\n  /**\r\n   * The current scale of the scroll view content. The default value is 1.0.\r\n   * @platform ios\r\n   */\r\n  zoomScale?: ?number,\r\n  /**\r\n   * This property specifies how the safe area insets are used to modify the\r\n   * content area of the scroll view. The default value of this property is\r\n   * \"never\". Available on iOS 11 and later.\r\n   * @platform ios\r\n   */\r\n  contentInsetAdjustmentBehavior?: ?(\r\n    | 'automatic'\r\n    | 'scrollableAxes'\r\n    | 'never'\r\n    | 'always'\r\n  ),\r\n|}>;\r\n\r\ntype AndroidProps = $ReadOnly<{|\r\n  /**\r\n   * Enables nested scrolling for Android API level 21+.\r\n   * Nested scrolling is supported by default on iOS\r\n   * @platform android\r\n   */\r\n  nestedScrollEnabled?: ?boolean,\r\n  /**\r\n   * Sometimes a scrollview takes up more space than its content fills. When this is\r\n   * the case, this prop will fill the rest of the scrollview with a color to avoid setting\r\n   * a background and creating unnecessary overdraw. This is an advanced optimization\r\n   * that is not needed in the general case.\r\n   * @platform android\r\n   */\r\n  endFillColor?: ?ColorValue,\r\n  /**\r\n   * Tag used to log scroll performance on this scroll view. Will force\r\n   * momentum events to be turned on (see sendMomentumEvents). This doesn't do\r\n   * anything out of the box and you need to implement a custom native\r\n   * FpsListener for it to be useful.\r\n   * @platform android\r\n   */\r\n  scrollPerfTag?: ?string,\r\n  /**\r\n   * Used to override default value of overScroll mode.\r\n   *\r\n   * Possible values:\r\n   *\r\n   *  - `'auto'` - Default value, allow a user to over-scroll\r\n   *    this view only if the content is large enough to meaningfully scroll.\r\n   *  - `'always'` - Always allow a user to over-scroll this view.\r\n   *  - `'never'` - Never allow a user to over-scroll this view.\r\n   *\r\n   * @platform android\r\n   */\r\n  overScrollMode?: ?('auto' | 'always' | 'never'),\r\n  /**\r\n   * Causes the scrollbars not to turn transparent when they are not in use.\r\n   * The default value is false.\r\n   *\r\n   * @platform android\r\n   */\r\n  persistentScrollbar?: ?boolean,\r\n  /**\r\n   * Fades out the edges of the scroll content.\r\n   *\r\n   * If the value is greater than 0, the fading edges will be set accordingly\r\n   * to the current scroll direction and position,\r\n   * indicating if there is more content to show.\r\n   *\r\n   * The default value is 0.\r\n   *\r\n   * @platform android\r\n   */\r\n  fadingEdgeLength?: ?number,\r\n|}>;\r\n\r\ntype StickyHeaderComponentType = React.AbstractComponent<\r\n  ScrollViewStickyHeaderProps,\r\n  $ReadOnly<interface {setNextHeaderY: number => void}>,\r\n>;\r\n\r\nexport type Props = $ReadOnly<{|\r\n  ...ViewProps,\r\n  ...IOSProps,\r\n  ...AndroidProps,\r\n\r\n  /**\r\n   * These styles will be applied to the scroll view content container which\r\n   * wraps all of the child views. Example:\r\n   *\r\n   * ```\r\n   * return (\r\n   *   <ScrollView contentContainerStyle={styles.contentContainer}>\r\n   *   </ScrollView>\r\n   * );\r\n   * ...\r\n   * const styles = StyleSheet.create({\r\n   *   contentContainer: {\r\n   *     paddingVertical: 20\r\n   *   }\r\n   * });\r\n   * ```\r\n   */\r\n  contentContainerStyle?: ?ViewStyleProp,\r\n  /**\r\n   * Used to manually set the starting scroll offset.\r\n   * The default value is `{x: 0, y: 0}`.\r\n   */\r\n  contentOffset?: ?PointProp,\r\n  /**\r\n   * When true, the scroll view stops on the next index (in relation to scroll\r\n   * position at release) regardless of how fast the gesture is. This can be\r\n   * used for pagination when the page is less than the width of the\r\n   * horizontal ScrollView or the height of the vertical ScrollView. The default value is false.\r\n   */\r\n  disableIntervalMomentum?: ?boolean,\r\n  /**\r\n   * A floating-point number that determines how quickly the scroll view\r\n   * decelerates after the user lifts their finger. You may also use string\r\n   * shortcuts `\"normal\"` and `\"fast\"` which match the underlying iOS settings\r\n   * for `UIScrollViewDecelerationRateNormal` and\r\n   * `UIScrollViewDecelerationRateFast` respectively.\r\n   *\r\n   *   - `'normal'`: 0.998 on iOS, 0.985 on Android (the default)\r\n   *   - `'fast'`: 0.99 on iOS, 0.9 on Android\r\n   */\r\n  decelerationRate?: ?DecelerationRateType,\r\n  /**\r\n   * When true, the scroll view's children are arranged horizontally in a row\r\n   * instead of vertically in a column. The default value is false.\r\n   */\r\n  horizontal?: ?boolean,\r\n  /**\r\n   * If sticky headers should stick at the bottom instead of the top of the\r\n   * ScrollView. This is usually used with inverted ScrollViews.\r\n   */\r\n  invertStickyHeaders?: ?boolean,\r\n  /**\r\n   * Determines whether the keyboard gets dismissed in response to a drag.\r\n   *\r\n   * *Cross platform*\r\n   *\r\n   *   - `'none'` (the default), drags do not dismiss the keyboard.\r\n   *   - `'on-drag'`, the keyboard is dismissed when a drag begins.\r\n   *\r\n   * *iOS Only*\r\n   *\r\n   *   - `'interactive'`, the keyboard is dismissed interactively with the drag and moves in\r\n   *     synchrony with the touch; dragging upwards cancels the dismissal.\r\n   *     On android this is not supported and it will have the same behavior as 'none'.\r\n   */\r\n  keyboardDismissMode?: ?// default\r\n  // cross-platform\r\n  ('none' | 'on-drag' | 'interactive'), // ios only\r\n  /**\r\n   * Determines when the keyboard should stay visible after a tap.\r\n   *\r\n   *   - `'never'` (the default), tapping outside of the focused text input when the keyboard\r\n   *     is up dismisses the keyboard. When this happens, children won't receive the tap.\r\n   *   - `'always'`, the keyboard will not dismiss automatically, and the scroll view will not\r\n   *     catch taps, but children of the scroll view can catch taps.\r\n   *   - `'handled'`, the keyboard will not dismiss automatically when the tap was handled by\r\n   *     a children, (or captured by an ancestor).\r\n   *   - `false`, deprecated, use 'never' instead\r\n   *   - `true`, deprecated, use 'always' instead\r\n   */\r\n  keyboardShouldPersistTaps?: ?('always' | 'never' | 'handled' | true | false),\r\n  /**\r\n   * Called when the momentum scroll starts (scroll which occurs as the ScrollView glides to a stop).\r\n   */\r\n  onMomentumScrollBegin?: ?(event: ScrollEvent) => void,\r\n  /**\r\n   * Called when the momentum scroll ends (scroll which occurs as the ScrollView glides to a stop).\r\n   */\r\n  onMomentumScrollEnd?: ?(event: ScrollEvent) => void,\r\n\r\n  /**\r\n   * Fires at most once per frame during scrolling. The frequency of the\r\n   * events can be controlled using the `scrollEventThrottle` prop.\r\n   */\r\n  onScroll?: ?(event: ScrollEvent) => void,\r\n  /**\r\n   * Called when the user begins to drag the scroll view.\r\n   */\r\n  onScrollBeginDrag?: ?(event: ScrollEvent) => void,\r\n  /**\r\n   * Called when the user stops dragging the scroll view and it either stops\r\n   * or begins to glide.\r\n   */\r\n  onScrollEndDrag?: ?(event: ScrollEvent) => void,\r\n  /**\r\n   * Called when scrollable content view of the ScrollView changes.\r\n   *\r\n   * Handler function is passed the content width and content height as parameters:\r\n   * `(contentWidth, contentHeight)`\r\n   *\r\n   * It's implemented using onLayout handler attached to the content container\r\n   * which this ScrollView renders.\r\n   */\r\n  onContentSizeChange?: (contentWidth: number, contentHeight: number) => void,\r\n  onKeyboardDidShow?: (event: KeyboardEvent) => void,\r\n  onKeyboardDidHide?: (event: KeyboardEvent) => void,\r\n  onKeyboardWillShow?: (event: KeyboardEvent) => void,\r\n  onKeyboardWillHide?: (event: KeyboardEvent) => void,\r\n  /**\r\n   * When true, the scroll view stops on multiples of the scroll view's size\r\n   * when scrolling. This can be used for horizontal pagination. The default\r\n   * value is false.\r\n   *\r\n   * Note: Vertical pagination is not supported on Android.\r\n   */\r\n  pagingEnabled?: ?boolean,\r\n  /**\r\n   * When false, the view cannot be scrolled via touch interaction.\r\n   * The default value is true.\r\n   *\r\n   * Note that the view can always be scrolled by calling `scrollTo`.\r\n   */\r\n  scrollEnabled?: ?boolean,\r\n  /**\r\n   * This controls how often the scroll event will be fired while scrolling\r\n   * (as a time interval in ms). A lower number yields better accuracy for code\r\n   * that is tracking the scroll position, but can lead to scroll performance\r\n   * problems due to the volume of information being send over the bridge.\r\n   *\r\n   * Values between 0 and 17ms indicate 60fps updates are needed and throttling\r\n   * will be disabled.\r\n   *\r\n   * If you do not need precise scroll position tracking, set this value higher\r\n   * to limit the information being sent across the bridge.\r\n   *\r\n   * The default value is zero, which results in the scroll event being sent only\r\n   * once each time the view is scrolled.\r\n   */\r\n  scrollEventThrottle?: ?number,\r\n  /**\r\n   * When true, shows a vertical scroll indicator.\r\n   * The default value is true.\r\n   */\r\n  showsVerticalScrollIndicator?: ?boolean,\r\n  /**\r\n   * When true, Sticky header is hidden when scrolling down, and dock at the top\r\n   * when scrolling up\r\n   */\r\n  stickyHeaderHiddenOnScroll?: ?boolean,\r\n  /**\r\n   * An array of child indices determining which children get docked to the\r\n   * top of the screen when scrolling. For example, passing\r\n   * `stickyHeaderIndices={[0]}` will cause the first child to be fixed to the\r\n   * top of the scroll view. This property is not supported in conjunction\r\n   * with `horizontal={true}`.\r\n   */\r\n  stickyHeaderIndices?: ?$ReadOnlyArray<number>,\r\n  /**\r\n   * A React Component that will be used to render sticky headers.\r\n   * To be used together with `stickyHeaderIndices` or with `SectionList`, defaults to `ScrollViewStickyHeader`.\r\n   * You may need to set this if your sticky header uses custom transforms (eg. translation),\r\n   * for example when you want your list to have an animated hidable header.\r\n   */\r\n  StickyHeaderComponent?: StickyHeaderComponentType,\r\n  /**\r\n   * When `snapToInterval` is set, `snapToAlignment` will define the relationship\r\n   * of the snapping to the scroll view.\r\n   *\r\n   *   - `'start'` (the default) will align the snap at the left (horizontal) or top (vertical)\r\n   *   - `'center'` will align the snap in the center\r\n   *   - `'end'` will align the snap at the right (horizontal) or bottom (vertical)\r\n   */\r\n  snapToAlignment?: ?('start' | 'center' | 'end'),\r\n  /**\r\n   * When set, causes the scroll view to stop at multiples of the value of\r\n   * `snapToInterval`. This can be used for paginating through children\r\n   * that have lengths smaller than the scroll view. Typically used in\r\n   * combination with `snapToAlignment` and `decelerationRate=\"fast\"`.\r\n   *\r\n   * Overrides less configurable `pagingEnabled` prop.\r\n   */\r\n  snapToInterval?: ?number,\r\n  /**\r\n   * When set, causes the scroll view to stop at the defined offsets.\r\n   * This can be used for paginating through variously sized children\r\n   * that have lengths smaller than the scroll view. Typically used in\r\n   * combination with `decelerationRate=\"fast\"`.\r\n   *\r\n   * Overrides less configurable `pagingEnabled` and `snapToInterval` props.\r\n   */\r\n  snapToOffsets?: ?$ReadOnlyArray<number>,\r\n  /**\r\n   * Use in conjunction with `snapToOffsets`. By default, the beginning\r\n   * of the list counts as a snap offset. Set `snapToStart` to false to disable\r\n   * this behavior and allow the list to scroll freely between its start and\r\n   * the first `snapToOffsets` offset.\r\n   * The default value is true.\r\n   */\r\n  snapToStart?: ?boolean,\r\n  /**\r\n   * Use in conjunction with `snapToOffsets`. By default, the end\r\n   * of the list counts as a snap offset. Set `snapToEnd` to false to disable\r\n   * this behavior and allow the list to scroll freely between its end and\r\n   * the last `snapToOffsets` offset.\r\n   * The default value is true.\r\n   */\r\n  snapToEnd?: ?boolean,\r\n  /**\r\n   * Experimental: When true, offscreen child views (whose `overflow` value is\r\n   * `hidden`) are removed from their native backing superview when offscreen.\r\n   * This can improve scrolling performance on long lists. The default value is\r\n   * true.\r\n   */\r\n  removeClippedSubviews?: ?boolean,\r\n  /**\r\n   * A RefreshControl component, used to provide pull-to-refresh\r\n   * functionality for the ScrollView. Only works for vertical ScrollViews\r\n   * (`horizontal` prop must be `false`).\r\n   *\r\n   * See [RefreshControl](docs/refreshcontrol.html).\r\n   */\r\n  /* $FlowFixMe[unclear-type] - how to handle generic type without existential\r\n   * operator? */\r\n  refreshControl?: ?React.Element<any>,\r\n  children?: React.Node,\r\n  /**\r\n   * A ref to the inner View element of the ScrollView. This should be used\r\n   * instead of calling `getInnerViewRef`.\r\n   */\r\n  innerViewRef?: ForwardedRef<InnerViewInstance>,\r\n  /**\r\n   * A ref to the Native ScrollView component. This ref can be used to call\r\n   * all of ScrollView's public methods, in addition to native methods like\r\n   * measure, measureLayout, etc.\r\n   */\r\n  scrollViewRef?: ForwardedRef<PublicScrollViewInstance>,\r\n|}>;\r\n\r\ntype State = {|\r\n  layoutHeight: ?number,\r\n|};\r\n\r\nconst IS_ANIMATING_TOUCH_START_THRESHOLD_MS = 16;\r\n\r\nexport type ScrollViewComponentStatics = $ReadOnly<{|\r\n  Context: typeof ScrollViewContext,\r\n|}>;\r\n\r\n/**\r\n * Component that wraps platform ScrollView while providing\r\n * integration with touch locking \"responder\" system.\r\n *\r\n * Keep in mind that ScrollViews must have a bounded height in order to work,\r\n * since they contain unbounded-height children into a bounded container (via\r\n * a scroll interaction). In order to bound the height of a ScrollView, either\r\n * set the height of the view directly (discouraged) or make sure all parent\r\n * views have bounded height. Forgetting to transfer `{flex: 1}` down the\r\n * view stack can lead to errors here, which the element inspector makes\r\n * easy to debug.\r\n *\r\n * Doesn't yet support other contained responders from blocking this scroll\r\n * view from becoming the responder.\r\n *\r\n *\r\n * `<ScrollView>` vs [`<FlatList>`](https://reactnative.dev/docs/flatlist) - which one to use?\r\n *\r\n * `ScrollView` simply renders all its react child components at once. That\r\n * makes it very easy to understand and use.\r\n *\r\n * On the other hand, this has a performance downside. Imagine you have a very\r\n * long list of items you want to display, maybe several screens worth of\r\n * content. Creating JS components and native views for everything all at once,\r\n * much of which may not even be shown, will contribute to slow rendering and\r\n * increased memory usage.\r\n *\r\n * This is where `FlatList` comes into play. `FlatList` renders items lazily,\r\n * just when they are about to appear, and removes items that scroll way off\r\n * screen to save memory and processing time.\r\n *\r\n * `FlatList` is also handy if you want to render separators between your items,\r\n * multiple columns, infinite scroll loading, or any number of other features it\r\n * supports out of the box.\r\n */\r\nclass ScrollView extends React.Component<Props, State> {\r\n  static Context: typeof ScrollViewContext = ScrollViewContext;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this._scrollAnimatedValue = new AnimatedImplementation.Value(\r\n      this.props.contentOffset?.y ?? 0,\r\n    );\r\n    this._scrollAnimatedValue.setOffset(this.props.contentInset?.top ?? 0);\r\n  }\r\n\r\n  _scrollAnimatedValue: AnimatedImplementation.Value;\r\n  _scrollAnimatedValueAttachment: ?{detach: () => void, ...} = null;\r\n  _stickyHeaderRefs: Map<string, React.ElementRef<StickyHeaderComponentType>> =\r\n    new Map();\r\n  _headerLayoutYs: Map<string, number> = new Map();\r\n\r\n  _keyboardMetrics: ?KeyboardMetrics = null;\r\n  _additionalScrollOffset: number = 0;\r\n  _isTouching: boolean = false;\r\n  _lastMomentumScrollBeginTime: number = 0;\r\n  _lastMomentumScrollEndTime: number = 0;\r\n\r\n  // Reset to false every time becomes responder. This is used to:\r\n  // - Determine if the scroll view has been scrolled and therefore should\r\n  // refuse to give up its responder lock.\r\n  // - Determine if releasing should dismiss the keyboard when we are in\r\n  // tap-to-dismiss mode (this.props.keyboardShouldPersistTaps !== 'always').\r\n  _observedScrollSinceBecomingResponder: boolean = false;\r\n  _becameResponderWhileAnimating: boolean = false;\r\n  _preventNegativeScrollOffset: ?boolean = null;\r\n\r\n  _animated: ?boolean = null;\r\n\r\n  _subscriptionKeyboardWillShow: ?EventSubscription = null;\r\n  _subscriptionKeyboardWillHide: ?EventSubscription = null;\r\n  _subscriptionKeyboardDidShow: ?EventSubscription = null;\r\n  _subscriptionKeyboardDidHide: ?EventSubscription = null;\r\n\r\n  state: State = {\r\n    layoutHeight: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (typeof this.props.keyboardShouldPersistTaps === 'boolean') {\r\n      console.warn(\r\n        `'keyboardShouldPersistTaps={${\r\n          this.props.keyboardShouldPersistTaps === true ? 'true' : 'false'\r\n        }}' is deprecated. ` +\r\n          `Use 'keyboardShouldPersistTaps=\"${\r\n            this.props.keyboardShouldPersistTaps ? 'always' : 'never'\r\n          }\"' instead`,\r\n      );\r\n    }\r\n\r\n    this._keyboardMetrics = Keyboard.metrics();\r\n    this._additionalScrollOffset = 0;\r\n\r\n    this._subscriptionKeyboardWillShow = Keyboard.addListener(\r\n      'keyboardWillShow',\r\n      this.scrollResponderKeyboardWillShow,\r\n    );\r\n    this._subscriptionKeyboardWillHide = Keyboard.addListener(\r\n      'keyboardWillHide',\r\n      this.scrollResponderKeyboardWillHide,\r\n    );\r\n    this._subscriptionKeyboardDidShow = Keyboard.addListener(\r\n      'keyboardDidShow',\r\n      this.scrollResponderKeyboardDidShow,\r\n    );\r\n    this._subscriptionKeyboardDidHide = Keyboard.addListener(\r\n      'keyboardDidHide',\r\n      this.scrollResponderKeyboardDidHide,\r\n    );\r\n\r\n    this._updateAnimatedNodeAttachment();\r\n  }\r\n\r\n  componentDidUpdate(prevProps: Props) {\r\n    const prevContentInsetTop = prevProps.contentInset\r\n      ? prevProps.contentInset.top\r\n      : 0;\r\n    const newContentInsetTop = this.props.contentInset\r\n      ? this.props.contentInset.top\r\n      : 0;\r\n    if (prevContentInsetTop !== newContentInsetTop) {\r\n      this._scrollAnimatedValue.setOffset(newContentInsetTop || 0);\r\n    }\r\n\r\n    this._updateAnimatedNodeAttachment();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    if (this._subscriptionKeyboardWillShow != null) {\r\n      this._subscriptionKeyboardWillShow.remove();\r\n    }\r\n    if (this._subscriptionKeyboardWillHide != null) {\r\n      this._subscriptionKeyboardWillHide.remove();\r\n    }\r\n    if (this._subscriptionKeyboardDidShow != null) {\r\n      this._subscriptionKeyboardDidShow.remove();\r\n    }\r\n    if (this._subscriptionKeyboardDidHide != null) {\r\n      this._subscriptionKeyboardDidHide.remove();\r\n    }\r\n\r\n    if (this._scrollAnimatedValueAttachment) {\r\n      this._scrollAnimatedValueAttachment.detach();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns a reference to the underlying scroll responder, which supports\r\n   * operations like `scrollTo`. All ScrollView-like components should\r\n   * implement this method so that they can be composed while providing access\r\n   * to the underlying scroll responder's methods.\r\n   */\r\n  getScrollResponder: () => ScrollResponderType = () => {\r\n    // $FlowFixMe[unclear-type]\r\n    return ((this: any): ScrollResponderType);\r\n  };\r\n\r\n  getScrollableNode: () => ?number = () => {\r\n    return findNodeHandle(this._scrollView.nativeInstance);\r\n  };\r\n\r\n  getInnerViewNode: () => ?number = () => {\r\n    return findNodeHandle(this._innerView.nativeInstance);\r\n  };\r\n\r\n  getInnerViewRef: () => InnerViewInstance | null = () => {\r\n    return this._innerView.nativeInstance;\r\n  };\r\n\r\n  getNativeScrollRef: () => NativeScrollViewInstance | null = () => {\r\n    return this._scrollView.nativeInstance;\r\n  };\r\n\r\n  /**\r\n   * Scrolls to a given x, y offset, either immediately or with a smooth animation.\r\n   *\r\n   * Example:\r\n   *\r\n   * `scrollTo({x: 0, y: 0, animated: true})`\r\n   *\r\n   * Note: The weird function signature is due to the fact that, for historical reasons,\r\n   * the function also accepts separate arguments as an alternative to the options object.\r\n   * This is deprecated due to ambiguity (y before x), and SHOULD NOT BE USED.\r\n   */\r\n  scrollTo: (\r\n    options?:\r\n      | {\r\n          x?: number,\r\n          y?: number,\r\n          animated?: boolean,\r\n          ...\r\n        }\r\n      | number,\r\n    deprecatedX?: number,\r\n    deprecatedAnimated?: boolean,\r\n  ) => void = (\r\n    options?:\r\n      | {\r\n          x?: number,\r\n          y?: number,\r\n          animated?: boolean,\r\n          ...\r\n        }\r\n      | number,\r\n    deprecatedX?: number,\r\n    deprecatedAnimated?: boolean,\r\n  ) => {\r\n    let x, y, animated;\r\n    if (typeof options === 'number') {\r\n      console.warn(\r\n        '`scrollTo(y, x, animated)` is deprecated. Use `scrollTo({x: 5, y: 5, ' +\r\n          'animated: true})` instead.',\r\n      );\r\n      y = options;\r\n      x = deprecatedX;\r\n      animated = deprecatedAnimated;\r\n    } else if (options) {\r\n      y = options.y;\r\n      x = options.x;\r\n      animated = options.animated;\r\n    }\r\n    if (this._scrollView.nativeInstance == null) {\r\n      return;\r\n    }\r\n    Commands.scrollTo(\r\n      this._scrollView.nativeInstance,\r\n      x || 0,\r\n      y || 0,\r\n      animated !== false,\r\n    );\r\n  };\r\n\r\n  /**\r\n   * If this is a vertical ScrollView scrolls to the bottom.\r\n   * If this is a horizontal ScrollView scrolls to the right.\r\n   *\r\n   * Use `scrollToEnd({animated: true})` for smooth animated scrolling,\r\n   * `scrollToEnd({animated: false})` for immediate scrolling.\r\n   * If no options are passed, `animated` defaults to true.\r\n   */\r\n  scrollToEnd: (options?: ?{animated?: boolean, ...}) => void = (\r\n    options?: ?{animated?: boolean, ...},\r\n  ) => {\r\n    // Default to true\r\n    const animated = (options && options.animated) !== false;\r\n    if (this._scrollView.nativeInstance == null) {\r\n      return;\r\n    }\r\n    Commands.scrollToEnd(this._scrollView.nativeInstance, animated);\r\n  };\r\n\r\n  /**\r\n   * Displays the scroll indicators momentarily.\r\n   *\r\n   * @platform ios\r\n   */\r\n  flashScrollIndicators: () => void = () => {\r\n    if (this._scrollView.nativeInstance == null) {\r\n      return;\r\n    }\r\n    Commands.flashScrollIndicators(this._scrollView.nativeInstance);\r\n  };\r\n\r\n  /**\r\n   * This method should be used as the callback to onFocus in a TextInputs'\r\n   * parent view. Note that any module using this mixin needs to return\r\n   * the parent view's ref in getScrollViewRef() in order to use this method.\r\n   * @param {number} nodeHandle The TextInput node handle\r\n   * @param {number} additionalOffset The scroll view's bottom \"contentInset\".\r\n   *        Default is 0.\r\n   * @param {bool} preventNegativeScrolling Whether to allow pulling the content\r\n   *        down to make it meet the keyboard's top. Default is false.\r\n   */\r\n  scrollResponderScrollNativeHandleToKeyboard: <T>(\r\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\r\n    additionalOffset?: number,\r\n    preventNegativeScrollOffset?: boolean,\r\n  ) => void = <T>(\r\n    nodeHandle: number | React.ElementRef<HostComponent<T>>,\r\n    additionalOffset?: number,\r\n    preventNegativeScrollOffset?: boolean,\r\n  ) => {\r\n    this._additionalScrollOffset = additionalOffset || 0;\r\n    this._preventNegativeScrollOffset = !!preventNegativeScrollOffset;\r\n\r\n    if (this._innerView.nativeInstance == null) {\r\n      return;\r\n    }\r\n\r\n    if (typeof nodeHandle === 'number') {\r\n      UIManager.measureLayout(\r\n        nodeHandle,\r\n        nullthrows(findNodeHandle(this)),\r\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\r\n        this._textInputFocusError,\r\n        this._inputMeasureAndScrollToKeyboard,\r\n      );\r\n    } else {\r\n      nodeHandle.measureLayout(\r\n        this._innerView.nativeInstance,\r\n        this._inputMeasureAndScrollToKeyboard,\r\n        // $FlowFixMe[method-unbinding] added when improving typing for this parameters\r\n        this._textInputFocusError,\r\n      );\r\n    }\r\n  };\r\n\r\n  /**\r\n   * A helper function to zoom to a specific rect in the scrollview. The argument has the shape\r\n   * {x: number; y: number; width: number; height: number; animated: boolean = true}\r\n   *\r\n   * @platform ios\r\n   */\r\n  scrollResponderZoomTo: (\r\n    rect: {|\r\n      x: number,\r\n      y: number,\r\n      width: number,\r\n      height: number,\r\n      animated?: boolean,\r\n    |},\r\n    animated?: boolean, // deprecated, put this inside the rect argument instead\r\n  ) => void = (\r\n    rect: {|\r\n      x: number,\r\n      y: number,\r\n      width: number,\r\n      height: number,\r\n      animated?: boolean,\r\n    |},\r\n    animated?: boolean, // deprecated, put this inside the rect argument instead\r\n  ) => {\r\n    invariant(Platform.OS === 'ios', 'zoomToRect is not implemented');\r\n    if ('animated' in rect) {\r\n      this._animated = rect.animated;\r\n      delete rect.animated;\r\n    } else if (typeof animated !== 'undefined') {\r\n      console.warn(\r\n        '`scrollResponderZoomTo` `animated` argument is deprecated. Use `options.animated` instead',\r\n      );\r\n    }\r\n\r\n    if (this._scrollView.nativeInstance == null) {\r\n      return;\r\n    }\r\n    Commands.zoomToRect(\r\n      this._scrollView.nativeInstance,\r\n      rect,\r\n      animated !== false,\r\n    );\r\n  };\r\n\r\n  _textInputFocusError() {\r\n    console.warn('Error measuring text field.');\r\n  }\r\n\r\n  /**\r\n   * The calculations performed here assume the scroll view takes up the entire\r\n   * screen - even if has some content inset. We then measure the offsets of the\r\n   * keyboard, and compensate both for the scroll view's \"contentInset\".\r\n   *\r\n   * @param {number} left Position of input w.r.t. table view.\r\n   * @param {number} top Position of input w.r.t. table view.\r\n   * @param {number} width Width of the text input.\r\n   * @param {number} height Height of the text input.\r\n   */\r\n  _inputMeasureAndScrollToKeyboard: (\r\n    left: number,\r\n    top: number,\r\n    width: number,\r\n    height: number,\r\n  ) => void = (left: number, top: number, width: number, height: number) => {\r\n    let keyboardScreenY = Dimensions.get('window').height;\r\n\r\n    const scrollTextInputIntoVisibleRect = () => {\r\n      if (this._keyboardMetrics != null) {\r\n        keyboardScreenY = this._keyboardMetrics.screenY;\r\n      }\r\n      let scrollOffsetY =\r\n        top - keyboardScreenY + height + this._additionalScrollOffset;\r\n\r\n      // By default, this can scroll with negative offset, pulling the content\r\n      // down so that the target component's bottom meets the keyboard's top.\r\n      // If requested otherwise, cap the offset at 0 minimum to avoid content\r\n      // shifting down.\r\n      if (this._preventNegativeScrollOffset === true) {\r\n        scrollOffsetY = Math.max(0, scrollOffsetY);\r\n      }\r\n      this.scrollTo({x: 0, y: scrollOffsetY, animated: true});\r\n\r\n      this._additionalScrollOffset = 0;\r\n      this._preventNegativeScrollOffset = false;\r\n    };\r\n\r\n    if (this._keyboardMetrics == null) {\r\n      // `_keyboardMetrics` is set inside `scrollResponderKeyboardWillShow` which\r\n      // is not guaranteed to be called before `_inputMeasureAndScrollToKeyboard` but native has already scheduled it.\r\n      // In case it was not called before `_inputMeasureAndScrollToKeyboard`, we postpone scrolling to\r\n      // text input.\r\n      setTimeout(() => {\r\n        scrollTextInputIntoVisibleRect();\r\n      }, 0);\r\n    } else {\r\n      scrollTextInputIntoVisibleRect();\r\n    }\r\n  };\r\n\r\n  _getKeyForIndex(index: $FlowFixMe, childArray: $FlowFixMe): $FlowFixMe {\r\n    const child = childArray[index];\r\n    return child && child.key;\r\n  }\r\n\r\n  _updateAnimatedNodeAttachment() {\r\n    if (this._scrollAnimatedValueAttachment) {\r\n      this._scrollAnimatedValueAttachment.detach();\r\n    }\r\n    if (\r\n      this.props.stickyHeaderIndices &&\r\n      this.props.stickyHeaderIndices.length > 0\r\n    ) {\r\n      this._scrollAnimatedValueAttachment =\r\n        AnimatedImplementation.attachNativeEvent(\r\n          this._scrollView.nativeInstance,\r\n          'onScroll',\r\n          [{nativeEvent: {contentOffset: {y: this._scrollAnimatedValue}}}],\r\n        );\r\n    }\r\n  }\r\n\r\n  _setStickyHeaderRef(\r\n    key: string,\r\n    ref: ?React.ElementRef<StickyHeaderComponentType>,\r\n  ) {\r\n    if (ref) {\r\n      this._stickyHeaderRefs.set(key, ref);\r\n    } else {\r\n      this._stickyHeaderRefs.delete(key);\r\n    }\r\n  }\r\n\r\n  _onStickyHeaderLayout(index: $FlowFixMe, event: $FlowFixMe, key: $FlowFixMe) {\r\n    const {stickyHeaderIndices} = this.props;\r\n    if (!stickyHeaderIndices) {\r\n      return;\r\n    }\r\n    const childArray = React.Children.toArray<$FlowFixMe>(this.props.children);\r\n    if (key !== this._getKeyForIndex(index, childArray)) {\r\n      // ignore stale layout update\r\n      return;\r\n    }\r\n\r\n    const layoutY = event.nativeEvent.layout.y;\r\n    this._headerLayoutYs.set(key, layoutY);\r\n\r\n    const indexOfIndex = stickyHeaderIndices.indexOf(index);\r\n    const previousHeaderIndex = stickyHeaderIndices[indexOfIndex - 1];\r\n    if (previousHeaderIndex != null) {\r\n      const previousHeader = this._stickyHeaderRefs.get(\r\n        this._getKeyForIndex(previousHeaderIndex, childArray),\r\n      );\r\n      previousHeader &&\r\n        previousHeader.setNextHeaderY &&\r\n        previousHeader.setNextHeaderY(layoutY);\r\n    }\r\n  }\r\n\r\n  _handleScroll = (e: ScrollEvent) => {\r\n    if (__DEV__) {\r\n      if (\r\n        this.props.onScroll &&\r\n        this.props.scrollEventThrottle == null &&\r\n        Platform.OS === 'ios'\r\n      ) {\r\n        console.log(\r\n          'You specified `onScroll` on a <ScrollView> but not ' +\r\n            '`scrollEventThrottle`. You will only receive one event. ' +\r\n            'Using `16` you get all the events but be aware that it may ' +\r\n            \"cause frame drops, use a bigger number if you don't need as \" +\r\n            'much precision.',\r\n        );\r\n      }\r\n    }\r\n    this._observedScrollSinceBecomingResponder = true;\r\n    this.props.onScroll && this.props.onScroll(e);\r\n  };\r\n\r\n  _handleLayout = (e: LayoutEvent) => {\r\n    if (this.props.invertStickyHeaders === true) {\r\n      this.setState({layoutHeight: e.nativeEvent.layout.height});\r\n    }\r\n    if (this.props.onLayout) {\r\n      this.props.onLayout(e);\r\n    }\r\n  };\r\n\r\n  _handleContentOnLayout = (e: LayoutEvent) => {\r\n    const {width, height} = e.nativeEvent.layout;\r\n    this.props.onContentSizeChange &&\r\n      this.props.onContentSizeChange(width, height);\r\n  };\r\n\r\n  _innerView: RefForwarder<InnerViewInstance, InnerViewInstance> =\r\n    createRefForwarder(\r\n      (instance: InnerViewInstance): InnerViewInstance => instance,\r\n    );\r\n\r\n  _scrollView: RefForwarder<\r\n    NativeScrollViewInstance,\r\n    PublicScrollViewInstance,\r\n  > = createRefForwarder(\r\n    (nativeInstance: NativeScrollViewInstance): PublicScrollViewInstance => {\r\n      // This is a hack. Ideally we would forwardRef  to the underlying\r\n      // host component. However, since ScrollView has it's own methods that can be\r\n      // called as well, if we used the standard forwardRef then these\r\n      // methods wouldn't be accessible and thus be a breaking change.\r\n      //\r\n      // Therefore we edit ref to include ScrollView's public methods so that\r\n      // they are callable from the ref.\r\n\r\n      // $FlowFixMe[prop-missing] - Known issue with appending custom methods.\r\n      const publicInstance: PublicScrollViewInstance = Object.assign(\r\n        nativeInstance,\r\n        {\r\n          getScrollResponder: this.getScrollResponder,\r\n          getScrollableNode: this.getScrollableNode,\r\n          getInnerViewNode: this.getInnerViewNode,\r\n          getInnerViewRef: this.getInnerViewRef,\r\n          getNativeScrollRef: this.getNativeScrollRef,\r\n          scrollTo: this.scrollTo,\r\n          scrollToEnd: this.scrollToEnd,\r\n          flashScrollIndicators: this.flashScrollIndicators,\r\n          scrollResponderZoomTo: this.scrollResponderZoomTo,\r\n          scrollResponderScrollNativeHandleToKeyboard:\r\n            this.scrollResponderScrollNativeHandleToKeyboard,\r\n        },\r\n      );\r\n\r\n      return publicInstance;\r\n    },\r\n  );\r\n\r\n  /**\r\n   * Warning, this may be called several times for a single keyboard opening.\r\n   * It's best to store the information in this method and then take any action\r\n   * at a later point (either in `keyboardDidShow` or other).\r\n   *\r\n   * Here's the order that events occur in:\r\n   * - focus\r\n   * - willShow {startCoordinates, endCoordinates} several times\r\n   * - didShow several times\r\n   * - blur\r\n   * - willHide {startCoordinates, endCoordinates} several times\r\n   * - didHide several times\r\n   *\r\n   * The `ScrollResponder` module callbacks for each of these events.\r\n   * Even though any user could have easily listened to keyboard events\r\n   * themselves, using these `props` callbacks ensures that ordering of events\r\n   * is consistent - and not dependent on the order that the keyboard events are\r\n   * subscribed to. This matters when telling the scroll view to scroll to where\r\n   * the keyboard is headed - the scroll responder better have been notified of\r\n   * the keyboard destination before being instructed to scroll to where the\r\n   * keyboard will be. Stick to the `ScrollResponder` callbacks, and everything\r\n   * will work.\r\n   *\r\n   * WARNING: These callbacks will fire even if a keyboard is displayed in a\r\n   * different navigation pane. Filter out the events to determine if they are\r\n   * relevant to you. (For example, only if you receive these callbacks after\r\n   * you had explicitly focused a node etc).\r\n   */\r\n\r\n  scrollResponderKeyboardWillShow: (e: KeyboardEvent) => void = (\r\n    e: KeyboardEvent,\r\n  ) => {\r\n    this._keyboardMetrics = e.endCoordinates;\r\n    this.props.onKeyboardWillShow && this.props.onKeyboardWillShow(e);\r\n  };\r\n\r\n  scrollResponderKeyboardWillHide: (e: KeyboardEvent) => void = (\r\n    e: KeyboardEvent,\r\n  ) => {\r\n    this._keyboardMetrics = null;\r\n    this.props.onKeyboardWillHide && this.props.onKeyboardWillHide(e);\r\n  };\r\n\r\n  scrollResponderKeyboardDidShow: (e: KeyboardEvent) => void = (\r\n    e: KeyboardEvent,\r\n  ) => {\r\n    this._keyboardMetrics = e.endCoordinates;\r\n    this.props.onKeyboardDidShow && this.props.onKeyboardDidShow(e);\r\n  };\r\n\r\n  scrollResponderKeyboardDidHide: (e: KeyboardEvent) => void = (\r\n    e: KeyboardEvent,\r\n  ) => {\r\n    this._keyboardMetrics = null;\r\n    this.props.onKeyboardDidHide && this.props.onKeyboardDidHide(e);\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onMomentumScrollBegin` event.\r\n   */\r\n  _handleMomentumScrollBegin: (e: ScrollEvent) => void = (e: ScrollEvent) => {\r\n    this._lastMomentumScrollBeginTime = global.performance.now();\r\n    this.props.onMomentumScrollBegin && this.props.onMomentumScrollBegin(e);\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onMomentumScrollEnd` event.\r\n   */\r\n  _handleMomentumScrollEnd: (e: ScrollEvent) => void = (e: ScrollEvent) => {\r\n    FrameRateLogger.endScroll();\r\n    this._lastMomentumScrollEndTime = global.performance.now();\r\n    this.props.onMomentumScrollEnd && this.props.onMomentumScrollEnd(e);\r\n  };\r\n\r\n  /**\r\n   * Unfortunately, `onScrollBeginDrag` also fires when *stopping* the scroll\r\n   * animation, and there's not an easy way to distinguish a drag vs. stopping\r\n   * momentum.\r\n   *\r\n   * Invoke this from an `onScrollBeginDrag` event.\r\n   */\r\n  _handleScrollBeginDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\r\n    FrameRateLogger.beginScroll(); // TODO: track all scrolls after implementing onScrollEndAnimation\r\n\r\n    if (\r\n      Platform.OS === 'android' &&\r\n      this.props.keyboardDismissMode === 'on-drag'\r\n    ) {\r\n      dismissKeyboard();\r\n    }\r\n\r\n    this.props.onScrollBeginDrag && this.props.onScrollBeginDrag(e);\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onScrollEndDrag` event.\r\n   */\r\n  _handleScrollEndDrag: (e: ScrollEvent) => void = (e: ScrollEvent) => {\r\n    const {velocity} = e.nativeEvent;\r\n    // - If we are animating, then this is a \"drag\" that is stopping the scrollview and momentum end\r\n    //   will fire.\r\n    // - If velocity is non-zero, then the interaction will stop when momentum scroll ends or\r\n    //   another drag starts and ends.\r\n    // - If we don't get velocity, better to stop the interaction twice than not stop it.\r\n    if (\r\n      !this._isAnimating() &&\r\n      (!velocity || (velocity.x === 0 && velocity.y === 0))\r\n    ) {\r\n      FrameRateLogger.endScroll();\r\n    }\r\n    this.props.onScrollEndDrag && this.props.onScrollEndDrag(e);\r\n  };\r\n\r\n  /**\r\n   * A helper function for this class that lets us quickly determine if the\r\n   * view is currently animating. This is particularly useful to know when\r\n   * a touch has just started or ended.\r\n   */\r\n  _isAnimating: () => boolean = () => {\r\n    const now = global.performance.now();\r\n    const timeSinceLastMomentumScrollEnd =\r\n      now - this._lastMomentumScrollEndTime;\r\n    const isAnimating =\r\n      timeSinceLastMomentumScrollEnd < IS_ANIMATING_TOUCH_START_THRESHOLD_MS ||\r\n      this._lastMomentumScrollEndTime < this._lastMomentumScrollBeginTime;\r\n    return isAnimating;\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onResponderGrant` event.\r\n   */\r\n  _handleResponderGrant: (e: PressEvent) => void = (e: PressEvent) => {\r\n    this._observedScrollSinceBecomingResponder = false;\r\n    this.props.onResponderGrant && this.props.onResponderGrant(e);\r\n    this._becameResponderWhileAnimating = this._isAnimating();\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onResponderReject` event.\r\n   *\r\n   * Some other element is not yielding its role as responder. Normally, we'd\r\n   * just disable the `UIScrollView`, but a touch has already began on it, the\r\n   * `UIScrollView` will not accept being disabled after that. The easiest\r\n   * solution for now is to accept the limitation of disallowing this\r\n   * altogether. To improve this, find a way to disable the `UIScrollView` after\r\n   * a touch has already started.\r\n   */\r\n  _handleResponderReject: () => void = () => {};\r\n\r\n  /**\r\n   * Invoke this from an `onResponderRelease` event.\r\n   */\r\n  _handleResponderRelease: (e: PressEvent) => void = (e: PressEvent) => {\r\n    this._isTouching = e.nativeEvent.touches.length !== 0;\r\n    this.props.onResponderRelease && this.props.onResponderRelease(e);\r\n\r\n    if (typeof e.target === 'number') {\r\n      if (__DEV__) {\r\n        console.error(\r\n          'Did not expect event target to be a number. Should have been a native component',\r\n        );\r\n      }\r\n\r\n      return;\r\n    }\r\n\r\n    // By default scroll views will unfocus a textField\r\n    // if another touch occurs outside of it\r\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\r\n    if (\r\n      currentlyFocusedTextInput != null &&\r\n      this.props.keyboardShouldPersistTaps !== true &&\r\n      this.props.keyboardShouldPersistTaps !== 'always' &&\r\n      this._keyboardIsDismissible() &&\r\n      e.target !== currentlyFocusedTextInput &&\r\n      !this._observedScrollSinceBecomingResponder &&\r\n      !this._becameResponderWhileAnimating\r\n    ) {\r\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * We will allow the scroll view to give up its lock iff it acquired the lock\r\n   * during an animation. This is a very useful default that happens to satisfy\r\n   * many common user experiences.\r\n   *\r\n   * - Stop a scroll on the left edge, then turn that into an outer view's\r\n   *   backswipe.\r\n   * - Stop a scroll mid-bounce at the top, continue pulling to have the outer\r\n   *   view dismiss.\r\n   * - However, without catching the scroll view mid-bounce (while it is\r\n   *   motionless), if you drag far enough for the scroll view to become\r\n   *   responder (and therefore drag the scroll view a bit), any backswipe\r\n   *   navigation of a swipe gesture higher in the view hierarchy, should be\r\n   *   rejected.\r\n   */\r\n  _handleResponderTerminationRequest: () => boolean = () => {\r\n    return !this._observedScrollSinceBecomingResponder;\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onScroll` event.\r\n   */\r\n  _handleScrollShouldSetResponder: () => boolean = () => {\r\n    // Allow any event touch pass through if the default pan responder is disabled\r\n    if (this.props.disableScrollViewPanResponder === true) {\r\n      return false;\r\n    }\r\n    return this._isTouching;\r\n  };\r\n\r\n  /**\r\n   * Merely touch starting is not sufficient for a scroll view to become the\r\n   * responder. Being the \"responder\" means that the very next touch move/end\r\n   * event will result in an action/movement.\r\n   *\r\n   * Invoke this from an `onStartShouldSetResponder` event.\r\n   *\r\n   * `onStartShouldSetResponder` is used when the next move/end will trigger\r\n   * some UI movement/action, but when you want to yield priority to views\r\n   * nested inside of the view.\r\n   *\r\n   * There may be some cases where scroll views actually should return `true`\r\n   * from `onStartShouldSetResponder`: Any time we are detecting a standard tap\r\n   * that gives priority to nested views.\r\n   *\r\n   * - If a single tap on the scroll view triggers an action such as\r\n   *   recentering a map style view yet wants to give priority to interaction\r\n   *   views inside (such as dropped pins or labels), then we would return true\r\n   *   from this method when there is a single touch.\r\n   *\r\n   * - Similar to the previous case, if a two finger \"tap\" should trigger a\r\n   *   zoom, we would check the `touches` count, and if `>= 2`, we would return\r\n   *   true.\r\n   *\r\n   */\r\n  _handleStartShouldSetResponder: (e: PressEvent) => boolean = (\r\n    e: PressEvent,\r\n  ) => {\r\n    // Allow any event touch pass through if the default pan responder is disabled\r\n    if (this.props.disableScrollViewPanResponder === true) {\r\n      return false;\r\n    }\r\n\r\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\r\n    if (\r\n      this.props.keyboardShouldPersistTaps === 'handled' &&\r\n      this._keyboardIsDismissible() &&\r\n      e.target !== currentlyFocusedInput\r\n    ) {\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * There are times when the scroll view wants to become the responder\r\n   * (meaning respond to the next immediate `touchStart/touchEnd`), in a way\r\n   * that *doesn't* give priority to nested views (hence the capture phase):\r\n   *\r\n   * - Currently animating.\r\n   * - Tapping anywhere that is not a text input, while the keyboard is\r\n   *   up (which should dismiss the keyboard).\r\n   *\r\n   * Invoke this from an `onStartShouldSetResponderCapture` event.\r\n   */\r\n  _handleStartShouldSetResponderCapture: (e: PressEvent) => boolean = (\r\n    e: PressEvent,\r\n  ) => {\r\n    // The scroll view should receive taps instead of its descendants if:\r\n    // * it is already animating/decelerating\r\n    if (this._isAnimating()) {\r\n      return true;\r\n    }\r\n\r\n    // Allow any event touch pass through if the default pan responder is disabled\r\n    if (this.props.disableScrollViewPanResponder === true) {\r\n      return false;\r\n    }\r\n\r\n    // * the keyboard is up, keyboardShouldPersistTaps is 'never' (the default),\r\n    // and a new touch starts with a non-textinput target (in which case the\r\n    // first tap should be sent to the scroll view and dismiss the keyboard,\r\n    // then the second tap goes to the actual interior view)\r\n    const {keyboardShouldPersistTaps} = this.props;\r\n    const keyboardNeverPersistTaps =\r\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\r\n\r\n    if (typeof e.target === 'number') {\r\n      if (__DEV__) {\r\n        console.error(\r\n          'Did not expect event target to be a number. Should have been a native component',\r\n        );\r\n      }\r\n\r\n      return false;\r\n    }\r\n\r\n    // Let presses through if the soft keyboard is detached from the viewport\r\n    if (this._softKeyboardIsDetached()) {\r\n      return false;\r\n    }\r\n\r\n    if (\r\n      keyboardNeverPersistTaps &&\r\n      this._keyboardIsDismissible() &&\r\n      e.target != null &&\r\n      // $FlowFixMe[incompatible-call]\r\n      !TextInputState.isTextInput(e.target)\r\n    ) {\r\n      return true;\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  /**\r\n   * Do we consider there to be a dismissible soft-keyboard open?\r\n   */\r\n  _keyboardIsDismissible: () => boolean = () => {\r\n    const currentlyFocusedInput = TextInputState.currentlyFocusedInput();\r\n\r\n    // We cannot dismiss the keyboard without an input to blur, even if a soft\r\n    // keyboard is open (e.g. when keyboard is open due to a native component\r\n    // not participating in TextInputState). It's also possible that the\r\n    // currently focused input isn't a TextInput (such as by calling ref.focus\r\n    // on a non-TextInput).\r\n    const hasFocusedTextInput =\r\n      currentlyFocusedInput != null &&\r\n      TextInputState.isTextInput(currentlyFocusedInput);\r\n\r\n    // Even if an input is focused, we may not have a keyboard to dismiss. E.g\r\n    // when using a physical keyboard. Ensure we have an event for an opened\r\n    // keyboard.\r\n    const softKeyboardMayBeOpen =\r\n      this._keyboardMetrics != null || this._keyboardEventsAreUnreliable();\r\n\r\n    return hasFocusedTextInput && softKeyboardMayBeOpen;\r\n  };\r\n\r\n  /**\r\n   * Whether an open soft keyboard is present which does not overlap the\r\n   * viewport. E.g. for a VR soft-keyboard which is detached from the app\r\n   * viewport.\r\n   */\r\n  _softKeyboardIsDetached: () => boolean = () => {\r\n    return this._keyboardMetrics != null && this._keyboardMetrics.height === 0;\r\n  };\r\n\r\n  _keyboardEventsAreUnreliable: () => boolean = () => {\r\n    // Android versions prior to API 30 rely on observing layout changes when\r\n    // `android:windowSoftInputMode` is set to `adjustResize` or `adjustPan`.\r\n    return Platform.OS === 'android' && Platform.Version < 30;\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onTouchEnd` event.\r\n   *\r\n   * @param {PressEvent} e Event.\r\n   */\r\n  _handleTouchEnd: (e: PressEvent) => void = (e: PressEvent) => {\r\n    const nativeEvent = e.nativeEvent;\r\n    this._isTouching = nativeEvent.touches.length !== 0;\r\n\r\n    const {keyboardShouldPersistTaps} = this.props;\r\n    const keyboardNeverPersistsTaps =\r\n      !keyboardShouldPersistTaps || keyboardShouldPersistTaps === 'never';\r\n\r\n    // Dismiss the keyboard now if we didn't become responder in capture phase\r\n    // to eat presses, but still want to dismiss on interaction.\r\n    // Don't do anything if the target of the touch event is the current input.\r\n    const currentlyFocusedTextInput = TextInputState.currentlyFocusedInput();\r\n    if (\r\n      currentlyFocusedTextInput != null &&\r\n      e.target !== currentlyFocusedTextInput &&\r\n      this._softKeyboardIsDetached() &&\r\n      this._keyboardIsDismissible() &&\r\n      keyboardNeverPersistsTaps\r\n    ) {\r\n      TextInputState.blurTextInput(currentlyFocusedTextInput);\r\n    }\r\n\r\n    this.props.onTouchEnd && this.props.onTouchEnd(e);\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onTouchCancel` event.\r\n   *\r\n   * @param {PressEvent} e Event.\r\n   */\r\n  _handleTouchCancel: (e: PressEvent) => void = (e: PressEvent) => {\r\n    this._isTouching = false;\r\n    this.props.onTouchCancel && this.props.onTouchCancel(e);\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onTouchStart` event.\r\n   *\r\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\r\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\r\n   * permitted to be the responder (presumably because a contained view became\r\n   * responder). The `onResponderReject` won't fire in that case - it only\r\n   * fires when a *current* responder rejects our request.\r\n   *\r\n   * @param {PressEvent} e Touch Start event.\r\n   */\r\n  _handleTouchStart: (e: PressEvent) => void = (e: PressEvent) => {\r\n    this._isTouching = true;\r\n    this.props.onTouchStart && this.props.onTouchStart(e);\r\n  };\r\n\r\n  /**\r\n   * Invoke this from an `onTouchMove` event.\r\n   *\r\n   * Since we know that the `SimpleEventPlugin` occurs later in the plugin\r\n   * order, after `ResponderEventPlugin`, we can detect that we were *not*\r\n   * permitted to be the responder (presumably because a contained view became\r\n   * responder). The `onResponderReject` won't fire in that case - it only\r\n   * fires when a *current* responder rejects our request.\r\n   *\r\n   * @param {PressEvent} e Touch Start event.\r\n   */\r\n  _handleTouchMove: (e: PressEvent) => void = (e: PressEvent) => {\r\n    this.props.onTouchMove && this.props.onTouchMove(e);\r\n  };\r\n\r\n  render(): React.Node | React.Element<string> {\r\n    const [NativeDirectionalScrollView, NativeDirectionalScrollContentView] =\r\n      this.props.horizontal === true\r\n        ? NativeHorizontalScrollViewTuple\r\n        : NativeVerticalScrollViewTuple;\r\n\r\n    const contentContainerStyle = [\r\n      this.props.horizontal === true && styles.contentContainerHorizontal,\r\n      this.props.contentContainerStyle,\r\n    ];\r\n    if (__DEV__ && this.props.style !== undefined) {\r\n      // $FlowFixMe[underconstrained-implicit-instantiation]\r\n      const style = flattenStyle(this.props.style);\r\n      const childLayoutProps = ['alignItems', 'justifyContent'].filter(\r\n        prop => style && style[prop] !== undefined,\r\n      );\r\n      invariant(\r\n        childLayoutProps.length === 0,\r\n        'ScrollView child layout (' +\r\n          JSON.stringify(childLayoutProps) +\r\n          ') must be applied through the contentContainerStyle prop.',\r\n      );\r\n    }\r\n\r\n    const contentSizeChangeProps =\r\n      this.props.onContentSizeChange == null\r\n        ? null\r\n        : {\r\n            onLayout: this._handleContentOnLayout,\r\n          };\r\n\r\n    const {stickyHeaderIndices} = this.props;\r\n    let children = this.props.children;\r\n\r\n    if (stickyHeaderIndices != null && stickyHeaderIndices.length > 0) {\r\n      const childArray = React.Children.toArray<$FlowFixMe>(\r\n        this.props.children,\r\n      );\r\n\r\n      children = childArray.map((child, index) => {\r\n        const indexOfIndex = child ? stickyHeaderIndices.indexOf(index) : -1;\r\n        if (indexOfIndex > -1) {\r\n          const key = child.key;\r\n          const nextIndex = stickyHeaderIndices[indexOfIndex + 1];\r\n          const StickyHeaderComponent =\r\n            this.props.StickyHeaderComponent || ScrollViewStickyHeader;\r\n          return (\r\n            <StickyHeaderComponent\r\n              key={key}\r\n              nativeID={'StickyHeader-' + key} /* TODO: T68258846. */\r\n              ref={ref => this._setStickyHeaderRef(key, ref)}\r\n              nextHeaderLayoutY={this._headerLayoutYs.get(\r\n                this._getKeyForIndex(nextIndex, childArray),\r\n              )}\r\n              onLayout={event => this._onStickyHeaderLayout(index, event, key)}\r\n              scrollAnimatedValue={this._scrollAnimatedValue}\r\n              inverted={this.props.invertStickyHeaders}\r\n              hiddenOnScroll={this.props.stickyHeaderHiddenOnScroll}\r\n              scrollViewHeight={this.state.layoutHeight}>\r\n              {child}\r\n            </StickyHeaderComponent>\r\n          );\r\n        } else {\r\n          return child;\r\n        }\r\n      });\r\n    }\r\n    children = (\r\n      <ScrollViewContext.Provider\r\n        value={this.props.horizontal === true ? HORIZONTAL : VERTICAL}>\r\n        {children}\r\n      </ScrollViewContext.Provider>\r\n    );\r\n\r\n    const hasStickyHeaders =\r\n      Array.isArray(stickyHeaderIndices) && stickyHeaderIndices.length > 0;\r\n\r\n    const contentContainer = (\r\n      <NativeDirectionalScrollContentView\r\n        {...contentSizeChangeProps}\r\n        ref={this._innerView.getForwardingRef(this.props.innerViewRef)}\r\n        style={contentContainerStyle}\r\n        removeClippedSubviews={\r\n          // Subview clipping causes issues with sticky headers on Android and\r\n          // would be hard to fix properly in a performant way.\r\n          Platform.OS === 'android' && hasStickyHeaders\r\n            ? false\r\n            : this.props.removeClippedSubviews\r\n        }\r\n        collapsable={false}>\r\n        {children}\r\n      </NativeDirectionalScrollContentView>\r\n    );\r\n\r\n    const alwaysBounceHorizontal =\r\n      this.props.alwaysBounceHorizontal !== undefined\r\n        ? this.props.alwaysBounceHorizontal\r\n        : this.props.horizontal;\r\n\r\n    const alwaysBounceVertical =\r\n      this.props.alwaysBounceVertical !== undefined\r\n        ? this.props.alwaysBounceVertical\r\n        : !this.props.horizontal;\r\n\r\n    const baseStyle =\r\n      this.props.horizontal === true\r\n        ? styles.baseHorizontal\r\n        : styles.baseVertical;\r\n    const props = {\r\n      ...this.props,\r\n      alwaysBounceHorizontal,\r\n      alwaysBounceVertical,\r\n      style: StyleSheet.compose(baseStyle, this.props.style),\r\n      // Override the onContentSizeChange from props, since this event can\r\n      // bubble up from TextInputs\r\n      onContentSizeChange: null,\r\n      onLayout: this._handleLayout,\r\n      onMomentumScrollBegin: this._handleMomentumScrollBegin,\r\n      onMomentumScrollEnd: this._handleMomentumScrollEnd,\r\n      onResponderGrant: this._handleResponderGrant,\r\n      onResponderReject: this._handleResponderReject,\r\n      onResponderRelease: this._handleResponderRelease,\r\n      onResponderTerminationRequest: this._handleResponderTerminationRequest,\r\n      onScrollBeginDrag: this._handleScrollBeginDrag,\r\n      onScrollEndDrag: this._handleScrollEndDrag,\r\n      onScrollShouldSetResponder: this._handleScrollShouldSetResponder,\r\n      onStartShouldSetResponder: this._handleStartShouldSetResponder,\r\n      onStartShouldSetResponderCapture:\r\n        this._handleStartShouldSetResponderCapture,\r\n      onTouchEnd: this._handleTouchEnd,\r\n      onTouchMove: this._handleTouchMove,\r\n      onTouchStart: this._handleTouchStart,\r\n      onTouchCancel: this._handleTouchCancel,\r\n      onScroll: this._handleScroll,\r\n      scrollEventThrottle: hasStickyHeaders\r\n        ? 1\r\n        : this.props.scrollEventThrottle,\r\n      sendMomentumEvents:\r\n        this.props.onMomentumScrollBegin || this.props.onMomentumScrollEnd\r\n          ? true\r\n          : false,\r\n      // default to true\r\n      snapToStart: this.props.snapToStart !== false,\r\n      // default to true\r\n      snapToEnd: this.props.snapToEnd !== false,\r\n      // pagingEnabled is overridden by snapToInterval / snapToOffsets\r\n      pagingEnabled: Platform.select({\r\n        // on iOS, pagingEnabled must be set to false to have snapToInterval / snapToOffsets work\r\n        ios:\r\n          this.props.pagingEnabled === true &&\r\n          this.props.snapToInterval == null &&\r\n          this.props.snapToOffsets == null,\r\n        // on Android, pagingEnabled must be set to true to have snapToInterval / snapToOffsets work\r\n        android:\r\n          this.props.pagingEnabled === true ||\r\n          this.props.snapToInterval != null ||\r\n          this.props.snapToOffsets != null,\r\n      }),\r\n    };\r\n\r\n    const {decelerationRate} = this.props;\r\n    if (decelerationRate != null) {\r\n      props.decelerationRate = processDecelerationRate(decelerationRate);\r\n    }\r\n\r\n    const refreshControl = this.props.refreshControl;\r\n    const scrollViewRef = this._scrollView.getForwardingRef(\r\n      this.props.scrollViewRef,\r\n    );\r\n\r\n    if (refreshControl) {\r\n      if (Platform.OS === 'ios') {\r\n        // On iOS the RefreshControl is a child of the ScrollView.\r\n        return (\r\n          <NativeDirectionalScrollView {...props} ref={scrollViewRef}>\r\n            {refreshControl}\r\n            {contentContainer}\r\n          </NativeDirectionalScrollView>\r\n        );\r\n      } else if (Platform.OS === 'android') {\r\n        // On Android wrap the ScrollView with a AndroidSwipeRefreshLayout.\r\n        // Since the ScrollView is wrapped add the style props to the\r\n        // AndroidSwipeRefreshLayout and use flex: 1 for the ScrollView.\r\n        // Note: we should split props.style on the inner and outer props\r\n        // however, the ScrollView still needs the baseStyle to be scrollable\r\n        // $FlowFixMe[underconstrained-implicit-instantiation]\r\n        const {outer, inner} = splitLayoutProps(flattenStyle(props.style));\r\n        return React.cloneElement(\r\n          refreshControl,\r\n          {style: StyleSheet.compose(baseStyle, outer)},\r\n          <NativeDirectionalScrollView\r\n            {...props}\r\n            style={StyleSheet.compose(baseStyle, inner)}\r\n            ref={scrollViewRef}>\r\n            {contentContainer}\r\n          </NativeDirectionalScrollView>,\r\n        );\r\n      }\r\n    }\r\n    return (\r\n      <NativeDirectionalScrollView {...props} ref={scrollViewRef}>\r\n        {contentContainer}\r\n      </NativeDirectionalScrollView>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  baseVertical: {\r\n    flexGrow: 1,\r\n    flexShrink: 1,\r\n    flexDirection: 'column',\r\n    overflow: 'scroll',\r\n  },\r\n  baseHorizontal: {\r\n    flexGrow: 1,\r\n    flexShrink: 1,\r\n    flexDirection: 'row',\r\n    overflow: 'scroll',\r\n  },\r\n  contentContainerHorizontal: {\r\n    flexDirection: 'row',\r\n  },\r\n});\r\n\r\ntype ForwardedRef<T> = {current: null | T, ...} | ((null | T) => mixed);\r\n\r\ntype RefForwarder<TNativeInstance, TPublicInstance> = {\r\n  getForwardingRef: (\r\n    ?ForwardedRef<TPublicInstance>,\r\n  ) => (TNativeInstance | null) => void,\r\n  nativeInstance: TNativeInstance | null,\r\n  publicInstance: TPublicInstance | null,\r\n};\r\n\r\n/**\r\n * Helper function that should be replaced with `useCallback` and `useMergeRefs`\r\n * once `ScrollView` is reimplemented as a functional component.\r\n */\r\nfunction createRefForwarder<TNativeInstance, TPublicInstance>(\r\n  mutator: TNativeInstance => TPublicInstance,\r\n): RefForwarder<TNativeInstance, TPublicInstance> {\r\n  const state: RefForwarder<TNativeInstance, TPublicInstance> = {\r\n    getForwardingRef: memoize(forwardedRef => {\r\n      return (nativeInstance: TNativeInstance | null): void => {\r\n        const publicInstance =\r\n          nativeInstance == null ? null : mutator(nativeInstance);\r\n\r\n        state.nativeInstance = nativeInstance;\r\n        state.publicInstance = publicInstance;\r\n\r\n        if (forwardedRef != null) {\r\n          if (typeof forwardedRef === 'function') {\r\n            forwardedRef(publicInstance);\r\n          } else {\r\n            forwardedRef.current = publicInstance;\r\n          }\r\n        }\r\n      };\r\n    }),\r\n    nativeInstance: null,\r\n    publicInstance: null,\r\n  };\r\n\r\n  return state;\r\n}\r\n\r\n/* $FlowFixMe[missing-local-annot] The type annotation(s) required by Flow's\r\n * LTI update could not be added via codemod */\r\nfunction Wrapper(props, ref: (mixed => mixed) | {current: mixed, ...}) {\r\n  return <ScrollView {...props} scrollViewRef={ref} />;\r\n}\r\nWrapper.displayName = 'ScrollView';\r\nconst ForwardedScrollView = React.forwardRef(Wrapper);\r\n\r\n// $FlowFixMe[prop-missing] Add static context to ForwardedScrollView\r\nForwardedScrollView.Context = ScrollViewContext;\r\n\r\nForwardedScrollView.displayName = 'ScrollView';\r\n\r\nmodule.exports = ((ForwardedScrollView: $FlowFixMe): React.AbstractComponent<\r\n  React.ElementConfig<typeof ScrollView>,\r\n  PublicScrollViewInstance,\r\n> &\r\n  ScrollViewComponentStatics);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}