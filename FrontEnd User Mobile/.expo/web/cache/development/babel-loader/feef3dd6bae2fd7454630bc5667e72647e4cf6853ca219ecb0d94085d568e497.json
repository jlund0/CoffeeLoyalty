{"ast":null,"code":"import { createViewConfig } from \"../NativeComponent/ViewConfig\";\nimport UIManager from \"../ReactNative/UIManager\";\nimport createReactNativeComponentClass from \"../Renderer/shims/createReactNativeComponentClass\";\nvar textViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    numberOfLines: true,\n    ellipsizeMode: true,\n    allowFontScaling: true,\n    dynamicTypeRamp: true,\n    maxFontSizeMultiplier: true,\n    disabled: true,\n    selectable: true,\n    selectionColor: true,\n    adjustsFontSizeToFit: true,\n    minimumFontScale: true,\n    textBreakStrategy: true,\n    onTextLayout: true,\n    onInlineViewLayout: true,\n    dataDetectorType: true,\n    android_hyphenationFrequency: true,\n    lineBreakStrategyIOS: true\n  },\n  directEventTypes: {\n    topTextLayout: {\n      registrationName: 'onTextLayout'\n    },\n    topInlineViewLayout: {\n      registrationName: 'onInlineViewLayout'\n    }\n  },\n  uiViewClassName: 'RCTText'\n};\nvar virtualTextViewConfig = {\n  validAttributes: {\n    isHighlighted: true,\n    isPressable: true,\n    maxFontSizeMultiplier: true\n  },\n  uiViewClassName: 'RCTVirtualText'\n};\nexport var NativeText = createReactNativeComponentClass('RCTText', function () {\n  return createViewConfig(textViewConfig);\n});\nexport var NativeVirtualText = !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText') ? NativeText : createReactNativeComponentClass('RCTVirtualText', function () {\n  return createViewConfig(virtualTextViewConfig);\n});","map":{"version":3,"names":["createViewConfig","UIManager","createReactNativeComponentClass","textViewConfig","validAttributes","isHighlighted","isPressable","numberOfLines","ellipsizeMode","allowFontScaling","dynamicTypeRamp","maxFontSizeMultiplier","disabled","selectable","selectionColor","adjustsFontSizeToFit","minimumFontScale","textBreakStrategy","onTextLayout","onInlineViewLayout","dataDetectorType","android_hyphenationFrequency","lineBreakStrategyIOS","directEventTypes","topTextLayout","registrationName","topInlineViewLayout","uiViewClassName","virtualTextViewConfig","NativeText","NativeVirtualText","global","RN$Bridgeless","hasViewManagerConfig"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Text/TextNativeComponent.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n * @format\r\n */\r\n\r\nimport {createViewConfig} from '../NativeComponent/ViewConfig';\r\nimport UIManager from '../ReactNative/UIManager';\r\nimport createReactNativeComponentClass from '../Renderer/shims/createReactNativeComponentClass';\r\nimport {type HostComponent} from '../Renderer/shims/ReactNativeTypes';\r\nimport {type ProcessedColorValue} from '../StyleSheet/processColor';\r\nimport {type PressEvent} from '../Types/CoreEventTypes';\r\nimport {type TextProps} from './TextProps';\r\n\r\ntype NativeTextProps = $ReadOnly<{\r\n  ...TextProps,\r\n  isHighlighted?: ?boolean,\r\n  selectionColor?: ?ProcessedColorValue,\r\n  onClick?: ?(event: PressEvent) => mixed,\r\n  // This is only needed for platforms that optimize text hit testing, e.g.,\r\n  // react-native-windows. It can be used to only hit test virtual text spans\r\n  // that have pressable events attached to them.\r\n  isPressable?: ?boolean,\r\n}>;\r\n\r\nconst textViewConfig = {\r\n  validAttributes: {\r\n    isHighlighted: true,\r\n    isPressable: true,\r\n    numberOfLines: true,\r\n    ellipsizeMode: true,\r\n    allowFontScaling: true,\r\n    dynamicTypeRamp: true,\r\n    maxFontSizeMultiplier: true,\r\n    disabled: true,\r\n    selectable: true,\r\n    selectionColor: true,\r\n    adjustsFontSizeToFit: true,\r\n    minimumFontScale: true,\r\n    textBreakStrategy: true,\r\n    onTextLayout: true,\r\n    onInlineViewLayout: true,\r\n    dataDetectorType: true,\r\n    android_hyphenationFrequency: true,\r\n    lineBreakStrategyIOS: true,\r\n  },\r\n  directEventTypes: {\r\n    topTextLayout: {\r\n      registrationName: 'onTextLayout',\r\n    },\r\n    topInlineViewLayout: {\r\n      registrationName: 'onInlineViewLayout',\r\n    },\r\n  },\r\n  uiViewClassName: 'RCTText',\r\n};\r\n\r\nconst virtualTextViewConfig = {\r\n  validAttributes: {\r\n    isHighlighted: true,\r\n    isPressable: true,\r\n    maxFontSizeMultiplier: true,\r\n  },\r\n  uiViewClassName: 'RCTVirtualText',\r\n};\r\n\r\nexport const NativeText: HostComponent<NativeTextProps> =\r\n  (createReactNativeComponentClass('RCTText', () =>\r\n    createViewConfig(textViewConfig),\r\n  ): any);\r\n\r\nexport const NativeVirtualText: HostComponent<NativeTextProps> =\r\n  !global.RN$Bridgeless && !UIManager.hasViewManagerConfig('RCTVirtualText')\r\n    ? NativeText\r\n    : (createReactNativeComponentClass('RCTVirtualText', () =>\r\n        createViewConfig(virtualTextViewConfig),\r\n      ): any);\r\n"],"mappings":"AAUA,SAAQA,gBAAgB;AACxB,OAAOC,SAAS;AAChB,OAAOC,+BAA+B;AAiBtC,IAAMC,cAAc,GAAG;EACrBC,eAAe,EAAE;IACfC,aAAa,EAAE,IAAI;IACnBC,WAAW,EAAE,IAAI;IACjBC,aAAa,EAAE,IAAI;IACnBC,aAAa,EAAE,IAAI;IACnBC,gBAAgB,EAAE,IAAI;IACtBC,eAAe,EAAE,IAAI;IACrBC,qBAAqB,EAAE,IAAI;IAC3BC,QAAQ,EAAE,IAAI;IACdC,UAAU,EAAE,IAAI;IAChBC,cAAc,EAAE,IAAI;IACpBC,oBAAoB,EAAE,IAAI;IAC1BC,gBAAgB,EAAE,IAAI;IACtBC,iBAAiB,EAAE,IAAI;IACvBC,YAAY,EAAE,IAAI;IAClBC,kBAAkB,EAAE,IAAI;IACxBC,gBAAgB,EAAE,IAAI;IACtBC,4BAA4B,EAAE,IAAI;IAClCC,oBAAoB,EAAE;EACxB,CAAC;EACDC,gBAAgB,EAAE;IAChBC,aAAa,EAAE;MACbC,gBAAgB,EAAE;IACpB,CAAC;IACDC,mBAAmB,EAAE;MACnBD,gBAAgB,EAAE;IACpB;EACF,CAAC;EACDE,eAAe,EAAE;AACnB,CAAC;AAED,IAAMC,qBAAqB,GAAG;EAC5BxB,eAAe,EAAE;IACfC,aAAa,EAAE,IAAI;IACnBC,WAAW,EAAE,IAAI;IACjBK,qBAAqB,EAAE;EACzB,CAAC;EACDgB,eAAe,EAAE;AACnB,CAAC;AAED,OAAO,IAAME,UAA0C,GACpD3B,+BAA+B,CAAC,SAAS,EAAE;EAAA,OAC1CF,gBAAgB,CAACG,cAAc,CAAC;AAAA,CAClC,CAAO;AAET,OAAO,IAAM2B,iBAAiD,GAC5D,CAACC,MAAM,CAACC,aAAa,IAAI,CAAC/B,SAAS,CAACgC,oBAAoB,CAAC,gBAAgB,CAAC,GACtEJ,UAAU,GACT3B,+BAA+B,CAAC,gBAAgB,EAAE;EAAA,OACjDF,gBAAgB,CAAC4B,qBAAqB,CAAC;AAAA,CACzC,CAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}