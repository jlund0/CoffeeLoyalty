{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport Platform from \"../Utilities/Platform\";\nimport RCTAlertManager from \"./RCTAlertManager\";\nvar Alert = function () {\n  function Alert() {\n    _classCallCheck(this, Alert);\n  }\n  _createClass(Alert, null, [{\n    key: \"alert\",\n    value: function alert(title, message, buttons, options) {\n      if (Platform.OS === 'ios') {\n        Alert.prompt(title, message, buttons, 'default', undefined, undefined, options);\n      } else if (Platform.OS === 'android') {\n        var NativeDialogManagerAndroid = require(\"../NativeModules/specs/NativeDialogManagerAndroid\").default;\n        if (!NativeDialogManagerAndroid) {\n          return;\n        }\n        var constants = NativeDialogManagerAndroid.getConstants();\n        var config = {\n          title: title || '',\n          message: message || '',\n          cancelable: false\n        };\n        if (options && options.cancelable) {\n          config.cancelable = options.cancelable;\n        }\n        var defaultPositiveText = 'OK';\n        var validButtons = buttons ? buttons.slice(0, 3) : [{\n          text: defaultPositiveText\n        }];\n        var buttonPositive = validButtons.pop();\n        var buttonNegative = validButtons.pop();\n        var buttonNeutral = validButtons.pop();\n        if (buttonNeutral) {\n          config.buttonNeutral = buttonNeutral.text || '';\n        }\n        if (buttonNegative) {\n          config.buttonNegative = buttonNegative.text || '';\n        }\n        if (buttonPositive) {\n          config.buttonPositive = buttonPositive.text || defaultPositiveText;\n        }\n        var onAction = function onAction(action, buttonKey) {\n          if (action === constants.buttonClicked) {\n            if (buttonKey === constants.buttonNeutral) {\n              buttonNeutral.onPress && buttonNeutral.onPress();\n            } else if (buttonKey === constants.buttonNegative) {\n              buttonNegative.onPress && buttonNegative.onPress();\n            } else if (buttonKey === constants.buttonPositive) {\n              buttonPositive.onPress && buttonPositive.onPress();\n            }\n          } else if (action === constants.dismissed) {\n            options && options.onDismiss && options.onDismiss();\n          }\n        };\n        var onError = function onError(errorMessage) {\n          return console.warn(errorMessage);\n        };\n        NativeDialogManagerAndroid.showAlert(config, onError, onAction);\n      }\n    }\n  }, {\n    key: \"prompt\",\n    value: function prompt(title, message, callbackOrButtons) {\n      var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'plain-text';\n      var defaultValue = arguments.length > 4 ? arguments[4] : undefined;\n      var keyboardType = arguments.length > 5 ? arguments[5] : undefined;\n      var options = arguments.length > 6 ? arguments[6] : undefined;\n      if (Platform.OS === 'ios') {\n        var callbacks = [];\n        var buttons = [];\n        var cancelButtonKey;\n        var destructiveButtonKey;\n        var preferredButtonKey;\n        if (typeof callbackOrButtons === 'function') {\n          callbacks = [callbackOrButtons];\n        } else if (Array.isArray(callbackOrButtons)) {\n          callbackOrButtons.forEach(function (btn, index) {\n            callbacks[index] = btn.onPress;\n            if (btn.style === 'cancel') {\n              cancelButtonKey = String(index);\n            } else if (btn.style === 'destructive') {\n              destructiveButtonKey = String(index);\n            }\n            if (btn.isPreferred) {\n              preferredButtonKey = String(index);\n            }\n            if (btn.text || index < (callbackOrButtons || []).length - 1) {\n              var btnDef = {};\n              btnDef[index] = btn.text || '';\n              buttons.push(btnDef);\n            }\n          });\n        }\n        RCTAlertManager.alertWithArgs({\n          title: title || '',\n          message: message || undefined,\n          buttons: buttons,\n          type: type || undefined,\n          defaultValue: defaultValue,\n          cancelButtonKey: cancelButtonKey,\n          destructiveButtonKey: destructiveButtonKey,\n          preferredButtonKey: preferredButtonKey,\n          keyboardType: keyboardType,\n          userInterfaceStyle: (options == null ? void 0 : options.userInterfaceStyle) || undefined\n        }, function (id, value) {\n          var cb = callbacks[id];\n          cb && cb(value);\n        });\n      }\n    }\n  }]);\n  return Alert;\n}();\nmodule.exports = Alert;","map":{"version":3,"names":["Platform","RCTAlertManager","Alert","_classCallCheck","_createClass","key","value","alert","title","message","buttons","options","OS","prompt","undefined","NativeDialogManagerAndroid","require","default","constants","getConstants","config","cancelable","defaultPositiveText","validButtons","slice","text","buttonPositive","pop","buttonNegative","buttonNeutral","onAction","action","buttonKey","buttonClicked","onPress","dismissed","onDismiss","onError","errorMessage","console","warn","showAlert","callbackOrButtons","type","arguments","length","defaultValue","keyboardType","callbacks","cancelButtonKey","destructiveButtonKey","preferredButtonKey","Array","isArray","forEach","btn","index","style","String","isPreferred","btnDef","push","alertWithArgs","userInterfaceStyle","id","cb","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Alert/Alert.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow\r\n */\r\n\r\nimport type {DialogOptions} from '../NativeModules/specs/NativeDialogManagerAndroid';\r\n\r\nimport Platform from '../Utilities/Platform';\r\nimport RCTAlertManager from './RCTAlertManager';\r\n\r\nexport type AlertType =\r\n  | 'default'\r\n  | 'plain-text'\r\n  | 'secure-text'\r\n  | 'login-password';\r\nexport type AlertButtonStyle = 'default' | 'cancel' | 'destructive';\r\nexport type Buttons = Array<{\r\n  text?: string,\r\n  onPress?: ?Function,\r\n  isPreferred?: boolean,\r\n  style?: AlertButtonStyle,\r\n  ...\r\n}>;\r\n\r\ntype Options = {\r\n  cancelable?: ?boolean,\r\n  userInterfaceStyle?: 'unspecified' | 'light' | 'dark',\r\n  onDismiss?: ?() => void,\r\n  ...\r\n};\r\n\r\n/**\r\n * Launches an alert dialog with the specified title and message.\r\n *\r\n * See https://reactnative.dev/docs/alert\r\n */\r\nclass Alert {\r\n  static alert(\r\n    title: ?string,\r\n    message?: ?string,\r\n    buttons?: Buttons,\r\n    options?: Options,\r\n  ): void {\r\n    if (Platform.OS === 'ios') {\r\n      Alert.prompt(\r\n        title,\r\n        message,\r\n        buttons,\r\n        'default',\r\n        undefined,\r\n        undefined,\r\n        options,\r\n      );\r\n    } else if (Platform.OS === 'android') {\r\n      const NativeDialogManagerAndroid =\r\n        require('../NativeModules/specs/NativeDialogManagerAndroid').default;\r\n      if (!NativeDialogManagerAndroid) {\r\n        return;\r\n      }\r\n      const constants = NativeDialogManagerAndroid.getConstants();\r\n\r\n      const config: DialogOptions = {\r\n        title: title || '',\r\n        message: message || '',\r\n        cancelable: false,\r\n      };\r\n\r\n      if (options && options.cancelable) {\r\n        config.cancelable = options.cancelable;\r\n      }\r\n      // At most three buttons (neutral, negative, positive). Ignore rest.\r\n      // The text 'OK' should be probably localized. iOS Alert does that in native.\r\n      const defaultPositiveText = 'OK';\r\n      const validButtons: Buttons = buttons\r\n        ? buttons.slice(0, 3)\r\n        : [{text: defaultPositiveText}];\r\n      const buttonPositive = validButtons.pop();\r\n      const buttonNegative = validButtons.pop();\r\n      const buttonNeutral = validButtons.pop();\r\n\r\n      if (buttonNeutral) {\r\n        config.buttonNeutral = buttonNeutral.text || '';\r\n      }\r\n      if (buttonNegative) {\r\n        config.buttonNegative = buttonNegative.text || '';\r\n      }\r\n      if (buttonPositive) {\r\n        config.buttonPositive = buttonPositive.text || defaultPositiveText;\r\n      }\r\n\r\n      /* $FlowFixMe[missing-local-annot] The type annotation(s) required by\r\n       * Flow's LTI update could not be added via codemod */\r\n      const onAction = (action, buttonKey) => {\r\n        if (action === constants.buttonClicked) {\r\n          if (buttonKey === constants.buttonNeutral) {\r\n            buttonNeutral.onPress && buttonNeutral.onPress();\r\n          } else if (buttonKey === constants.buttonNegative) {\r\n            buttonNegative.onPress && buttonNegative.onPress();\r\n          } else if (buttonKey === constants.buttonPositive) {\r\n            buttonPositive.onPress && buttonPositive.onPress();\r\n          }\r\n        } else if (action === constants.dismissed) {\r\n          options && options.onDismiss && options.onDismiss();\r\n        }\r\n      };\r\n      const onError = (errorMessage: string) => console.warn(errorMessage);\r\n      NativeDialogManagerAndroid.showAlert(config, onError, onAction);\r\n    }\r\n  }\r\n\r\n  static prompt(\r\n    title: ?string,\r\n    message?: ?string,\r\n    callbackOrButtons?: ?(((text: string) => void) | Buttons),\r\n    type?: ?AlertType = 'plain-text',\r\n    defaultValue?: string,\r\n    keyboardType?: string,\r\n    options?: Options,\r\n  ): void {\r\n    if (Platform.OS === 'ios') {\r\n      let callbacks: Array<?any> = [];\r\n      const buttons = [];\r\n      let cancelButtonKey;\r\n      let destructiveButtonKey;\r\n      let preferredButtonKey;\r\n      if (typeof callbackOrButtons === 'function') {\r\n        callbacks = [callbackOrButtons];\r\n      } else if (Array.isArray(callbackOrButtons)) {\r\n        callbackOrButtons.forEach((btn, index) => {\r\n          callbacks[index] = btn.onPress;\r\n          if (btn.style === 'cancel') {\r\n            cancelButtonKey = String(index);\r\n          } else if (btn.style === 'destructive') {\r\n            destructiveButtonKey = String(index);\r\n          }\r\n          if (btn.isPreferred) {\r\n            preferredButtonKey = String(index);\r\n          }\r\n          if (btn.text || index < (callbackOrButtons || []).length - 1) {\r\n            const btnDef: {[number]: string} = {};\r\n            btnDef[index] = btn.text || '';\r\n            buttons.push(btnDef);\r\n          }\r\n        });\r\n      }\r\n\r\n      RCTAlertManager.alertWithArgs(\r\n        {\r\n          title: title || '',\r\n          message: message || undefined,\r\n          buttons,\r\n          type: type || undefined,\r\n          defaultValue,\r\n          cancelButtonKey,\r\n          destructiveButtonKey,\r\n          preferredButtonKey,\r\n          keyboardType,\r\n          userInterfaceStyle: options?.userInterfaceStyle || undefined,\r\n        },\r\n        (id, value) => {\r\n          const cb = callbacks[id];\r\n          cb && cb(value);\r\n        },\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Alert;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}