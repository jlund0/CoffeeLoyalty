{"ast":null,"code":"'use strict';\n\nimport invariant from 'invariant';\nvar customBubblingEventTypes = {};\nvar customDirectEventTypes = {};\nexports.customBubblingEventTypes = customBubblingEventTypes;\nexports.customDirectEventTypes = customDirectEventTypes;\nvar viewConfigCallbacks = new Map();\nvar viewConfigs = new Map();\nfunction processEventTypes(viewConfig) {\n  var bubblingEventTypes = viewConfig.bubblingEventTypes,\n    directEventTypes = viewConfig.directEventTypes;\n  if (__DEV__) {\n    if (bubblingEventTypes != null && directEventTypes != null) {\n      for (var topLevelType in directEventTypes) {\n        invariant(bubblingEventTypes[topLevelType] == null, 'Event cannot be both direct and bubbling: %s', topLevelType);\n      }\n    }\n  }\n  if (bubblingEventTypes != null) {\n    for (var _topLevelType in bubblingEventTypes) {\n      if (customBubblingEventTypes[_topLevelType] == null) {\n        customBubblingEventTypes[_topLevelType] = bubblingEventTypes[_topLevelType];\n      }\n    }\n  }\n  if (directEventTypes != null) {\n    for (var _topLevelType2 in directEventTypes) {\n      if (customDirectEventTypes[_topLevelType2] == null) {\n        customDirectEventTypes[_topLevelType2] = directEventTypes[_topLevelType2];\n      }\n    }\n  }\n}\nexports.register = function (name, callback) {\n  invariant(!viewConfigCallbacks.has(name), 'Tried to register two views with the same name %s', name);\n  invariant(typeof callback === 'function', 'View config getter callback for component `%s` must be a function (received `%s`)', name, callback === null ? 'null' : typeof callback);\n  viewConfigCallbacks.set(name, callback);\n  return name;\n};\nexports.get = function (name) {\n  var viewConfig;\n  if (!viewConfigs.has(name)) {\n    var callback = viewConfigCallbacks.get(name);\n    if (typeof callback !== 'function') {\n      invariant(false, 'View config getter callback for component `%s` must be a function (received `%s`).%s', name, callback === null ? 'null' : typeof callback, typeof name[0] === 'string' && /[a-z]/.test(name[0]) ? ' Make sure to start component names with a capital letter.' : '');\n    }\n    viewConfig = callback();\n    processEventTypes(viewConfig);\n    viewConfigs.set(name, viewConfig);\n    viewConfigCallbacks.set(name, null);\n  } else {\n    viewConfig = viewConfigs.get(name);\n  }\n  invariant(viewConfig, 'View config not found for name %s', name);\n  return viewConfig;\n};","map":{"version":3,"names":["invariant","customBubblingEventTypes","customDirectEventTypes","exports","viewConfigCallbacks","Map","viewConfigs","processEventTypes","viewConfig","bubblingEventTypes","directEventTypes","__DEV__","topLevelType","register","name","callback","has","set","get","test"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Renderer/shims/ReactNativeViewConfigRegistry.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @noformat\r\n * @flow strict-local\r\n * @generated SignedSource<<47ba85d7f43c9b591d6804827322d00e>>\r\n *\r\n * This file was sync'd from the facebook/react repository.\r\n */\r\n\r\n'use strict';\r\n\r\nimport {type ViewConfig} from './ReactNativeTypes';\r\nimport invariant from 'invariant';\r\n\r\n// Event configs\r\nconst customBubblingEventTypes: {\r\n  [eventName: string]: $ReadOnly<{\r\n    phasedRegistrationNames: $ReadOnly<{\r\n      captured: string,\r\n      bubbled: string,\r\n      skipBubbling?: ?boolean,\r\n    }>,\r\n  }>,\r\n  ...\r\n} = {};\r\nconst customDirectEventTypes: {\r\n  [eventName: string]: $ReadOnly<{\r\n    registrationName: string,\r\n  }>,\r\n  ...\r\n} = {};\r\n\r\nexports.customBubblingEventTypes = customBubblingEventTypes;\r\nexports.customDirectEventTypes = customDirectEventTypes;\r\n\r\nconst viewConfigCallbacks = new Map<string, ?() => ViewConfig>();\r\nconst viewConfigs = new Map<string, ViewConfig>();\r\n\r\nfunction processEventTypes(viewConfig: ViewConfig): void {\r\n  const {bubblingEventTypes, directEventTypes} = viewConfig;\r\n\r\n  if (__DEV__) {\r\n    if (bubblingEventTypes != null && directEventTypes != null) {\r\n      for (const topLevelType in directEventTypes) {\r\n        invariant(\r\n          bubblingEventTypes[topLevelType] == null,\r\n          'Event cannot be both direct and bubbling: %s',\r\n          topLevelType,\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (bubblingEventTypes != null) {\r\n    for (const topLevelType in bubblingEventTypes) {\r\n      if (customBubblingEventTypes[topLevelType] == null) {\r\n        customBubblingEventTypes[topLevelType] =\r\n          bubblingEventTypes[topLevelType];\r\n      }\r\n    }\r\n  }\r\n\r\n  if (directEventTypes != null) {\r\n    for (const topLevelType in directEventTypes) {\r\n      if (customDirectEventTypes[topLevelType] == null) {\r\n        customDirectEventTypes[topLevelType] = directEventTypes[topLevelType];\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Registers a native view/component by name.\r\n * A callback is provided to load the view config from UIManager.\r\n * The callback is deferred until the view is actually rendered.\r\n */\r\nexports.register = function (name: string, callback: () => ViewConfig): string {\r\n  invariant(\r\n    !viewConfigCallbacks.has(name),\r\n    'Tried to register two views with the same name %s',\r\n    name,\r\n  );\r\n  invariant(\r\n    typeof callback === 'function',\r\n    'View config getter callback for component `%s` must be a function (received `%s`)',\r\n    name,\r\n    callback === null ? 'null' : typeof callback,\r\n  );\r\n  viewConfigCallbacks.set(name, callback);\r\n  return name;\r\n};\r\n\r\n/**\r\n * Retrieves a config for the specified view.\r\n * If this is the first time the view has been used,\r\n * This configuration will be lazy-loaded from UIManager.\r\n */\r\nexports.get = function (name: string): ViewConfig {\r\n  let viewConfig;\r\n  if (!viewConfigs.has(name)) {\r\n    const callback = viewConfigCallbacks.get(name);\r\n    if (typeof callback !== 'function') {\r\n      invariant(\r\n        false,\r\n        'View config getter callback for component `%s` must be a function (received `%s`).%s',\r\n        name,\r\n        callback === null ? 'null' : typeof callback,\r\n        typeof name[0] === 'string' && /[a-z]/.test(name[0])\r\n          ? ' Make sure to start component names with a capital letter.'\r\n          : '',\r\n      );\r\n    }\r\n    viewConfig = callback();\r\n    processEventTypes(viewConfig);\r\n    viewConfigs.set(name, viewConfig);\r\n\r\n    // Clear the callback after the config is set so that\r\n    // we don't mask any errors during registration.\r\n    viewConfigCallbacks.set(name, null);\r\n  } else {\r\n    viewConfig = viewConfigs.get(name);\r\n  }\r\n  invariant(viewConfig, 'View config not found for name %s', name);\r\n  return viewConfig;\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}