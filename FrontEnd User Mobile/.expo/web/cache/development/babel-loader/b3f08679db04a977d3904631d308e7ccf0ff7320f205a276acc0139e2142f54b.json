{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nimport NativeEventEmitter from \"../EventEmitter/NativeEventEmitter\";\nimport Platform from \"../Utilities/Platform\";\nimport NativeIntentAndroid from \"./NativeIntentAndroid\";\nimport NativeLinkingManager from \"./NativeLinkingManager\";\nimport invariant from 'invariant';\nimport nullthrows from 'nullthrows';\nvar Linking = function (_NativeEventEmitter) {\n  _inherits(Linking, _NativeEventEmitter);\n  var _super = _createSuper(Linking);\n  function Linking() {\n    _classCallCheck(this, Linking);\n    return _super.call(this, Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\n  }\n  _createClass(Linking, [{\n    key: \"addEventListener\",\n    value: function addEventListener(eventType, listener, context) {\n      return this.addListener(eventType, listener);\n    }\n  }, {\n    key: \"openURL\",\n    value: function openURL(url) {\n      this._validateURL(url);\n      if (Platform.OS === 'android') {\n        return nullthrows(NativeIntentAndroid).openURL(url);\n      } else {\n        return nullthrows(NativeLinkingManager).openURL(url);\n      }\n    }\n  }, {\n    key: \"canOpenURL\",\n    value: function canOpenURL(url) {\n      this._validateURL(url);\n      if (Platform.OS === 'android') {\n        return nullthrows(NativeIntentAndroid).canOpenURL(url);\n      } else {\n        return nullthrows(NativeLinkingManager).canOpenURL(url);\n      }\n    }\n  }, {\n    key: \"openSettings\",\n    value: function openSettings() {\n      if (Platform.OS === 'android') {\n        return nullthrows(NativeIntentAndroid).openSettings();\n      } else {\n        return nullthrows(NativeLinkingManager).openSettings();\n      }\n    }\n  }, {\n    key: \"getInitialURL\",\n    value: function getInitialURL() {\n      return Platform.OS === 'android' ? nullthrows(NativeIntentAndroid).getInitialURL() : nullthrows(NativeLinkingManager).getInitialURL();\n    }\n  }, {\n    key: \"sendIntent\",\n    value: function sendIntent(action, extras) {\n      if (Platform.OS === 'android') {\n        return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\n      } else {\n        return new Promise(function (resolve, reject) {\n          return reject(new Error('Unsupported'));\n        });\n      }\n    }\n  }, {\n    key: \"_validateURL\",\n    value: function _validateURL(url) {\n      invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n      invariant(url, 'Invalid URL: cannot be empty');\n    }\n  }]);\n  return Linking;\n}(NativeEventEmitter);\nmodule.exports = new Linking();","map":{"version":3,"names":["NativeEventEmitter","Platform","NativeIntentAndroid","NativeLinkingManager","invariant","nullthrows","Linking","_NativeEventEmitter","_inherits","_super","_createSuper","_classCallCheck","call","OS","undefined","_createClass","key","value","addEventListener","eventType","listener","context","addListener","openURL","url","_validateURL","canOpenURL","openSettings","getInitialURL","sendIntent","action","extras","Promise","resolve","reject","Error","module","exports"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Linking/Linking.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @format\r\n * @flow strict-local\r\n */\r\n\r\nimport type {EventSubscription} from '../vendor/emitter/EventEmitter';\r\n\r\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\r\nimport Platform from '../Utilities/Platform';\r\nimport NativeIntentAndroid from './NativeIntentAndroid';\r\nimport NativeLinkingManager from './NativeLinkingManager';\r\nimport invariant from 'invariant';\r\nimport nullthrows from 'nullthrows';\r\n\r\ntype LinkingEventDefinitions = {\r\n  url: [{url: string}],\r\n};\r\n\r\n/**\r\n * `Linking` gives you a general interface to interact with both incoming\r\n * and outgoing app links.\r\n *\r\n * See https://reactnative.dev/docs/linking\r\n */\r\nclass Linking extends NativeEventEmitter<LinkingEventDefinitions> {\r\n  constructor() {\r\n    super(Platform.OS === 'ios' ? nullthrows(NativeLinkingManager) : undefined);\r\n  }\r\n\r\n  /**\r\n   * Add a handler to Linking changes by listening to the `url` event type\r\n   * and providing the handler\r\n   *\r\n   * See https://reactnative.dev/docs/linking#addeventlistener\r\n   */\r\n  addEventListener<K: $Keys<LinkingEventDefinitions>>(\r\n    eventType: K,\r\n    listener: (...$ElementType<LinkingEventDefinitions, K>) => mixed,\r\n    context: $FlowFixMe,\r\n  ): EventSubscription {\r\n    return this.addListener(eventType, listener);\r\n  }\r\n\r\n  /**\r\n   * Try to open the given `url` with any of the installed apps.\r\n   *\r\n   * See https://reactnative.dev/docs/linking#openurl\r\n   */\r\n  openURL(url: string): Promise<void> {\r\n    this._validateURL(url);\r\n    if (Platform.OS === 'android') {\r\n      return nullthrows(NativeIntentAndroid).openURL(url);\r\n    } else {\r\n      return nullthrows(NativeLinkingManager).openURL(url);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Determine whether or not an installed app can handle a given URL.\r\n   *\r\n   * See https://reactnative.dev/docs/linking#canopenurl\r\n   */\r\n  canOpenURL(url: string): Promise<boolean> {\r\n    this._validateURL(url);\r\n    if (Platform.OS === 'android') {\r\n      return nullthrows(NativeIntentAndroid).canOpenURL(url);\r\n    } else {\r\n      return nullthrows(NativeLinkingManager).canOpenURL(url);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open app settings.\r\n   *\r\n   * See https://reactnative.dev/docs/linking#opensettings\r\n   */\r\n  openSettings(): Promise<void> {\r\n    if (Platform.OS === 'android') {\r\n      return nullthrows(NativeIntentAndroid).openSettings();\r\n    } else {\r\n      return nullthrows(NativeLinkingManager).openSettings();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * If the app launch was triggered by an app link,\r\n   * it will give the link url, otherwise it will give `null`\r\n   *\r\n   * See https://reactnative.dev/docs/linking#getinitialurl\r\n   */\r\n  getInitialURL(): Promise<?string> {\r\n    return Platform.OS === 'android'\r\n      ? nullthrows(NativeIntentAndroid).getInitialURL()\r\n      : nullthrows(NativeLinkingManager).getInitialURL();\r\n  }\r\n\r\n  /*\r\n   * Launch an Android intent with extras (optional)\r\n   *\r\n   * @platform android\r\n   *\r\n   * See https://reactnative.dev/docs/linking#sendintent\r\n   */\r\n  sendIntent(\r\n    action: string,\r\n    extras?: Array<{\r\n      key: string,\r\n      value: string | number | boolean,\r\n      ...\r\n    }>,\r\n  ): Promise<void> {\r\n    if (Platform.OS === 'android') {\r\n      return nullthrows(NativeIntentAndroid).sendIntent(action, extras);\r\n    } else {\r\n      return new Promise((resolve, reject) => reject(new Error('Unsupported')));\r\n    }\r\n  }\r\n\r\n  _validateURL(url: string): void {\r\n    invariant(\r\n      typeof url === 'string',\r\n      'Invalid URL: should be a string. Was: ' + url,\r\n    );\r\n    invariant(url, 'Invalid URL: cannot be empty');\r\n  }\r\n}\r\n\r\nmodule.exports = (new Linking(): Linking);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}