{"ast":null,"code":"import * as TurboModuleRegistry from \"../TurboModule/TurboModuleRegistry\";\nexport default TurboModuleRegistry.get('NativeAnimatedModule');","map":{"version":3,"names":["TurboModuleRegistry","get"],"sources":["D:/Users/julian/GIT/CoffeeLoyalty/FrontEnd User Mobile/node_modules/react-native/Libraries/Animated/NativeAnimatedModule.js"],"sourcesContent":["/**\r\n * Copyright (c) Meta Platforms, Inc. and affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * @flow\r\n * @format\r\n */\r\n\r\nimport type {TurboModule} from '../TurboModule/RCTExport';\r\n\r\nimport * as TurboModuleRegistry from '../TurboModule/TurboModuleRegistry';\r\n\r\ntype EndResult = {finished: boolean, ...};\r\ntype EndCallback = (result: EndResult) => void;\r\ntype SaveValueCallback = (value: number) => void;\r\n\r\nexport type EventMapping = {|\r\n  nativeEventPath: Array<string>,\r\n  animatedValueTag: ?number,\r\n|};\r\n\r\n// The config has different keys depending on the type of the Node\r\n// TODO(T54896888): Make these types strict\r\nexport type AnimatedNodeConfig = Object;\r\nexport type AnimatingNodeConfig = Object;\r\n\r\nexport interface Spec extends TurboModule {\r\n  +startOperationBatch: () => void;\r\n  +finishOperationBatch: () => void;\r\n  +createAnimatedNode: (tag: number, config: AnimatedNodeConfig) => void;\r\n  +updateAnimatedNodeConfig?: (tag: number, config: AnimatedNodeConfig) => void;\r\n  +getValue: (tag: number, saveValueCallback: SaveValueCallback) => void;\r\n  +startListeningToAnimatedNodeValue: (tag: number) => void;\r\n  +stopListeningToAnimatedNodeValue: (tag: number) => void;\r\n  +connectAnimatedNodes: (parentTag: number, childTag: number) => void;\r\n  +disconnectAnimatedNodes: (parentTag: number, childTag: number) => void;\r\n  +startAnimatingNode: (\r\n    animationId: number,\r\n    nodeTag: number,\r\n    config: AnimatingNodeConfig,\r\n    endCallback: EndCallback,\r\n  ) => void;\r\n  +stopAnimation: (animationId: number) => void;\r\n  +setAnimatedNodeValue: (nodeTag: number, value: number) => void;\r\n  +setAnimatedNodeOffset: (nodeTag: number, offset: number) => void;\r\n  +flattenAnimatedNodeOffset: (nodeTag: number) => void;\r\n  +extractAnimatedNodeOffset: (nodeTag: number) => void;\r\n  +connectAnimatedNodeToView: (nodeTag: number, viewTag: number) => void;\r\n  +disconnectAnimatedNodeFromView: (nodeTag: number, viewTag: number) => void;\r\n  +restoreDefaultValues: (nodeTag: number) => void;\r\n  +dropAnimatedNode: (tag: number) => void;\r\n  +addAnimatedEventToView: (\r\n    viewTag: number,\r\n    eventName: string,\r\n    eventMapping: EventMapping,\r\n  ) => void;\r\n  +removeAnimatedEventFromView: (\r\n    viewTag: number,\r\n    eventName: string,\r\n    animatedNodeTag: number,\r\n  ) => void;\r\n\r\n  // Events\r\n  +addListener: (eventName: string) => void;\r\n  +removeListeners: (count: number) => void;\r\n\r\n  // All of the above in a batched mode\r\n  +queueAndExecuteBatchedOperations?: (operationsAndArgs: Array<any>) => void;\r\n}\r\n\r\nexport default (TurboModuleRegistry.get<Spec>('NativeAnimatedModule'): ?Spec);\r\n"],"mappings":"AAYA,OAAO,KAAKA,mBAAmB;AA4D/B,eAAgBA,mBAAmB,CAACC,GAAG,CAAO,sBAAsB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}